
RTOSSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  0800de1c  0800de1c  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e804  0800e804  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800e804  0800e804  0001e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e80c  0800e80c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e80c  0800e80c  0001e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800e814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f24  20000244  0800ea58  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005168  0800ea58  00025168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e88  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005524  00000000  00000000  000460fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c08  00000000  00000000  0004b620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a38  00000000  00000000  0004d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf16  00000000  00000000  0004ec60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018aeb  00000000  00000000  0006bb76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d502  00000000  00000000  00084661  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec4  00000000  00000000  00121be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de04 	.word	0x0800de04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800de04 	.word	0x0800de04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2iz>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000630:	d215      	bcs.n	800065e <__aeabi_d2iz+0x36>
 8000632:	d511      	bpl.n	8000658 <__aeabi_d2iz+0x30>
 8000634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d912      	bls.n	8000664 <__aeabi_d2iz+0x3c>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	bf18      	it	ne
 8000654:	4240      	negne	r0, r0
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000662:	d105      	bne.n	8000670 <__aeabi_d2iz+0x48>
 8000664:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_uldivmod>:
 8000678:	b953      	cbnz	r3, 8000690 <__aeabi_uldivmod+0x18>
 800067a:	b94a      	cbnz	r2, 8000690 <__aeabi_uldivmod+0x18>
 800067c:	2900      	cmp	r1, #0
 800067e:	bf08      	it	eq
 8000680:	2800      	cmpeq	r0, #0
 8000682:	bf1c      	itt	ne
 8000684:	f04f 31ff 	movne.w	r1, #4294967295
 8000688:	f04f 30ff 	movne.w	r0, #4294967295
 800068c:	f000 b972 	b.w	8000974 <__aeabi_idiv0>
 8000690:	f1ad 0c08 	sub.w	ip, sp, #8
 8000694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000698:	f000 f806 	bl	80006a8 <__udivmoddi4>
 800069c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	4604      	mov	r4, r0
 80006b0:	4688      	mov	r8, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d14b      	bne.n	800074e <__udivmoddi4+0xa6>
 80006b6:	428a      	cmp	r2, r1
 80006b8:	4615      	mov	r5, r2
 80006ba:	d967      	bls.n	800078c <__udivmoddi4+0xe4>
 80006bc:	fab2 f282 	clz	r2, r2
 80006c0:	b14a      	cbz	r2, 80006d6 <__udivmoddi4+0x2e>
 80006c2:	f1c2 0720 	rsb	r7, r2, #32
 80006c6:	fa01 f302 	lsl.w	r3, r1, r2
 80006ca:	fa20 f707 	lsr.w	r7, r0, r7
 80006ce:	4095      	lsls	r5, r2
 80006d0:	ea47 0803 	orr.w	r8, r7, r3
 80006d4:	4094      	lsls	r4, r2
 80006d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006da:	0c23      	lsrs	r3, r4, #16
 80006dc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006e0:	fa1f fc85 	uxth.w	ip, r5
 80006e4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ec:	fb07 f10c 	mul.w	r1, r7, ip
 80006f0:	4299      	cmp	r1, r3
 80006f2:	d909      	bls.n	8000708 <__udivmoddi4+0x60>
 80006f4:	18eb      	adds	r3, r5, r3
 80006f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006fa:	f080 811b 	bcs.w	8000934 <__udivmoddi4+0x28c>
 80006fe:	4299      	cmp	r1, r3
 8000700:	f240 8118 	bls.w	8000934 <__udivmoddi4+0x28c>
 8000704:	3f02      	subs	r7, #2
 8000706:	442b      	add	r3, r5
 8000708:	1a5b      	subs	r3, r3, r1
 800070a:	b2a4      	uxth	r4, r4
 800070c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000710:	fb0e 3310 	mls	r3, lr, r0, r3
 8000714:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000718:	fb00 fc0c 	mul.w	ip, r0, ip
 800071c:	45a4      	cmp	ip, r4
 800071e:	d909      	bls.n	8000734 <__udivmoddi4+0x8c>
 8000720:	192c      	adds	r4, r5, r4
 8000722:	f100 33ff 	add.w	r3, r0, #4294967295
 8000726:	f080 8107 	bcs.w	8000938 <__udivmoddi4+0x290>
 800072a:	45a4      	cmp	ip, r4
 800072c:	f240 8104 	bls.w	8000938 <__udivmoddi4+0x290>
 8000730:	3802      	subs	r0, #2
 8000732:	442c      	add	r4, r5
 8000734:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000738:	eba4 040c 	sub.w	r4, r4, ip
 800073c:	2700      	movs	r7, #0
 800073e:	b11e      	cbz	r6, 8000748 <__udivmoddi4+0xa0>
 8000740:	40d4      	lsrs	r4, r2
 8000742:	2300      	movs	r3, #0
 8000744:	e9c6 4300 	strd	r4, r3, [r6]
 8000748:	4639      	mov	r1, r7
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d909      	bls.n	8000766 <__udivmoddi4+0xbe>
 8000752:	2e00      	cmp	r6, #0
 8000754:	f000 80eb 	beq.w	800092e <__udivmoddi4+0x286>
 8000758:	2700      	movs	r7, #0
 800075a:	e9c6 0100 	strd	r0, r1, [r6]
 800075e:	4638      	mov	r0, r7
 8000760:	4639      	mov	r1, r7
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	fab3 f783 	clz	r7, r3
 800076a:	2f00      	cmp	r7, #0
 800076c:	d147      	bne.n	80007fe <__udivmoddi4+0x156>
 800076e:	428b      	cmp	r3, r1
 8000770:	d302      	bcc.n	8000778 <__udivmoddi4+0xd0>
 8000772:	4282      	cmp	r2, r0
 8000774:	f200 80fa 	bhi.w	800096c <__udivmoddi4+0x2c4>
 8000778:	1a84      	subs	r4, r0, r2
 800077a:	eb61 0303 	sbc.w	r3, r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	4698      	mov	r8, r3
 8000782:	2e00      	cmp	r6, #0
 8000784:	d0e0      	beq.n	8000748 <__udivmoddi4+0xa0>
 8000786:	e9c6 4800 	strd	r4, r8, [r6]
 800078a:	e7dd      	b.n	8000748 <__udivmoddi4+0xa0>
 800078c:	b902      	cbnz	r2, 8000790 <__udivmoddi4+0xe8>
 800078e:	deff      	udf	#255	; 0xff
 8000790:	fab2 f282 	clz	r2, r2
 8000794:	2a00      	cmp	r2, #0
 8000796:	f040 808f 	bne.w	80008b8 <__udivmoddi4+0x210>
 800079a:	1b49      	subs	r1, r1, r5
 800079c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007a0:	fa1f f885 	uxth.w	r8, r5
 80007a4:	2701      	movs	r7, #1
 80007a6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007aa:	0c23      	lsrs	r3, r4, #16
 80007ac:	fb0e 111c 	mls	r1, lr, ip, r1
 80007b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b4:	fb08 f10c 	mul.w	r1, r8, ip
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x124>
 80007bc:	18eb      	adds	r3, r5, r3
 80007be:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x122>
 80007c4:	4299      	cmp	r1, r3
 80007c6:	f200 80cd 	bhi.w	8000964 <__udivmoddi4+0x2bc>
 80007ca:	4684      	mov	ip, r0
 80007cc:	1a59      	subs	r1, r3, r1
 80007ce:	b2a3      	uxth	r3, r4
 80007d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007d4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007dc:	fb08 f800 	mul.w	r8, r8, r0
 80007e0:	45a0      	cmp	r8, r4
 80007e2:	d907      	bls.n	80007f4 <__udivmoddi4+0x14c>
 80007e4:	192c      	adds	r4, r5, r4
 80007e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x14a>
 80007ec:	45a0      	cmp	r8, r4
 80007ee:	f200 80b6 	bhi.w	800095e <__udivmoddi4+0x2b6>
 80007f2:	4618      	mov	r0, r3
 80007f4:	eba4 0408 	sub.w	r4, r4, r8
 80007f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007fc:	e79f      	b.n	800073e <__udivmoddi4+0x96>
 80007fe:	f1c7 0c20 	rsb	ip, r7, #32
 8000802:	40bb      	lsls	r3, r7
 8000804:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000808:	ea4e 0e03 	orr.w	lr, lr, r3
 800080c:	fa01 f407 	lsl.w	r4, r1, r7
 8000810:	fa20 f50c 	lsr.w	r5, r0, ip
 8000814:	fa21 f30c 	lsr.w	r3, r1, ip
 8000818:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800081c:	4325      	orrs	r5, r4
 800081e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000822:	0c2c      	lsrs	r4, r5, #16
 8000824:	fb08 3319 	mls	r3, r8, r9, r3
 8000828:	fa1f fa8e 	uxth.w	sl, lr
 800082c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000830:	fb09 f40a 	mul.w	r4, r9, sl
 8000834:	429c      	cmp	r4, r3
 8000836:	fa02 f207 	lsl.w	r2, r2, r7
 800083a:	fa00 f107 	lsl.w	r1, r0, r7
 800083e:	d90b      	bls.n	8000858 <__udivmoddi4+0x1b0>
 8000840:	eb1e 0303 	adds.w	r3, lr, r3
 8000844:	f109 30ff 	add.w	r0, r9, #4294967295
 8000848:	f080 8087 	bcs.w	800095a <__udivmoddi4+0x2b2>
 800084c:	429c      	cmp	r4, r3
 800084e:	f240 8084 	bls.w	800095a <__udivmoddi4+0x2b2>
 8000852:	f1a9 0902 	sub.w	r9, r9, #2
 8000856:	4473      	add	r3, lr
 8000858:	1b1b      	subs	r3, r3, r4
 800085a:	b2ad      	uxth	r5, r5
 800085c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000860:	fb08 3310 	mls	r3, r8, r0, r3
 8000864:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000868:	fb00 fa0a 	mul.w	sl, r0, sl
 800086c:	45a2      	cmp	sl, r4
 800086e:	d908      	bls.n	8000882 <__udivmoddi4+0x1da>
 8000870:	eb1e 0404 	adds.w	r4, lr, r4
 8000874:	f100 33ff 	add.w	r3, r0, #4294967295
 8000878:	d26b      	bcs.n	8000952 <__udivmoddi4+0x2aa>
 800087a:	45a2      	cmp	sl, r4
 800087c:	d969      	bls.n	8000952 <__udivmoddi4+0x2aa>
 800087e:	3802      	subs	r0, #2
 8000880:	4474      	add	r4, lr
 8000882:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000886:	fba0 8902 	umull	r8, r9, r0, r2
 800088a:	eba4 040a 	sub.w	r4, r4, sl
 800088e:	454c      	cmp	r4, r9
 8000890:	46c2      	mov	sl, r8
 8000892:	464b      	mov	r3, r9
 8000894:	d354      	bcc.n	8000940 <__udivmoddi4+0x298>
 8000896:	d051      	beq.n	800093c <__udivmoddi4+0x294>
 8000898:	2e00      	cmp	r6, #0
 800089a:	d069      	beq.n	8000970 <__udivmoddi4+0x2c8>
 800089c:	ebb1 050a 	subs.w	r5, r1, sl
 80008a0:	eb64 0403 	sbc.w	r4, r4, r3
 80008a4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008a8:	40fd      	lsrs	r5, r7
 80008aa:	40fc      	lsrs	r4, r7
 80008ac:	ea4c 0505 	orr.w	r5, ip, r5
 80008b0:	e9c6 5400 	strd	r5, r4, [r6]
 80008b4:	2700      	movs	r7, #0
 80008b6:	e747      	b.n	8000748 <__udivmoddi4+0xa0>
 80008b8:	f1c2 0320 	rsb	r3, r2, #32
 80008bc:	fa20 f703 	lsr.w	r7, r0, r3
 80008c0:	4095      	lsls	r5, r2
 80008c2:	fa01 f002 	lsl.w	r0, r1, r2
 80008c6:	fa21 f303 	lsr.w	r3, r1, r3
 80008ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ce:	4338      	orrs	r0, r7
 80008d0:	0c01      	lsrs	r1, r0, #16
 80008d2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008d6:	fa1f f885 	uxth.w	r8, r5
 80008da:	fb0e 3317 	mls	r3, lr, r7, r3
 80008de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e2:	fb07 f308 	mul.w	r3, r7, r8
 80008e6:	428b      	cmp	r3, r1
 80008e8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ec:	d907      	bls.n	80008fe <__udivmoddi4+0x256>
 80008ee:	1869      	adds	r1, r5, r1
 80008f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008f4:	d22f      	bcs.n	8000956 <__udivmoddi4+0x2ae>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d92d      	bls.n	8000956 <__udivmoddi4+0x2ae>
 80008fa:	3f02      	subs	r7, #2
 80008fc:	4429      	add	r1, r5
 80008fe:	1acb      	subs	r3, r1, r3
 8000900:	b281      	uxth	r1, r0
 8000902:	fbb3 f0fe 	udiv	r0, r3, lr
 8000906:	fb0e 3310 	mls	r3, lr, r0, r3
 800090a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800090e:	fb00 f308 	mul.w	r3, r0, r8
 8000912:	428b      	cmp	r3, r1
 8000914:	d907      	bls.n	8000926 <__udivmoddi4+0x27e>
 8000916:	1869      	adds	r1, r5, r1
 8000918:	f100 3cff 	add.w	ip, r0, #4294967295
 800091c:	d217      	bcs.n	800094e <__udivmoddi4+0x2a6>
 800091e:	428b      	cmp	r3, r1
 8000920:	d915      	bls.n	800094e <__udivmoddi4+0x2a6>
 8000922:	3802      	subs	r0, #2
 8000924:	4429      	add	r1, r5
 8000926:	1ac9      	subs	r1, r1, r3
 8000928:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800092c:	e73b      	b.n	80007a6 <__udivmoddi4+0xfe>
 800092e:	4637      	mov	r7, r6
 8000930:	4630      	mov	r0, r6
 8000932:	e709      	b.n	8000748 <__udivmoddi4+0xa0>
 8000934:	4607      	mov	r7, r0
 8000936:	e6e7      	b.n	8000708 <__udivmoddi4+0x60>
 8000938:	4618      	mov	r0, r3
 800093a:	e6fb      	b.n	8000734 <__udivmoddi4+0x8c>
 800093c:	4541      	cmp	r1, r8
 800093e:	d2ab      	bcs.n	8000898 <__udivmoddi4+0x1f0>
 8000940:	ebb8 0a02 	subs.w	sl, r8, r2
 8000944:	eb69 020e 	sbc.w	r2, r9, lr
 8000948:	3801      	subs	r0, #1
 800094a:	4613      	mov	r3, r2
 800094c:	e7a4      	b.n	8000898 <__udivmoddi4+0x1f0>
 800094e:	4660      	mov	r0, ip
 8000950:	e7e9      	b.n	8000926 <__udivmoddi4+0x27e>
 8000952:	4618      	mov	r0, r3
 8000954:	e795      	b.n	8000882 <__udivmoddi4+0x1da>
 8000956:	4667      	mov	r7, ip
 8000958:	e7d1      	b.n	80008fe <__udivmoddi4+0x256>
 800095a:	4681      	mov	r9, r0
 800095c:	e77c      	b.n	8000858 <__udivmoddi4+0x1b0>
 800095e:	3802      	subs	r0, #2
 8000960:	442c      	add	r4, r5
 8000962:	e747      	b.n	80007f4 <__udivmoddi4+0x14c>
 8000964:	f1ac 0c02 	sub.w	ip, ip, #2
 8000968:	442b      	add	r3, r5
 800096a:	e72f      	b.n	80007cc <__udivmoddi4+0x124>
 800096c:	4638      	mov	r0, r7
 800096e:	e708      	b.n	8000782 <__udivmoddi4+0xda>
 8000970:	4637      	mov	r7, r6
 8000972:	e6e9      	b.n	8000748 <__udivmoddi4+0xa0>

08000974 <__aeabi_idiv0>:
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <TimerInit>:
uint8_t i;
extern UART_HandleTypeDef huart1;
static uint8_t uart_command[128];
UART_HandleTypeDef *amw_uart = &huart1;
void TimerInit(Timer* timer)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	2208      	movs	r2, #8
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f00c f807 	bl	800c9a2 <memset>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <TimerIsExpired>:

char TimerIsExpired(Timer* timer)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3304      	adds	r3, #4
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f00b fa51 	bl	800be54 <xTaskCheckForTimeOut>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <TimerCountdownMS>:

void TimerCountdownMS(Timer* timer, unsigned int timeout)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f00b f9fe 	bl	800bddc <vTaskSetTimeOutState>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <TimerCountdown>:

void TimerCountdown(Timer* timer, unsigned int timeout)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffe1 	bl	80009c6 <TimerCountdownMS>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <TimerLeftMS>:

int TimerLeftMS(Timer* timer)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3304      	adds	r3, #4
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00b fa19 	bl	800be54 <xTaskCheckForTimeOut>
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <getCmdResponse>:
	HAL_UART_Transmit(amw_uart, transmitBuff, strlen(transmitBuff), 100);
	return 0;
}

int getCmdResponse(unsigned char* uart_reponse)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    uint8_t header[16] = { 0 };
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
    uint8_t error_code[1];
    int rc = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_UART_Receive(amw_uart, header, 9, 0xFFFF);
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <getCmdResponse+0xac>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f107 0114 	add.w	r1, r7, #20
 8000a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a56:	2209      	movs	r2, #9
 8000a58:	f009 fd48 	bl	800a4ec <HAL_UART_Receive>

    if(header[0] == 'R')
 8000a5c:	7d3b      	ldrb	r3, [r7, #20]
 8000a5e:	2b52      	cmp	r3, #82	; 0x52
 8000a60:	d135      	bne.n	8000ace <getCmdResponse+0x9e>
    {
    	if(header[1] == '0')
 8000a62:	7d7b      	ldrb	r3, [r7, #21]
 8000a64:	2b30      	cmp	r3, #48	; 0x30
 8000a66:	d122      	bne.n	8000aae <getCmdResponse+0x7e>
		{
			int len = atoi((char *)&header[2]);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00b ff5e 	bl	800c930 <atoi>
 8000a74:	6278      	str	r0, [r7, #36]	; 0x24
			// every response always ends in /r/n (i.e., always > 2 bytes)
			if(len > 2)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	dd16      	ble.n	8000aaa <getCmdResponse+0x7a>
			{
				unsigned char temp[2];

				// read the data (without the trailing /r/n)
				HAL_UART_Receive(amw_uart, uart_reponse, len - 2, 0xFFFF);
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <getCmdResponse+0xac>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	3b02      	subs	r3, #2
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	f009 fd2d 	bl	800a4ec <HAL_UART_Receive>
				// cleanup the trailing /r/n
				HAL_UART_Receive(amw_uart, temp, 2, 0xFFFF);
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <getCmdResponse+0xac>)
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	f107 010c 	add.w	r1, r7, #12
 8000a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	f009 fd24 	bl	800a4ec <HAL_UART_Receive>
				// return actual data length
				return len - 2;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	e013      	b.n	8000ad2 <getCmdResponse+0xa2>
			}
			else
			{
				return 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e011      	b.n	8000ad2 <getCmdResponse+0xa2>
			}

		}else{
			int len = atoi((char *)&header[2]);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f00b ff3b 	bl	800c930 <atoi>
 8000aba:	62b8      	str	r0, [r7, #40]	; 0x28
			HAL_UART_Receive(amw_uart, uart_reponse, len, 0xFFFF);
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <getCmdResponse+0xac>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	f009 fd0f 	bl	800a4ec <HAL_UART_Receive>
		}

    }
    return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <OsWrapper_read>:

int OsWrapper_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
    int bytes = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    TickType_t xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    size_t command_len;
    int i;
    vTaskSetTimeOutState(&xTimeOut); /* Record the time at which this function was entered. */
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00b f96e 	bl	800bddc <vTaskSetTimeOutState>
#ifdef BUS_COMMAND_MODE
    while(bytes < len)
 8000b00:	e02e      	b.n	8000b60 <OsWrapper_read+0x80>
    {
        sprintf((char*)uart_command, "read %u %u\r\n", n->my_socket, len - bytes);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	491a      	ldr	r1, [pc, #104]	; (8000b78 <OsWrapper_read+0x98>)
 8000b10:	481a      	ldr	r0, [pc, #104]	; (8000b7c <OsWrapper_read+0x9c>)
 8000b12:	f00b ffcb 	bl	800caac <siprintf>
        command_len = strlen((char*)uart_command);
 8000b16:	4819      	ldr	r0, [pc, #100]	; (8000b7c <OsWrapper_read+0x9c>)
 8000b18:	f7ff fb6c 	bl	80001f4 <strlen>
 8000b1c:	6238      	str	r0, [r7, #32]
        HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <OsWrapper_read+0xa0>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2a:	4914      	ldr	r1, [pc, #80]	; (8000b7c <OsWrapper_read+0x9c>)
 8000b2c:	f009 fc45 	bl	800a3ba <HAL_UART_Transmit>

        bytes += getCmdResponse(buffer+bytes);
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff7a 	bl	8000a30 <getCmdResponse>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	4413      	add	r3, r2
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24

        if(xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdTRUE)   // Timeout
 8000b44:	f107 021c 	add.w	r2, r7, #28
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00b f980 	bl	800be54 <xTaskCheckForTimeOut>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d007      	beq.n	8000b6a <OsWrapper_read+0x8a>
        {
            break;
        }

        // slow down, give chance to other processes
        osDelay(5);
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f00a fc99 	bl	800b492 <osDelay>
    while(bytes < len)
 8000b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbcc      	blt.n	8000b02 <OsWrapper_read+0x22>
 8000b68:	e000      	b.n	8000b6c <OsWrapper_read+0x8c>
            break;
 8000b6a:	bf00      	nop
    bytes = len;

    // ToDo: should check for timeout here as well
#endif

    return bytes;
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800de1c 	.word	0x0800de1c
 8000b7c:	20000260 	.word	0x20000260
 8000b80:	20000000 	.word	0x20000000

08000b84 <OsWrapper_write>:

int OsWrapper_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0a6      	sub	sp, #152	; 0x98
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    int i;
    unsigned char read_buf[128] = { 0 };
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00b ff01 	bl	800c9a2 <memset>

    sprintf((char*)uart_command, "write %u %u\r\n", n->my_socket, len);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4912      	ldr	r1, [pc, #72]	; (8000bf0 <OsWrapper_write+0x6c>)
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <OsWrapper_write+0x70>)
 8000baa:	f00b ff7f 	bl	800caac <siprintf>
    command_len = strlen((char*)uart_command);
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <OsWrapper_write+0x70>)
 8000bb0:	f7ff fb20 	bl	80001f4 <strlen>
 8000bb4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 100);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <OsWrapper_write+0x74>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	2364      	movs	r3, #100	; 0x64
 8000bc4:	490b      	ldr	r1, [pc, #44]	; (8000bf4 <OsWrapper_write+0x70>)
 8000bc6:	f009 fbf8 	bl	800a3ba <HAL_UART_Transmit>
#endif

    HAL_UART_Transmit(amw_uart, buffer, len, 0xFFFF);
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <OsWrapper_write+0x74>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	f009 fbef 	bl	800a3ba <HAL_UART_Transmit>

#ifdef BUS_COMMAND_MODE
    // cleanup ZentriOS response
    getCmdResponse(read_buf);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff25 	bl	8000a30 <getCmdResponse>
#endif

    // ToDo: should return only the succeeded transmitted length, not the input len
    return len;
 8000be6:	687b      	ldr	r3, [r7, #4]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3798      	adds	r7, #152	; 0x98
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800de2c 	.word	0x0800de2c
 8000bf4:	20000260 	.word	0x20000260
 8000bf8:	20000000 	.word	0x20000000

08000bfc <setCmdMode>:
		return -1;
	else
		return 0;
}

int setCmdMode(const char *mode){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0a4      	sub	sp, #144	; 0x90
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	size_t command_len;
	uint8_t resp_buff[128] = { 0 };
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b fec8 	bl	800c9a2 <memset>
	sprintf((unsigned char*)uart_command, "set sy c f %s\r\n", mode);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4911      	ldr	r1, [pc, #68]	; (8000c5c <setCmdMode+0x60>)
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <setCmdMode+0x64>)
 8000c18:	f00b ff48 	bl	800caac <siprintf>
	command_len = strlen((char*)uart_command);
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <setCmdMode+0x64>)
 8000c1e:	f7ff fae9 	bl	80001f4 <strlen>
 8000c22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <setCmdMode+0x68>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	490a      	ldr	r1, [pc, #40]	; (8000c60 <setCmdMode+0x64>)
 8000c36:	f009 fbc0 	bl	800a3ba <HAL_UART_Transmit>
	if(getCmdResponse(resp_buff)<0)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fef6 	bl	8000a30 <getCmdResponse>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	da02      	bge.n	8000c50 <setCmdMode+0x54>
		return -1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e000      	b.n	8000c52 <setCmdMode+0x56>
	else
		return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3790      	adds	r7, #144	; 0x90
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	0800de4c 	.word	0x0800de4c
 8000c60:	20000260 	.word	0x20000260
 8000c64:	20000000 	.word	0x20000000

08000c68 <setupNetwork>:

int setupNetwork(char *ssid, char *password){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0a4      	sub	sp, #144	; 0x90
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
#ifdef BUS_COMMAND_MODE
    uint8_t resp_buff[128] = { 0 };
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00b fe91 	bl	800c9a2 <memset>
    size_t command_len;
    sprintf((unsigned char*)uart_command, "set wl s \"%s\"\r\n", ssid);
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4921      	ldr	r1, [pc, #132]	; (8000d08 <setupNetwork+0xa0>)
 8000c84:	4821      	ldr	r0, [pc, #132]	; (8000d0c <setupNetwork+0xa4>)
 8000c86:	f00b ff11 	bl	800caac <siprintf>
    command_len = strlen((char*)uart_command);
 8000c8a:	4820      	ldr	r0, [pc, #128]	; (8000d0c <setupNetwork+0xa4>)
 8000c8c:	f7ff fab2 	bl	80001f4 <strlen>
 8000c90:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <setupNetwork+0xa8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca2:	491a      	ldr	r1, [pc, #104]	; (8000d0c <setupNetwork+0xa4>)
 8000ca4:	f009 fb89 	bl	800a3ba <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)<0)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff febf 	bl	8000a30 <getCmdResponse>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da02      	bge.n	8000cbe <setupNetwork+0x56>
    	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	e01f      	b.n	8000cfe <setupNetwork+0x96>

    sprintf((unsigned char*)uart_command, "set wl p %s\r\n", password);
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4914      	ldr	r1, [pc, #80]	; (8000d14 <setupNetwork+0xac>)
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <setupNetwork+0xa4>)
 8000cc4:	f00b fef2 	bl	800caac <siprintf>
    command_len = strlen((char*)uart_command);
 8000cc8:	4810      	ldr	r0, [pc, #64]	; (8000d0c <setupNetwork+0xa4>)
 8000cca:	f7ff fa93 	bl	80001f4 <strlen>
 8000cce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <setupNetwork+0xa8>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce0:	490a      	ldr	r1, [pc, #40]	; (8000d0c <setupNetwork+0xa4>)
 8000ce2:	f009 fb6a 	bl	800a3ba <HAL_UART_Transmit>
    if(getCmdResponse(resp_buff)<0)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fea0 	bl	8000a30 <getCmdResponse>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da02      	bge.n	8000cfc <setupNetwork+0x94>
        return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e000      	b.n	8000cfe <setupNetwork+0x96>
    else
    	return 0;
 8000cfc:	2300      	movs	r3, #0
#else
    return 0;
#endif
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3790      	adds	r7, #144	; 0x90
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	0800de5c 	.word	0x0800de5c
 8000d0c:	20000260 	.word	0x20000260
 8000d10:	20000000 	.word	0x20000000
 8000d14:	0800de6c 	.word	0x0800de6c

08000d18 <checkNetworkStatus>:

int checkNetworkStatus(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0a4      	sub	sp, #144	; 0x90
 8000d1c:	af00      	add	r7, sp, #0
#ifdef BUS_COMMAND_MODE
	size_t command_len;
    uint8_t resp_buff[128] = { 0 };
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00b fe3c 	bl	800c9a2 <memset>
    char *ptr = NULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    char *sub = NULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    command_len = strlen("get wlan.info\r\n");
 8000d36:	230f      	movs	r3, #15
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_UART_Transmit(amw_uart, "get wlan.info\r\n", command_len, 0xFFFF);
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <checkNetworkStatus+0x94>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d4a:	4919      	ldr	r1, [pc, #100]	; (8000db0 <checkNetworkStatus+0x98>)
 8000d4c:	f009 fb35 	bl	800a3ba <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)>=0)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe6c 	bl	8000a30 <getCmdResponse>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db20      	blt.n	8000da0 <checkNetworkStatus+0x88>
    {
    	ptr = strstr(resp_buff, " ");
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2120      	movs	r1, #32
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00b fec2 	bl	800caec <strchr>
 8000d68:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	sub = strstr(resp_buff, "\r\n");
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4911      	ldr	r1, [pc, #68]	; (8000db4 <checkNetworkStatus+0x9c>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00b feda 	bl	800cb2a <strstr>
 8000d76:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    	*sub = '\0';
 8000d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
    	if(!strcmp(&ptr[1], "up")){
 8000d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d86:	3301      	adds	r3, #1
 8000d88:	490b      	ldr	r1, [pc, #44]	; (8000db8 <checkNetworkStatus+0xa0>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa28 	bl	80001e0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <checkNetworkStatus+0x82>
    		return NET_UP;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e004      	b.n	8000da4 <checkNetworkStatus+0x8c>
    	}else
    		return NET_DOWN;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e001      	b.n	8000da4 <checkNetworkStatus+0x8c>
    }
    else
    {
        return BUS_ERROR;
 8000da0:	f06f 0301 	mvn.w	r3, #1
    }

#else
    return 0;
#endif
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3790      	adds	r7, #144	; 0x90
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	0800de7c 	.word	0x0800de7c
 8000db4:	0800de8c 	.word	0x0800de8c
 8000db8:	0800de90 	.word	0x0800de90

08000dbc <NetworkInit>:

int NetworkInit(Network* n)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0a6      	sub	sp, #152	; 0x98
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint8_t resp_buff[128] = { 0 };
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00b fde8 	bl	800c9a2 <memset>
    n->my_socket = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
    n->mqttread = OsWrapper_read;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <NetworkInit+0xa8>)
 8000ddc:	605a      	str	r2, [r3, #4]
    n->mqttwrite = OsWrapper_write;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <NetworkInit+0xac>)
 8000de2:	609a      	str	r2, [r3, #8]
    n->disconnect = NetworkDisconnect;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <NetworkInit+0xb0>)
 8000de8:	60da      	str	r2, [r3, #12]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    command_len = strlen("nup\r\n");
 8000dea:	2305      	movs	r3, #5
 8000dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, "nup\r\n", command_len, 0xFFFF);
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <NetworkInit+0xb4>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	491d      	ldr	r1, [pc, #116]	; (8000e74 <NetworkInit+0xb8>)
 8000e00:	f009 fadb 	bl	800a3ba <HAL_UART_Transmit>
    if(getCmdResponse(resp_buff)<0)
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe11 	bl	8000a30 <getCmdResponse>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da02      	bge.n	8000e1a <NetworkInit+0x5e>
    	return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e020      	b.n	8000e5c <NetworkInit+0xa0>
    else{
    	Timer timer;
		TimerInit(&timer);
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fdaa 	bl	8000978 <TimerInit>
		TimerCountdownMS(&timer, 7000);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fdca 	bl	80009c6 <TimerCountdownMS>
		osDelay(50);
 8000e32:	2032      	movs	r0, #50	; 0x32
 8000e34:	f00a fb2d 	bl	800b492 <osDelay>
    	while(checkNetworkStatus()!=NET_UP){
 8000e38:	e002      	b.n	8000e40 <NetworkInit+0x84>
    		osDelay(50);
 8000e3a:	2032      	movs	r0, #50	; 0x32
 8000e3c:	f00a fb29 	bl	800b492 <osDelay>
    	while(checkNetworkStatus()!=NET_UP){
 8000e40:	f7ff ff6a 	bl	8000d18 <checkNetworkStatus>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f7      	bne.n	8000e3a <NetworkInit+0x7e>
    	}
    	if(checkNetworkStatus()!=NET_UP){
 8000e4a:	f7ff ff65 	bl	8000d18 <checkNetworkStatus>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <NetworkInit+0x9e>
    		return -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	e000      	b.n	8000e5c <NetworkInit+0xa0>
    	}else
    		return 0;
 8000e5a:	2300      	movs	r3, #0
    }

#else
    return 0;
#endif
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3798      	adds	r7, #152	; 0x98
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08000ae1 	.word	0x08000ae1
 8000e68:	08000b85 	.word	0x08000b85
 8000e6c:	08000f2d 	.word	0x08000f2d
 8000e70:	20000000 	.word	0x20000000
 8000e74:	0800de94 	.word	0x0800de94

08000e78 <NetworkConnect>:

int NetworkConnect(Network* n, char* addr, int port)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0a6      	sub	sp, #152	; 0x98
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    uint8_t resp_buff[128] = { 0 };
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00b fd88 	bl	800c9a2 <memset>

    if(port == MQTT_SECURE_PORT)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d106      	bne.n	8000eaa <NetworkConnect+0x32>
    {
        // secure - use TLS
        sprintf((char*)uart_command, "tls_client %s %u\r\n", addr, port);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	491d      	ldr	r1, [pc, #116]	; (8000f18 <NetworkConnect+0xa0>)
 8000ea2:	481e      	ldr	r0, [pc, #120]	; (8000f1c <NetworkConnect+0xa4>)
 8000ea4:	f00b fe02 	bl	800caac <siprintf>
 8000ea8:	e005      	b.n	8000eb6 <NetworkConnect+0x3e>
    }
    else
    {
        // clear - use TCP
        sprintf((char*)uart_command, "tcpc %s %u\r\n", addr, port);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	491c      	ldr	r1, [pc, #112]	; (8000f20 <NetworkConnect+0xa8>)
 8000eb0:	481a      	ldr	r0, [pc, #104]	; (8000f1c <NetworkConnect+0xa4>)
 8000eb2:	f00b fdfb 	bl	800caac <siprintf>
    }
    command_len = strlen((char*)uart_command);
 8000eb6:	4819      	ldr	r0, [pc, #100]	; (8000f1c <NetworkConnect+0xa4>)
 8000eb8:	f7ff f99c 	bl	80001f4 <strlen>
 8000ebc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <NetworkConnect+0xac>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	4913      	ldr	r1, [pc, #76]	; (8000f1c <NetworkConnect+0xa4>)
 8000ed0:	f009 fa73 	bl	800a3ba <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)>=0)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fda9 	bl	8000a30 <getCmdResponse>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db08      	blt.n	8000ef6 <NetworkConnect+0x7e>
    {
        n->my_socket = atoi((char *)resp_buff);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00b fd21 	bl	800c930 <atoi>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e006      	b.n	8000f04 <NetworkConnect+0x8c>
    }
    else
    {
    	printf("socket failed\r\n");
 8000ef6:	480c      	ldr	r0, [pc, #48]	; (8000f28 <NetworkConnect+0xb0>)
 8000ef8:	f00b fdd0 	bl	800ca9c <puts>
        n->my_socket = -1;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f04f 32ff 	mov.w	r2, #4294967295
 8000f02:	601a      	str	r2, [r3, #0]
    }
    osDelay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f00a fac4 	bl	800b492 <osDelay>
    return n->my_socket;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
#else
    return 0;
#endif
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3798      	adds	r7, #152	; 0x98
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800de9c 	.word	0x0800de9c
 8000f1c:	20000260 	.word	0x20000260
 8000f20:	0800deb0 	.word	0x0800deb0
 8000f24:	20000000 	.word	0x20000000
 8000f28:	0800dec0 	.word	0x0800dec0

08000f2c <NetworkDisconnect>:

void NetworkDisconnect(Network* n)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0a4      	sub	sp, #144	; 0x90
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    unsigned char read_buf[128] = { 0 };
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00b fd30 	bl	800c9a2 <memset>

    sprintf((char*)uart_command, "close %u\r\n", n->my_socket);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	490d      	ldr	r1, [pc, #52]	; (8000f80 <NetworkDisconnect+0x54>)
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <NetworkDisconnect+0x58>)
 8000f4c:	f00b fdae 	bl	800caac <siprintf>
    command_len = strlen((char*)uart_command);
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <NetworkDisconnect+0x58>)
 8000f52:	f7ff f94f 	bl	80001f4 <strlen>
 8000f56:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    HAL_UART_Transmit(amw_uart, uart_command, command_len, 100);
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <NetworkDisconnect+0x5c>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	4907      	ldr	r1, [pc, #28]	; (8000f84 <NetworkDisconnect+0x58>)
 8000f68:	f009 fa27 	bl	800a3ba <HAL_UART_Transmit>
    // cleanup ZentriOS response
    getCmdResponse(read_buf);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd5d 	bl	8000a30 <getCmdResponse>
#else
    return;
#endif
}
 8000f76:	bf00      	nop
 8000f78:	3790      	adds	r7, #144	; 0x90
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800ded0 	.word	0x0800ded0
 8000f84:	20000260 	.word	0x20000260
 8000f88:	20000000 	.word	0x20000000

08000f8c <closeTCPPort>:

void closeTCPPort(int file)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0a4      	sub	sp, #144	; 0x90
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    unsigned char read_buf[128] = { 0 };
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00b fd00 	bl	800c9a2 <memset>

    sprintf((char*)uart_command, "close %u\r\n", file);
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	490d      	ldr	r1, [pc, #52]	; (8000fdc <closeTCPPort+0x50>)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <closeTCPPort+0x54>)
 8000fa8:	f00b fd80 	bl	800caac <siprintf>
    command_len = strlen((char*)uart_command);
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <closeTCPPort+0x54>)
 8000fae:	f7ff f921 	bl	80001f4 <strlen>
 8000fb2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    HAL_UART_Transmit(amw_uart, uart_command, command_len, 100);
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <closeTCPPort+0x58>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <closeTCPPort+0x54>)
 8000fc4:	f009 f9f9 	bl	800a3ba <HAL_UART_Transmit>
    // cleanup ZentriOS response
    getCmdResponse(read_buf);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fd2f 	bl	8000a30 <getCmdResponse>
#else
    return;
#endif
}
 8000fd2:	bf00      	nop
 8000fd4:	3790      	adds	r7, #144	; 0x90
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800ded0 	.word	0x0800ded0
 8000fe0:	20000260 	.word	0x20000260
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <isTCPPortOpen>:

int isTCPPortOpen(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0a2      	sub	sp, #136	; 0x88
 8000fec:	af00      	add	r7, sp, #0
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    unsigned char read_buf[128] = { 0 };
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00b fcd4 	bl	800c9a2 <memset>
    unsigned char *ptr = NULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    command_len = strlen("stream_list\r\n");
 8001000:	230d      	movs	r3, #13
 8001002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    HAL_UART_Transmit(amw_uart, "stream_list\r\n", command_len, 100);
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <isTCPPortOpen+0x80>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800100e:	b29a      	uxth	r2, r3
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	4916      	ldr	r1, [pc, #88]	; (800106c <isTCPPortOpen+0x84>)
 8001014:	f009 f9d1 	bl	800a3ba <HAL_UART_Transmit>
    // cleanup ZentriOS response
    if(getCmdResponse(read_buf)>=0){
 8001018:	463b      	mov	r3, r7
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fd08 	bl	8000a30 <getCmdResponse>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	db19      	blt.n	800105a <isTCPPortOpen+0x72>
    	ptr = strstr(read_buf, "TCPC");
 8001026:	463b      	mov	r3, r7
 8001028:	4911      	ldr	r1, [pc, #68]	; (8001070 <isTCPPortOpen+0x88>)
 800102a:	4618      	mov	r0, r3
 800102c:	f00b fd7d 	bl	800cb2a <strstr>
 8001030:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    	if(ptr){
 8001034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <isTCPPortOpen+0x6c>
    		return (read_buf[ptr-read_buf-2] - 48); // return int type of character
 800103c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001040:	463b      	mov	r3, r7
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	3b02      	subs	r3, #2
 8001046:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800104a:	4413      	add	r3, r2
 800104c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001050:	3b30      	subs	r3, #48	; 0x30
 8001052:	e004      	b.n	800105e <isTCPPortOpen+0x76>
    	}else
    		return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	e001      	b.n	800105e <isTCPPortOpen+0x76>
    }else
    	return BUS_ERROR;
 800105a:	f06f 0301 	mvn.w	r3, #1
#else
    return 0;
#endif
}
 800105e:	4618      	mov	r0, r3
 8001060:	3788      	adds	r7, #136	; 0x88
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000000 	.word	0x20000000
 800106c:	0800dedc 	.word	0x0800dedc
 8001070:	0800deec 	.word	0x0800deec

08001074 <xiaomi_fan_run>:
extern TIM_HandleTypeDef htim5;
TIM_HandleTypeDef *fan_htim = &htim1;
TIM_HandleTypeDef *fan_read_htim = &htim5;
extern uint8_t cap_speed_available;
void xiaomi_fan_run(level)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(level == HIGH_SPEED)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d10a      	bne.n	8001098 <xiaomi_fan_run+0x24>
	{
		TIM1->ARR = 1999;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <xiaomi_fan_run+0x68>)
 8001084:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_4, 1000);
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <xiaomi_fan_run+0x6c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
	else if(level == LOW_SPEED)
	{
		TIM1->ARR = 3999;
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_4, 2000);
	}
}
 8001096:	e01a      	b.n	80010ce <xiaomi_fan_run+0x5a>
	else if(level == MED_SPEED)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d10a      	bne.n	80010b4 <xiaomi_fan_run+0x40>
		TIM1->ARR = 2999;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <xiaomi_fan_run+0x68>)
 80010a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_4, 1500);
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <xiaomi_fan_run+0x6c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010b2:	e00c      	b.n	80010ce <xiaomi_fan_run+0x5a>
	else if(level == LOW_SPEED)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d109      	bne.n	80010ce <xiaomi_fan_run+0x5a>
		TIM1->ARR = 3999;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <xiaomi_fan_run+0x68>)
 80010bc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
		__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_4, 2000);
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <xiaomi_fan_run+0x6c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40010000 	.word	0x40010000
 80010e0:	20000004 	.word	0x20000004

080010e4 <xiaomi_fan_stop>:

void xiaomi_fan_stop(){
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	TIM1->ARR = 0;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <xiaomi_fan_stop+0x20>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
	__HAL_TIM_SET_COMPARE(fan_htim, TIM_CHANNEL_4, 0);
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <xiaomi_fan_stop+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000
 8001108:	20000004 	.word	0x20000004

0800110c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <vApplicationGetIdleTaskMemory+0x2c>)
 800111c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <vApplicationGetIdleTaskMemory+0x30>)
 8001122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200002e0 	.word	0x200002e0
 800113c:	20000334 	.word	0x20000334

08001140 <__io_putchar>:
void StartIR_Task(void const * argument);
void StartDisplayTask(void const * argument);

/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001148:	1d39      	adds	r1, r7, #4
 800114a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114e:	2201      	movs	r2, #1
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <__io_putchar+0x20>)
 8001152:	f009 f932 	bl	800a3ba <HAL_UART_Transmit>

  return ch;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20004e9c 	.word	0x20004e9c

08001164 <xiaomi_fan_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t xiaomi_fan_read(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <xiaomi_fan_read+0x3c>)
 800116c:	f008 f802 	bl	8009174 <HAL_TIM_IC_Start_IT>
	while(!cap_speed_available){
 8001170:	e005      	b.n	800117e <xiaomi_fan_read+0x1a>
		printf("not yet\r\n");
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <xiaomi_fan_read+0x40>)
 8001174:	f00b fc92 	bl	800ca9c <puts>
		HAL_Delay(50);
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f004 fb89 	bl	8005890 <HAL_Delay>
	while(!cap_speed_available){
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <xiaomi_fan_read+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f5      	beq.n	8001172 <xiaomi_fan_read+0xe>
	}
	cap_speed_available = 0;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <xiaomi_fan_read+0x44>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	printf("capture speed %u\r\n", cap_speed);
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <xiaomi_fan_read+0x48>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <xiaomi_fan_read+0x4c>)
 8001194:	f00b fc0e 	bl	800c9b4 <iprintf>
	return cap_speed;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <xiaomi_fan_read+0x48>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20004cb4 	.word	0x20004cb4
 80011a4:	0800def4 	.word	0x0800def4
 80011a8:	20000621 	.word	0x20000621
 80011ac:	20004c00 	.word	0x20004c00
 80011b0:	0800df00 	.word	0x0800df00

080011b4 <setUVState>:

void setUVState(uint8_t state){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(UV_GPIO_Port, UV_Pin, state);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2101      	movs	r1, #1
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <setUVState+0x24>)
 80011c6:	f004 fe93 	bl	8005ef0 <HAL_GPIO_WritePin>
	uv_state = state;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <setUVState+0x28>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	7013      	strb	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020800 	.word	0x40020800
 80011dc:	2000061d 	.word	0x2000061d

080011e0 <setIONState>:

void setIONState(uint8_t state){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ION_GPIO_Port, ION_Pin, state);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2102      	movs	r1, #2
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <setIONState+0x24>)
 80011f2:	f004 fe7d 	bl	8005ef0 <HAL_GPIO_WritePin>
	ion_state = state;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <setIONState+0x28>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	7013      	strb	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020800 	.word	0x40020800
 8001208:	2000061e 	.word	0x2000061e

0800120c <updateAirAQI>:

static void updateAirAQI(void){
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b08f      	sub	sp, #60	; 0x3c
 8001210:	af06      	add	r7, sp, #24
	float temp, hum;
	/*tmpIntPM1 = (int)pm2_5;
	float tmpFPM = pm2_5 - tmpIntPM1;
	tmpIntPM2 = trunc(tmpFPM * 100);*/
	//temperature = 9977;
	temp = (float)(temperature/1000.0f);
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <updateAirAQI+0x110>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001320 <updateAirAQI+0x114>
 8001222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001226:	edc7 7a07 	vstr	s15, [r7, #28]
	tmpIntte1 = (int)temp;
 800122a:	edd7 7a07 	vldr	s15, [r7, #28]
 800122e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001232:	ee17 3a90 	vmov	r3, s15
 8001236:	61bb      	str	r3, [r7, #24]
	float tmpT = temp - tmpIntte1;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	ed97 7a07 	vldr	s14, [r7, #28]
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	edc7 7a05 	vstr	s15, [r7, #20]
	tmpIntte2 = trunc(tmpT * 100);
 800124e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001252:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001324 <updateAirAQI+0x118>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	ec44 3b10 	vmov	d0, r3, r4
 800126a:	f00c fd91 	bl	800dd90 <trunc>
 800126e:	ec54 3b10 	vmov	r3, r4, d0
 8001272:	4618      	mov	r0, r3
 8001274:	4621      	mov	r1, r4
 8001276:	f7ff f9d7 	bl	8000628 <__aeabi_d2iz>
 800127a:	4603      	mov	r3, r0
 800127c:	613b      	str	r3, [r7, #16]
	//humidity = 9876;
	hum = (float)(humidity/1000.0f);
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <updateAirAQI+0x11c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001320 <updateAirAQI+0x114>
 800128e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001292:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpInthu1 = (int) hum;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	60bb      	str	r3, [r7, #8]
	float tmpH = hum - tmpInthu1;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	edc7 7a01 	vstr	s15, [r7, #4]
	tmpInthu2 = trunc(tmpH * 100);
 80012ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80012be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001324 <updateAirAQI+0x118>
 80012c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff f955 	bl	8000578 <__aeabi_f2d>
 80012ce:	4603      	mov	r3, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	ec44 3b10 	vmov	d0, r3, r4
 80012d6:	f00c fd5b 	bl	800dd90 <trunc>
 80012da:	ec54 3b10 	vmov	r3, r4, d0
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	f7ff f9a1 	bl	8000628 <__aeabi_d2iz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	603b      	str	r3, [r7, #0]

	sprintf(airAQI,"%d.%d-%d.%d-%d-%d-%d",tmpIntte1,tmpIntte2,tmpInthu1,tmpInthu2,pm2_5, co2_ppm, tvoc_ppb);
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <updateAirAQI+0x120>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <updateAirAQI+0x124>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <updateAirAQI+0x128>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	9103      	str	r1, [sp, #12]
 80012fe:	9202      	str	r2, [sp, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	490a      	ldr	r1, [pc, #40]	; (8001338 <updateAirAQI+0x12c>)
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <updateAirAQI+0x130>)
 8001310:	f00b fbcc 	bl	800caac <siprintf>
}
 8001314:	bf00      	nop
 8001316:	3724      	adds	r7, #36	; 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	20000610 	.word	0x20000610
 8001320:	447a0000 	.word	0x447a0000
 8001324:	42c80000 	.word	0x42c80000
 8001328:	20000614 	.word	0x20000614
 800132c:	20004d9e 	.word	0x20004d9e
 8001330:	2000060e 	.word	0x2000060e
 8001334:	2000060c 	.word	0x2000060c
 8001338:	0800df14 	.word	0x0800df14
 800133c:	20004edc 	.word	0x20004edc

08001340 <updateControlState>:

void updateControlState(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	b090      	sub	sp, #64	; 0x40
 8001344:	af06      	add	r7, sp, #24
	char night[4];
	char filter[7];
	char control[7];
	char uv[4];
	char ion[4];
	if (power == ST_OFF){
 8001346:	4b50      	ldr	r3, [pc, #320]	; (8001488 <updateControlState+0x148>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <updateControlState+0x14>
		sprintf(powerc,"OFF");
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <updateControlState+0x14c>)
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
 8001352:	e008      	b.n	8001366 <updateControlState+0x26>
	}
	else {
		sprintf(powerc,"ON");
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <updateControlState+0x150>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4611      	mov	r1, r2
 800135e:	8019      	strh	r1, [r3, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	0c12      	lsrs	r2, r2, #16
 8001364:	701a      	strb	r2, [r3, #0]
	}
	if (fan_speed == 0){
 8001366:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <updateControlState+0x154>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <updateControlState+0x34>
		sprintf(speedc,"0");
 800136e:	2330      	movs	r3, #48	; 0x30
 8001370:	843b      	strh	r3, [r7, #32]
 8001372:	e00f      	b.n	8001394 <updateControlState+0x54>
		}
	else if (fan_speed == LOW_SPEED) {
 8001374:	4b47      	ldr	r3, [pc, #284]	; (8001494 <updateControlState+0x154>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <updateControlState+0x42>
		sprintf(speedc,"1");
 800137c:	2331      	movs	r3, #49	; 0x31
 800137e:	843b      	strh	r3, [r7, #32]
 8001380:	e008      	b.n	8001394 <updateControlState+0x54>
	}
	else if (fan_speed == MED_SPEED) {
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <updateControlState+0x154>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d102      	bne.n	8001390 <updateControlState+0x50>
		sprintf(speedc,"2");
 800138a:	2332      	movs	r3, #50	; 0x32
 800138c:	843b      	strh	r3, [r7, #32]
 800138e:	e001      	b.n	8001394 <updateControlState+0x54>
	}
	else {
		sprintf(speedc,"3");
 8001390:	2333      	movs	r3, #51	; 0x33
 8001392:	843b      	strh	r3, [r7, #32]
	}
	if (night_mode == ST_OFF){
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <updateControlState+0x158>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <updateControlState+0x62>
		sprintf(night,"off");
 800139c:	4b3f      	ldr	r3, [pc, #252]	; (800149c <updateControlState+0x15c>)
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	e008      	b.n	80013b4 <updateControlState+0x74>
	}
	else {
		sprintf(night,"on");
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <updateControlState+0x160>)
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	4611      	mov	r1, r2
 80013ac:	8019      	strh	r1, [r3, #0]
 80013ae:	3302      	adds	r3, #2
 80013b0:	0c12      	lsrs	r2, r2, #16
 80013b2:	701a      	strb	r2, [r3, #0]
	}

	if (filter_mode == FRESH){
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <updateControlState+0x164>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <updateControlState+0x8e>
		sprintf(filter,"fresh");
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4a39      	ldr	r2, [pc, #228]	; (80014a8 <updateControlState+0x168>)
 80013c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c6:	6018      	str	r0, [r3, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	8019      	strh	r1, [r3, #0]
 80013cc:	e00a      	b.n	80013e4 <updateControlState+0xa4>
	}
	else {
		sprintf(filter,"indoor");
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <updateControlState+0x16c>)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d8:	6018      	str	r0, [r3, #0]
 80013da:	3304      	adds	r3, #4
 80013dc:	8019      	strh	r1, [r3, #0]
 80013de:	3302      	adds	r3, #2
 80013e0:	0c0a      	lsrs	r2, r1, #16
 80013e2:	701a      	strb	r2, [r3, #0]
	}

	if (control_mode == MANUAL){
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <updateControlState+0x170>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <updateControlState+0xc4>
		sprintf(control,"manual");
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <updateControlState+0x174>)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f6:	6018      	str	r0, [r3, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	8019      	strh	r1, [r3, #0]
 80013fc:	3302      	adds	r3, #2
 80013fe:	0c0a      	lsrs	r2, r1, #16
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <updateControlState+0xd4>
	}
	else {
		sprintf(control,"auto");
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <updateControlState+0x178>)
 800140a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140e:	6018      	str	r0, [r3, #0]
 8001410:	3304      	adds	r3, #4
 8001412:	7019      	strb	r1, [r3, #0]
	}

	if (uv_state == ST_OFF){
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <updateControlState+0x17c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <updateControlState+0xe2>
		sprintf(uv,"off");
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <updateControlState+0x15c>)
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	e008      	b.n	8001434 <updateControlState+0xf4>
	}
	else {
		sprintf(uv,"on");
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <updateControlState+0x160>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	8019      	strh	r1, [r3, #0]
 800142e:	3302      	adds	r3, #2
 8001430:	0c12      	lsrs	r2, r2, #16
 8001432:	701a      	strb	r2, [r3, #0]
	}
	if (ion_state == ST_OFF){
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <updateControlState+0x180>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <updateControlState+0x102>
		sprintf(ion,"off");
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <updateControlState+0x15c>)
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e007      	b.n	8001452 <updateControlState+0x112>
	}
	else {
		sprintf(ion,"on");
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <updateControlState+0x160>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4611      	mov	r1, r2
 800144a:	8019      	strh	r1, [r3, #0]
 800144c:	3302      	adds	r3, #2
 800144e:	0c12      	lsrs	r2, r2, #16
 8001450:	701a      	strb	r2, [r3, #0]
	}
	sprintf(controlState,"%s-%s-%s-%s-%s-%s-%s",powerc,speedc,night,filter,control,uv,ion);
 8001452:	f107 0120 	add.w	r1, r7, #32
 8001456:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	9303      	str	r3, [sp, #12]
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	460b      	mov	r3, r1
 8001478:	4912      	ldr	r1, [pc, #72]	; (80014c4 <updateControlState+0x184>)
 800147a:	4813      	ldr	r0, [pc, #76]	; (80014c8 <updateControlState+0x188>)
 800147c:	f00b fb16 	bl	800caac <siprintf>

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000618 	.word	0x20000618
 800148c:	0046464f 	.word	0x0046464f
 8001490:	0800df2c 	.word	0x0800df2c
 8001494:	20000619 	.word	0x20000619
 8001498:	2000061a 	.word	0x2000061a
 800149c:	0066666f 	.word	0x0066666f
 80014a0:	0800df30 	.word	0x0800df30
 80014a4:	2000061b 	.word	0x2000061b
 80014a8:	0800df34 	.word	0x0800df34
 80014ac:	0800df3c 	.word	0x0800df3c
 80014b0:	2000061c 	.word	0x2000061c
 80014b4:	0800df44 	.word	0x0800df44
 80014b8:	0800df4c 	.word	0x0800df4c
 80014bc:	2000061d 	.word	0x2000061d
 80014c0:	2000061e 	.word	0x2000061e
 80014c4:	0800df54 	.word	0x0800df54
 80014c8:	20004e34 	.word	0x20004e34

080014cc <init_MQTT>:

void init_MQTT(void){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
	int ret;
	if(setCmdMode("machine") < 0){
 80014d2:	4840      	ldr	r0, [pc, #256]	; (80015d4 <init_MQTT+0x108>)
 80014d4:	f7ff fb92 	bl	8000bfc <setCmdMode>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da02      	bge.n	80014e4 <init_MQTT+0x18>
		printf("set cmd failed\r\n");
 80014de:	483e      	ldr	r0, [pc, #248]	; (80015d8 <init_MQTT+0x10c>)
 80014e0:	f00b fadc 	bl	800ca9c <puts>
	}

	data.MQTTVersion = 4;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <init_MQTT+0x110>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = MQTT_CLIENT_ID;
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <init_MQTT+0x110>)
 80014ec:	4a3c      	ldr	r2, [pc, #240]	; (80015e0 <init_MQTT+0x114>)
 80014ee:	60da      	str	r2, [r3, #12]
	data.username.cstring = MQTT_USER;
 80014f0:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <init_MQTT+0x110>)
 80014f2:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <init_MQTT+0x118>)
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = MQTT_PASSWORD;
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <init_MQTT+0x110>)
 80014f8:	4a3b      	ldr	r2, [pc, #236]	; (80015e8 <init_MQTT+0x11c>)
 80014fa:	64da      	str	r2, [r3, #76]	; 0x4c
	data.keepAliveInterval = 20;
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <init_MQTT+0x110>)
 80014fe:	2214      	movs	r2, #20
 8001500:	831a      	strh	r2, [r3, #24]
	HAL_Delay(100);
 8001502:	2064      	movs	r0, #100	; 0x64
 8001504:	f004 f9c4 	bl	8005890 <HAL_Delay>
	if(setupNetwork(SSID_WIFI, PASS_WIFI)){
 8001508:	4938      	ldr	r1, [pc, #224]	; (80015ec <init_MQTT+0x120>)
 800150a:	4839      	ldr	r0, [pc, #228]	; (80015f0 <init_MQTT+0x124>)
 800150c:	f7ff fbac 	bl	8000c68 <setupNetwork>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <init_MQTT+0x50>
	  printf("setup network failed\r\n");
 8001516:	4837      	ldr	r0, [pc, #220]	; (80015f4 <init_MQTT+0x128>)
 8001518:	f00b fac0 	bl	800ca9c <puts>
	}
	HAL_Delay(100);
 800151c:	2064      	movs	r0, #100	; 0x64
 800151e:	f004 f9b7 	bl	8005890 <HAL_Delay>
	printf("init network\r\n");
 8001522:	4835      	ldr	r0, [pc, #212]	; (80015f8 <init_MQTT+0x12c>)
 8001524:	f00b faba 	bl	800ca9c <puts>
	if(NetworkInit(&network))
 8001528:	4834      	ldr	r0, [pc, #208]	; (80015fc <init_MQTT+0x130>)
 800152a:	f7ff fc47 	bl	8000dbc <NetworkInit>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <init_MQTT+0x70>
	  printf("init failed\r\n");
 8001534:	4832      	ldr	r0, [pc, #200]	; (8001600 <init_MQTT+0x134>)
 8001536:	f00b fab1 	bl	800ca9c <puts>
 800153a:	e002      	b.n	8001542 <init_MQTT+0x76>
	else
	  printf("network up\r\n");
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <init_MQTT+0x138>)
 800153e:	f00b faad 	bl	800ca9c <puts>
	HAL_Delay(100);
 8001542:	2064      	movs	r0, #100	; 0x64
 8001544:	f004 f9a4 	bl	8005890 <HAL_Delay>
	ret = isTCPPortOpen();
 8001548:	f7ff fd4e 	bl	8000fe8 <isTCPPortOpen>
 800154c:	6078      	str	r0, [r7, #4]
	if(ret >= 0){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db02      	blt.n	800155a <init_MQTT+0x8e>
		closeTCPPort(ret);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fd19 	bl	8000f8c <closeTCPPort>
	}
	HAL_Delay(100);
 800155a:	2064      	movs	r0, #100	; 0x64
 800155c:	f004 f998 	bl	8005890 <HAL_Delay>
	ret = NetworkConnect(&network, MQTT_HOST, MQTT_PORT);
 8001560:	f243 62c6 	movw	r2, #14022	; 0x36c6
 8001564:	4928      	ldr	r1, [pc, #160]	; (8001608 <init_MQTT+0x13c>)
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <init_MQTT+0x130>)
 8001568:	f7ff fc86 	bl	8000e78 <NetworkConnect>
 800156c:	6078      	str	r0, [r7, #4]
	if(ret == FAILURE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d103      	bne.n	800157e <init_MQTT+0xb2>
	{
	  // error, return
	  printf("network connect tcp failed\r\n");
 8001576:	4825      	ldr	r0, [pc, #148]	; (800160c <init_MQTT+0x140>)
 8001578:	f00b fa90 	bl	800ca9c <puts>
	  return ret;
 800157c:	e026      	b.n	80015cc <init_MQTT+0x100>
	}

	printf("network connect tcp success\r\n");
 800157e:	4824      	ldr	r0, [pc, #144]	; (8001610 <init_MQTT+0x144>)
 8001580:	f00b fa8c 	bl	800ca9c <puts>
	HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f004 f983 	bl	8005890 <HAL_Delay>

	MQTTClientInit(&client, &network, 10000, send_buf, sizeof(send_buf), recv_buf, sizeof(recv_buf));
 800158a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <init_MQTT+0x148>)
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <init_MQTT+0x14c>)
 800159c:	f242 7210 	movw	r2, #10000	; 0x2710
 80015a0:	4916      	ldr	r1, [pc, #88]	; (80015fc <init_MQTT+0x130>)
 80015a2:	481e      	ldr	r0, [pc, #120]	; (800161c <init_MQTT+0x150>)
 80015a4:	f002 fd26 	bl	8003ff4 <MQTTClientInit>

	ret = MQTTConnect(&client, &data);
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <init_MQTT+0x110>)
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <init_MQTT+0x150>)
 80015ac:	f003 f876 	bl	800469c <MQTTConnect>
 80015b0:	6078      	str	r0, [r7, #4]
	if(ret != SUCCESS)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <init_MQTT+0xfa>
	{
	  // error, return
	  printf("failed to connect mqtt\r\n");
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <init_MQTT+0x154>)
 80015ba:	f00b fa6f 	bl	800ca9c <puts>
	  NetworkDisconnect(&network);
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <init_MQTT+0x130>)
 80015c0:	f7ff fcb4 	bl	8000f2c <NetworkDisconnect>
	  return ret;
 80015c4:	e002      	b.n	80015cc <init_MQTT+0x100>
	}
	printf("success to connect mqtt\r\n");
 80015c6:	4817      	ldr	r0, [pc, #92]	; (8001624 <init_MQTT+0x158>)
 80015c8:	f00b fa68 	bl	800ca9c <puts>

}
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800df6c 	.word	0x0800df6c
 80015d8:	0800df74 	.word	0x0800df74
 80015dc:	20000008 	.word	0x20000008
 80015e0:	0800df84 	.word	0x0800df84
 80015e4:	0800df8c 	.word	0x0800df8c
 80015e8:	0800df98 	.word	0x0800df98
 80015ec:	0800dfa8 	.word	0x0800dfa8
 80015f0:	0800dfb4 	.word	0x0800dfb4
 80015f4:	0800dfbc 	.word	0x0800dfbc
 80015f8:	0800dfd4 	.word	0x0800dfd4
 80015fc:	20004e24 	.word	0x20004e24
 8001600:	0800dfe4 	.word	0x0800dfe4
 8001604:	0800dff4 	.word	0x0800dff4
 8001608:	0800e000 	.word	0x0800e000
 800160c:	0800e014 	.word	0x0800e014
 8001610:	0800e030 	.word	0x0800e030
 8001614:	200043a8 	.word	0x200043a8
 8001618:	20004f10 	.word	0x20004f10
 800161c:	20000534 	.word	0x20000534
 8001620:	0800e050 	.word	0x0800e050
 8001624:	0800e068 	.word	0x0800e068

08001628 <publish>:

static int publish(void* payload, void* topic)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    MQTTMessage message;
    int rc;
    message.qos = QOS1;
 8001632:	2301      	movs	r3, #1
 8001634:	733b      	strb	r3, [r7, #12]
    message.retained = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	737b      	strb	r3, [r7, #13]
    message.dup = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	73bb      	strb	r3, [r7, #14]
    message.payload = payload;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	617b      	str	r3, [r7, #20]
    message.payloadlen = strlen((char*)payload);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe fdd6 	bl	80001f4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	61bb      	str	r3, [r7, #24]

    rc = MQTTPublish(&client, topic, &message);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	461a      	mov	r2, r3
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <publish+0x40>)
 8001656:	f003 f951 	bl	80048fc <MQTTPublish>
 800165a:	61f8      	str	r0, [r7, #28]
    return rc;
 800165c:	69fb      	ldr	r3, [r7, #28]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000534 	.word	0x20000534

0800166c <receive_handler>:

static void receive_handler(MessageData* rx_msg)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

    char* topic = rx_msg->topicName->lenstring.data;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	60fb      	str	r3, [r7, #12]
    //topic[rx_msg->topicName->lenstring.len] = '\0';
    printf("receive mqtt topic %s\r\n", topic);
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	48ae      	ldr	r0, [pc, #696]	; (8001938 <receive_handler+0x2cc>)
 8001680:	f00b f998 	bl	800c9b4 <iprintf>
    char *message = rx_msg->message->payload;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	60bb      	str	r3, [r7, #8]
	message[rx_msg->message->payloadlen] = '\0';
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4413      	add	r3, r2
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	printf("receive mqtt %s %d\r\n", rx_msg->message->payload, rx_msg->message->payloadlen);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	48a4      	ldr	r0, [pc, #656]	; (800193c <receive_handler+0x2d0>)
 80016aa:	f00b f983 	bl	800c9b4 <iprintf>
    if (!strncmp(topic,TOPIC_DEVICE_ID, strlen(TOPIC_DEVICE_ID))){
 80016ae:	221f      	movs	r2, #31
 80016b0:	49a3      	ldr	r1, [pc, #652]	; (8001940 <receive_handler+0x2d4>)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f00b fa27 	bl	800cb06 <strncmp>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <receive_handler+0x5c>
    	publish(MQTT_MESSAGE, RESPONSE_DEVICE_INFO_TOPIC);
 80016be:	49a1      	ldr	r1, [pc, #644]	; (8001944 <receive_handler+0x2d8>)
 80016c0:	48a1      	ldr	r0, [pc, #644]	; (8001948 <receive_handler+0x2dc>)
 80016c2:	f7ff ffb1 	bl	8001628 <publish>
			ion_state = ST_OFF;
			setIONState(ST_OFF);
			//IonIR = 2;
		}
	}
}
 80016c6:	e1fa      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_AIR_QUALITY, strlen(TOPIC_AIR_QUALITY))){
 80016c8:	221f      	movs	r2, #31
 80016ca:	49a0      	ldr	r1, [pc, #640]	; (800194c <receive_handler+0x2e0>)
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f00b fa1a 	bl	800cb06 <strncmp>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d112      	bne.n	80016fe <receive_handler+0x92>
    	if (!strncmp(rx_msg->message->payload, "get-hethong123", rx_msg->message->payloadlen)){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6898      	ldr	r0, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	461a      	mov	r2, r3
 80016e6:	499a      	ldr	r1, [pc, #616]	; (8001950 <receive_handler+0x2e4>)
 80016e8:	f00b fa0d 	bl	800cb06 <strncmp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 81e5 	bne.w	8001abe <receive_handler+0x452>
    		publish(airAQI, TOPIC_PUB_AIR_QUALITY);
 80016f4:	4997      	ldr	r1, [pc, #604]	; (8001954 <receive_handler+0x2e8>)
 80016f6:	4898      	ldr	r0, [pc, #608]	; (8001958 <receive_handler+0x2ec>)
 80016f8:	f7ff ff96 	bl	8001628 <publish>
}
 80016fc:	e1df      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_CONTROL_STATE, strlen(TOPIC_CONTROL_STATE))){
 80016fe:	2221      	movs	r2, #33	; 0x21
 8001700:	4996      	ldr	r1, [pc, #600]	; (800195c <receive_handler+0x2f0>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f00b f9ff 	bl	800cb06 <strncmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d112      	bne.n	8001734 <receive_handler+0xc8>
		if (!strncmp(rx_msg->message->payload, "get-hethong123", rx_msg->message->payloadlen)){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	498c      	ldr	r1, [pc, #560]	; (8001950 <receive_handler+0x2e4>)
 800171e:	f00b f9f2 	bl	800cb06 <strncmp>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 81ca 	bne.w	8001abe <receive_handler+0x452>
			publish(controlState,TOPIC_PUB_CONTROL_STATE);
 800172a:	498d      	ldr	r1, [pc, #564]	; (8001960 <receive_handler+0x2f4>)
 800172c:	488d      	ldr	r0, [pc, #564]	; (8001964 <receive_handler+0x2f8>)
 800172e:	f7ff ff7b 	bl	8001628 <publish>
}
 8001732:	e1c4      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_POWER_ON, strlen(TOPIC_POWER_ON))){
 8001734:	221c      	movs	r2, #28
 8001736:	498c      	ldr	r1, [pc, #560]	; (8001968 <receive_handler+0x2fc>)
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f00b f9e4 	bl	800cb06 <strncmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d117      	bne.n	8001774 <receive_handler+0x108>
		if (!strncmp(rx_msg->message->payload, "control-hethong123", rx_msg->message->payloadlen)){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	461a      	mov	r2, r3
 8001752:	4986      	ldr	r1, [pc, #536]	; (800196c <receive_handler+0x300>)
 8001754:	f00b f9d7 	bl	800cb06 <strncmp>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 81af 	bne.w	8001abe <receive_handler+0x452>
			power = ST_ON;
 8001760:	4b83      	ldr	r3, [pc, #524]	; (8001970 <receive_handler+0x304>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
			fan_speed = MED_SPEED;
 8001766:	4b83      	ldr	r3, [pc, #524]	; (8001974 <receive_handler+0x308>)
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_run(MED_SPEED);
 800176c:	2002      	movs	r0, #2
 800176e:	f7ff fc81 	bl	8001074 <xiaomi_fan_run>
}
 8001772:	e1a4      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_POWER_OFF, strlen(TOPIC_POWER_OFF))){
 8001774:	221d      	movs	r2, #29
 8001776:	4980      	ldr	r1, [pc, #512]	; (8001978 <receive_handler+0x30c>)
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f00b f9c4 	bl	800cb06 <strncmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d119      	bne.n	80017b8 <receive_handler+0x14c>
		if (!strncmp(rx_msg->message->payload, "control-hethong123", rx_msg->message->payloadlen)){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6898      	ldr	r0, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	461a      	mov	r2, r3
 8001792:	4976      	ldr	r1, [pc, #472]	; (800196c <receive_handler+0x300>)
 8001794:	f00b f9b7 	bl	800cb06 <strncmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 818f 	bne.w	8001abe <receive_handler+0x452>
			power = ST_OFF;
 80017a0:	4b73      	ldr	r3, [pc, #460]	; (8001970 <receive_handler+0x304>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
			fan_speed = ST_OFF;
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <receive_handler+0x308>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
			vanst = 3;
 80017ac:	4b73      	ldr	r3, [pc, #460]	; (800197c <receive_handler+0x310>)
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_stop();
 80017b2:	f7ff fc97 	bl	80010e4 <xiaomi_fan_stop>
}
 80017b6:	e182      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_SPEED_LOW, strlen(TOPIC_SPEED_LOW))){
 80017b8:	2217      	movs	r2, #23
 80017ba:	4971      	ldr	r1, [pc, #452]	; (8001980 <receive_handler+0x314>)
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f00b f9a2 	bl	800cb06 <strncmp>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d114      	bne.n	80017f2 <receive_handler+0x186>
		if (!strncmp(rx_msg->message->payload, "control-hethong123", rx_msg->message->payloadlen)){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6898      	ldr	r0, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4965      	ldr	r1, [pc, #404]	; (800196c <receive_handler+0x300>)
 80017d8:	f00b f995 	bl	800cb06 <strncmp>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 816d 	bne.w	8001abe <receive_handler+0x452>
			fan_speed = LOW_SPEED;
 80017e4:	4b63      	ldr	r3, [pc, #396]	; (8001974 <receive_handler+0x308>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_run(LOW_SPEED);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff fc42 	bl	8001074 <xiaomi_fan_run>
}
 80017f0:	e165      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic, TOPIC_SPEED_MED, strlen(TOPIC_SPEED_MED))){
 80017f2:	2217      	movs	r2, #23
 80017f4:	4963      	ldr	r1, [pc, #396]	; (8001984 <receive_handler+0x318>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f00b f985 	bl	800cb06 <strncmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d114      	bne.n	800182c <receive_handler+0x1c0>
   		if (!strncmp(rx_msg->message->payload, "control-hethong123", rx_msg->message->payloadlen)){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6898      	ldr	r0, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	461a      	mov	r2, r3
 8001810:	4956      	ldr	r1, [pc, #344]	; (800196c <receive_handler+0x300>)
 8001812:	f00b f978 	bl	800cb06 <strncmp>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 8150 	bne.w	8001abe <receive_handler+0x452>
   			fan_speed = MED_SPEED;
 800181e:	4b55      	ldr	r3, [pc, #340]	; (8001974 <receive_handler+0x308>)
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
   			xiaomi_fan_run(MED_SPEED);
 8001824:	2002      	movs	r0, #2
 8001826:	f7ff fc25 	bl	8001074 <xiaomi_fan_run>
}
 800182a:	e148      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic, TOPIC_SPEED_HIGH, strlen(TOPIC_SPEED_HIGH))){
 800182c:	2218      	movs	r2, #24
 800182e:	4956      	ldr	r1, [pc, #344]	; (8001988 <receive_handler+0x31c>)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f00b f968 	bl	800cb06 <strncmp>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d114      	bne.n	8001866 <receive_handler+0x1fa>
		if (!strncmp(rx_msg->message->payload, "control-hethong123", rx_msg->message->payloadlen)){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6898      	ldr	r0, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	4948      	ldr	r1, [pc, #288]	; (800196c <receive_handler+0x300>)
 800184c:	f00b f95b 	bl	800cb06 <strncmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 8133 	bne.w	8001abe <receive_handler+0x452>
			fan_speed = HIGH_SPEED;
 8001858:	4b46      	ldr	r3, [pc, #280]	; (8001974 <receive_handler+0x308>)
 800185a:	2203      	movs	r2, #3
 800185c:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_run(HIGH_SPEED);
 800185e:	2003      	movs	r0, #3
 8001860:	f7ff fc08 	bl	8001074 <xiaomi_fan_run>
}
 8001864:	e12b      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_NIGHT_MODE, strlen(TOPIC_NIGHT_MODE))){
 8001866:	221e      	movs	r2, #30
 8001868:	4948      	ldr	r1, [pc, #288]	; (800198c <receive_handler+0x320>)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f00b f94b 	bl	800cb06 <strncmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12e      	bne.n	80018d4 <receive_handler+0x268>
		if (!strncmp(rx_msg->message->payload, "control-hethong123-on", rx_msg->message->payloadlen)){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	461a      	mov	r2, r3
 8001884:	4942      	ldr	r1, [pc, #264]	; (8001990 <receive_handler+0x324>)
 8001886:	f00b f93e 	bl	800cb06 <strncmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <receive_handler+0x238>
			fan_speed = LOW_SPEED;
 8001890:	4b38      	ldr	r3, [pc, #224]	; (8001974 <receive_handler+0x308>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_run(LOW_SPEED);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fbec 	bl	8001074 <xiaomi_fan_run>
			night_mode = ST_ON;
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <receive_handler+0x328>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	e10c      	b.n	8001abe <receive_handler+0x452>
		else if (!strncmp(rx_msg->message->payload, "control-hethong123-off", rx_msg->message->payloadlen)){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6898      	ldr	r0, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4939      	ldr	r1, [pc, #228]	; (8001998 <receive_handler+0x32c>)
 80018b4:	f00b f927 	bl	800cb06 <strncmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80ff 	bne.w	8001abe <receive_handler+0x452>
			fan_speed = MED_SPEED;
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <receive_handler+0x308>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
			xiaomi_fan_run(MED_SPEED);
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff fbd4 	bl	8001074 <xiaomi_fan_run>
			night_mode = ST_OFF;
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <receive_handler+0x328>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
}
 80018d2:	e0f4      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic,TOPIC_FILTER, strlen(TOPIC_FILTER))){
 80018d4:	221f      	movs	r2, #31
 80018d6:	4931      	ldr	r1, [pc, #196]	; (800199c <receive_handler+0x330>)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f00b f914 	bl	800cb06 <strncmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d163      	bne.n	80019ac <receive_handler+0x340>
		if (!strncmp(rx_msg->message->payload, "control-hethong123-fresh", rx_msg->message->payloadlen)){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6898      	ldr	r0, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	461a      	mov	r2, r3
 80018f2:	492b      	ldr	r1, [pc, #172]	; (80019a0 <receive_handler+0x334>)
 80018f4:	f00b f907 	bl	800cb06 <strncmp>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <receive_handler+0x2a0>
			filter_mode = FRESH;
 80018fe:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <receive_handler+0x338>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
			vanst = DAMPER_OUT;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <receive_handler+0x310>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	e0d8      	b.n	8001abe <receive_handler+0x452>
		else if (!strncmp(rx_msg->message->payload, "control-hethong123-indoor", rx_msg->message->payloadlen)){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6898      	ldr	r0, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	4923      	ldr	r1, [pc, #140]	; (80019a8 <receive_handler+0x33c>)
 800191c:	f00b f8f3 	bl	800cb06 <strncmp>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80cb 	bne.w	8001abe <receive_handler+0x452>
			filter_mode = INDOOR;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <receive_handler+0x338>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
			vanst = DAMPER_IN;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <receive_handler+0x310>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	e0c3      	b.n	8001abe <receive_handler+0x452>
 8001936:	bf00      	nop
 8001938:	0800e084 	.word	0x0800e084
 800193c:	0800e09c 	.word	0x0800e09c
 8001940:	0800e0b4 	.word	0x0800e0b4
 8001944:	0800e0d4 	.word	0x0800e0d4
 8001948:	0800e0f8 	.word	0x0800e0f8
 800194c:	0800e120 	.word	0x0800e120
 8001950:	0800e140 	.word	0x0800e140
 8001954:	0800e150 	.word	0x0800e150
 8001958:	20004edc 	.word	0x20004edc
 800195c:	0800e174 	.word	0x0800e174
 8001960:	0800e198 	.word	0x0800e198
 8001964:	20004e34 	.word	0x20004e34
 8001968:	0800e1bc 	.word	0x0800e1bc
 800196c:	0800e1dc 	.word	0x0800e1dc
 8001970:	20000618 	.word	0x20000618
 8001974:	20000619 	.word	0x20000619
 8001978:	0800e1f0 	.word	0x0800e1f0
 800197c:	2000061f 	.word	0x2000061f
 8001980:	0800e210 	.word	0x0800e210
 8001984:	0800e228 	.word	0x0800e228
 8001988:	0800e240 	.word	0x0800e240
 800198c:	0800e25c 	.word	0x0800e25c
 8001990:	0800e27c 	.word	0x0800e27c
 8001994:	2000061a 	.word	0x2000061a
 8001998:	0800e294 	.word	0x0800e294
 800199c:	0800e2ac 	.word	0x0800e2ac
 80019a0:	0800e2cc 	.word	0x0800e2cc
 80019a4:	2000061b 	.word	0x2000061b
 80019a8:	0800e2e8 	.word	0x0800e2e8
    else if (!strncmp(topic, TOPIC_CONTROL, strlen(TOPIC_CONTROL))){
 80019ac:	2220      	movs	r2, #32
 80019ae:	4946      	ldr	r1, [pc, #280]	; (8001ac8 <receive_handler+0x45c>)
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f00b f8a8 	bl	800cb06 <strncmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d121      	bne.n	8001a00 <receive_handler+0x394>
  		if (!strncmp(rx_msg->message->payload, "control-hethong123-auto", rx_msg->message->payloadlen)){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6898      	ldr	r0, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4940      	ldr	r1, [pc, #256]	; (8001acc <receive_handler+0x460>)
 80019cc:	f00b f89b 	bl	800cb06 <strncmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <receive_handler+0x372>
  			control_mode = AUTOMATIC ;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <receive_handler+0x464>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
}
 80019dc:	e06f      	b.n	8001abe <receive_handler+0x452>
  		else if (!strncmp(rx_msg->message->payload, "control-hethong123-manual", rx_msg->message->payloadlen)){
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6898      	ldr	r0, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4939      	ldr	r1, [pc, #228]	; (8001ad4 <receive_handler+0x468>)
 80019ee:	f00b f88a 	bl	800cb06 <strncmp>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d162      	bne.n	8001abe <receive_handler+0x452>
  			control_mode = MANUAL;
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <receive_handler+0x464>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
}
 80019fe:	e05e      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic, TOPIC_UV, strlen(TOPIC_UV))){
 8001a00:	2216      	movs	r2, #22
 8001a02:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <receive_handler+0x46c>)
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f00b f87e 	bl	800cb06 <strncmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <receive_handler+0x3f4>
   		if (!strncmp(rx_msg->message->payload, "control-hethong123-on", rx_msg->message->payloadlen)){
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6898      	ldr	r0, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	492f      	ldr	r1, [pc, #188]	; (8001adc <receive_handler+0x470>)
 8001a20:	f00b f871 	bl	800cb06 <strncmp>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <receive_handler+0x3cc>
   			uv_state = ST_ON;
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <receive_handler+0x474>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
   			setUVState(ST_ON);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fbbf 	bl	80011b4 <setUVState>
}
 8001a36:	e042      	b.n	8001abe <receive_handler+0x452>
   		else if (!strncmp(rx_msg->message->payload, "control-hethong123-off", rx_msg->message->payloadlen)){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6898      	ldr	r0, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4927      	ldr	r1, [pc, #156]	; (8001ae4 <receive_handler+0x478>)
 8001a48:	f00b f85d 	bl	800cb06 <strncmp>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d135      	bne.n	8001abe <receive_handler+0x452>
   			uv_state = ST_OFF;
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <receive_handler+0x474>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
   			setUVState(ST_OFF);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fbab 	bl	80011b4 <setUVState>
}
 8001a5e:	e02e      	b.n	8001abe <receive_handler+0x452>
    else if (!strncmp(topic, TOPIC_ION, strlen(TOPIC_ION))){
 8001a60:	2217      	movs	r2, #23
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <receive_handler+0x47c>)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f00b f84e 	bl	800cb06 <strncmp>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d126      	bne.n	8001abe <receive_handler+0x452>
		if (!strncmp(rx_msg->message->payload, "control-hethong123-on", rx_msg->message->payloadlen)){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6898      	ldr	r0, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4917      	ldr	r1, [pc, #92]	; (8001adc <receive_handler+0x470>)
 8001a80:	f00b f841 	bl	800cb06 <strncmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <receive_handler+0x42c>
			ion_state = ST_ON;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <receive_handler+0x480>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
			setIONState(ST_ON);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fba5 	bl	80011e0 <setIONState>
}
 8001a96:	e012      	b.n	8001abe <receive_handler+0x452>
		else if (!strncmp(rx_msg->message->payload, "control-hethong123-off", rx_msg->message->payloadlen)){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6898      	ldr	r0, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	490f      	ldr	r1, [pc, #60]	; (8001ae4 <receive_handler+0x478>)
 8001aa8:	f00b f82d 	bl	800cb06 <strncmp>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <receive_handler+0x452>
			ion_state = ST_OFF;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <receive_handler+0x480>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
			setIONState(ST_OFF);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fb91 	bl	80011e0 <setIONState>
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0800e304 	.word	0x0800e304
 8001acc:	0800e328 	.word	0x0800e328
 8001ad0:	2000061c 	.word	0x2000061c
 8001ad4:	0800e340 	.word	0x0800e340
 8001ad8:	0800e35c 	.word	0x0800e35c
 8001adc:	0800e27c 	.word	0x0800e27c
 8001ae0:	2000061d 	.word	0x2000061d
 8001ae4:	0800e294 	.word	0x0800e294
 8001ae8:	0800e374 	.word	0x0800e374
 8001aec:	2000061e 	.word	0x2000061e

08001af0 <subcribesMQTT>:

void subcribesMQTT(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	MQTTSubscribe(&client, MQTT_SUB_TOPIC, QOS0, receive_handler);
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <subcribesMQTT+0x104>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	493f      	ldr	r1, [pc, #252]	; (8001bf8 <subcribesMQTT+0x108>)
 8001afa:	4840      	ldr	r0, [pc, #256]	; (8001bfc <subcribesMQTT+0x10c>)
 8001afc:	f002 fe54 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b00:	2064      	movs	r0, #100	; 0x64
 8001b02:	f003 fec5 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_DEVICE_ID, QOS0, receive_handler);
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	493d      	ldr	r1, [pc, #244]	; (8001c00 <subcribesMQTT+0x110>)
 8001b0c:	483b      	ldr	r0, [pc, #236]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b0e:	f002 fe4b 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f003 febc 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_AIR_QUALITY, QOS0, receive_handler);
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4939      	ldr	r1, [pc, #228]	; (8001c04 <subcribesMQTT+0x114>)
 8001b1e:	4837      	ldr	r0, [pc, #220]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b20:	f002 fe42 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f003 feb3 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_CONTROL_STATE, QOS0, receive_handler);
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4936      	ldr	r1, [pc, #216]	; (8001c08 <subcribesMQTT+0x118>)
 8001b30:	4832      	ldr	r0, [pc, #200]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b32:	f002 fe39 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b36:	2064      	movs	r0, #100	; 0x64
 8001b38:	f003 feaa 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_POWER_ON, QOS0, receive_handler);
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4932      	ldr	r1, [pc, #200]	; (8001c0c <subcribesMQTT+0x11c>)
 8001b42:	482e      	ldr	r0, [pc, #184]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b44:	f002 fe30 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f003 fea1 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_POWER_OFF, QOS0, receive_handler);
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	492f      	ldr	r1, [pc, #188]	; (8001c10 <subcribesMQTT+0x120>)
 8001b54:	4829      	ldr	r0, [pc, #164]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b56:	f002 fe27 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f003 fe98 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_NIGHT_MODE, QOS0, receive_handler);
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	492b      	ldr	r1, [pc, #172]	; (8001c14 <subcribesMQTT+0x124>)
 8001b66:	4825      	ldr	r0, [pc, #148]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b68:	f002 fe1e 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f003 fe8f 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_ION, QOS0, receive_handler);
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	4928      	ldr	r1, [pc, #160]	; (8001c18 <subcribesMQTT+0x128>)
 8001b78:	4820      	ldr	r0, [pc, #128]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b7a:	f002 fe15 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b7e:	2064      	movs	r0, #100	; 0x64
 8001b80:	f003 fe86 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_UV, QOS0, receive_handler);
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <subcribesMQTT+0x12c>)
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b8c:	f002 fe0c 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001b90:	2064      	movs	r0, #100	; 0x64
 8001b92:	f003 fe7d 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_FILTER, QOS0, receive_handler);
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <subcribesMQTT+0x104>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4921      	ldr	r1, [pc, #132]	; (8001c20 <subcribesMQTT+0x130>)
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <subcribesMQTT+0x10c>)
 8001b9e:	f002 fe03 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	f003 fe74 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_CONTROL, QOS0, receive_handler);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <subcribesMQTT+0x104>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	491d      	ldr	r1, [pc, #116]	; (8001c24 <subcribesMQTT+0x134>)
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <subcribesMQTT+0x10c>)
 8001bb0:	f002 fdfa 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001bb4:	2064      	movs	r0, #100	; 0x64
 8001bb6:	f003 fe6b 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_SPEED_LOW, QOS0, receive_handler);
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <subcribesMQTT+0x104>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	491a      	ldr	r1, [pc, #104]	; (8001c28 <subcribesMQTT+0x138>)
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <subcribesMQTT+0x10c>)
 8001bc2:	f002 fdf1 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f003 fe62 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_SPEED_MED, QOS0, receive_handler);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <subcribesMQTT+0x104>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <subcribesMQTT+0x13c>)
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <subcribesMQTT+0x10c>)
 8001bd4:	f002 fde8 	bl	80047a8 <MQTTSubscribe>
	HAL_Delay(100);
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	f003 fe59 	bl	8005890 <HAL_Delay>
	MQTTSubscribe(&client, TOPIC_SPEED_HIGH, QOS0, receive_handler);
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <subcribesMQTT+0x104>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	4913      	ldr	r1, [pc, #76]	; (8001c30 <subcribesMQTT+0x140>)
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <subcribesMQTT+0x10c>)
 8001be6:	f002 fddf 	bl	80047a8 <MQTTSubscribe>
	printf("finish subcribe\r\n");
 8001bea:	4812      	ldr	r0, [pc, #72]	; (8001c34 <subcribesMQTT+0x144>)
 8001bec:	f00a ff56 	bl	800ca9c <puts>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800166d 	.word	0x0800166d
 8001bf8:	0800e38c 	.word	0x0800e38c
 8001bfc:	20000534 	.word	0x20000534
 8001c00:	0800e0b4 	.word	0x0800e0b4
 8001c04:	0800e120 	.word	0x0800e120
 8001c08:	0800e174 	.word	0x0800e174
 8001c0c:	0800e1bc 	.word	0x0800e1bc
 8001c10:	0800e1f0 	.word	0x0800e1f0
 8001c14:	0800e25c 	.word	0x0800e25c
 8001c18:	0800e374 	.word	0x0800e374
 8001c1c:	0800e35c 	.word	0x0800e35c
 8001c20:	0800e2ac 	.word	0x0800e2ac
 8001c24:	0800e304 	.word	0x0800e304
 8001c28:	0800e210 	.word	0x0800e210
 8001c2c:	0800e228 	.word	0x0800e228
 8001c30:	0800e240 	.word	0x0800e240
 8001c34:	0800e394 	.word	0x0800e394

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b09b      	sub	sp, #108	; 0x6c
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3e:	f003 fde5 	bl	800580c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c42:	f000 f8dd 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f000 fc0d 	bl	8002464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c4a:	f000 fbb7 	bl	80023bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c4e:	f000 f941 	bl	8001ed4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c52:	f000 f96d 	bl	8001f30 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001c56:	f000 f999 	bl	8001f8c <MX_SPI2_Init>
  MX_SPI3_Init();
 8001c5a:	f000 f9cd 	bl	8001ff8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001c5e:	f000 fa01 	bl	8002064 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c62:	f000 fa9d 	bl	80021a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c66:	f000 fb0f 	bl	8002288 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001c6a:	f000 fb7d 	bl	8002368 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c6e:	f000 fbcf 	bl	8002410 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //Slow down after init
  HAL_Delay(100);
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	f003 fe0c 	bl	8005890 <HAL_Delay>

  night_mode = ST_OFF;
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <main+0x17c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
  fan_speed = LOW_SPEED;
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <main+0x180>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
  power = ST_ON;
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <main+0x184>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
  control_mode = AUTOMATIC;
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <main+0x188>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  filter_mode = FRESH;
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <main+0x18c>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
  uv_state = ST_ON;
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <main+0x190>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
  ion_state = ST_OFF;
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <main+0x194>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
  i2c_init_sensirion(&hi2c2);
 8001ca2:	484b      	ldr	r0, [pc, #300]	; (8001dd0 <main+0x198>)
 8001ca4:	f000 ff58 	bl	8002b58 <i2c_init_sensirion>
  xiaomi_fan_run(LOW_SPEED);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff f9e3 	bl	8001074 <xiaomi_fan_run>
  /* Init MQTT */
	init_MQTT();
 8001cae:	f7ff fc0d 	bl	80014cc <init_MQTT>
	subcribesMQTT();
 8001cb2:	f7ff ff1d 	bl	8001af0 <subcribesMQTT>
  /* Init SVM */
  now = HAL_GetTick();
 8001cb6:	f003 fddf 	bl	8005878 <HAL_GetTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f04f 0400 	mov.w	r4, #0
 8001cc0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  end = now + TIMEOUT_SVM;
 8001cc4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001cc8:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	185d      	adds	r5, r3, r1
 8001cd2:	eb44 0602 	adc.w	r6, r4, r2
 8001cd6:	e9c7 5616 	strd	r5, r6, [r7, #88]	; 0x58
  while (svm_probe() != STATUS_OK) {
 8001cda:	e011      	b.n	8001d00 <main+0xc8>
      printf("SVM30 module probing failed\r\n");
 8001cdc:	483d      	ldr	r0, [pc, #244]	; (8001dd4 <main+0x19c>)
 8001cde:	f00a fedd 	bl	800ca9c <puts>
      now = HAL_GetTick();
 8001ce2:	f003 fdc9 	bl	8005878 <HAL_GetTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f04f 0400 	mov.w	r4, #0
 8001cec:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      if(end < now)   // Timeout
 8001cf0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001cf4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	bf08      	it	eq
 8001cfc:	4299      	cmpeq	r1, r3
 8001cfe:	d305      	bcc.n	8001d0c <main+0xd4>
  while (svm_probe() != STATUS_OK) {
 8001d00:	f002 f838 	bl	8003d74 <svm_probe>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e8      	bne.n	8001cdc <main+0xa4>
 8001d0a:	e000      	b.n	8001d0e <main+0xd6>
      {
    	  break;
 8001d0c:	bf00      	nop
      }
  }
  if(now < end){
 8001d0e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8001d12:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001d16:	42a2      	cmp	r2, r4
 8001d18:	bf08      	it	eq
 8001d1a:	4299      	cmpeq	r1, r3
 8001d1c:	d203      	bcs.n	8001d26 <main+0xee>
	  printf("SVM30 module probing successful\r\n");
 8001d1e:	482e      	ldr	r0, [pc, #184]	; (8001dd8 <main+0x1a0>)
 8001d20:	f00a febc 	bl	800ca9c <puts>
 8001d24:	e002      	b.n	8001d2c <main+0xf4>
  }else
	  printf("timeout to probe svm30\r\n");
 8001d26:	482d      	ldr	r0, [pc, #180]	; (8001ddc <main+0x1a4>)
 8001d28:	f00a feb8 	bl	800ca9c <puts>

  err = sgp30_iaq_init();
 8001d2c:	f001 f85d 	bl	8002dea <sgp30_iaq_init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	657b      	str	r3, [r7, #84]	; 0x54


  HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8001d34:	2201      	movs	r2, #1
 8001d36:	492a      	ldr	r1, [pc, #168]	; (8001de0 <main+0x1a8>)
 8001d38:	482a      	ldr	r0, [pc, #168]	; (8001de4 <main+0x1ac>)
 8001d3a:	f008 fc7d 	bl	800a638 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of updateTask */
  osThreadDef(updateTask, StartUpdateTask, osPriorityNormal, 0, 512);
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <main+0x1b0>)
 8001d40:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d44:	461d      	mov	r5, r3
 8001d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updateTaskHandle = osThreadCreate(osThread(updateTask), NULL);
 8001d52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 fb4e 	bl	800b3fa <osThreadCreate>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <main+0x1b4>)
 8001d62:	601a      	str	r2, [r3, #0]

  /* definition and creation of IRListeningTask */
  osThreadDef(IRListeningTask, StartIR_Task, osPriorityNormal, 0, 128);
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <main+0x1b8>)
 8001d66:	f107 041c 	add.w	r4, r7, #28
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IRListeningTaskHandle = osThreadCreate(osThread(IRListeningTask), NULL);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fb3b 	bl	800b3fa <osThreadCreate>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <main+0x1bc>)
 8001d88:	601a      	str	r2, [r3, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <main+0x1c0>)
 8001d8c:	463c      	mov	r4, r7
 8001d8e:	461d      	mov	r5, r3
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f009 fb2a 	bl	800b3fa <osThreadCreate>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <main+0x1c4>)
 8001daa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001dac:	f009 fb1e 	bl	800b3ec <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <main+0x178>
 8001db2:	bf00      	nop
 8001db4:	2000061a 	.word	0x2000061a
 8001db8:	20000619 	.word	0x20000619
 8001dbc:	20000618 	.word	0x20000618
 8001dc0:	2000061c 	.word	0x2000061c
 8001dc4:	2000061b 	.word	0x2000061b
 8001dc8:	2000061d 	.word	0x2000061d
 8001dcc:	2000061e 	.word	0x2000061e
 8001dd0:	20004c58 	.word	0x20004c58
 8001dd4:	0800e3a8 	.word	0x0800e3a8
 8001dd8:	0800e3c8 	.word	0x0800e3c8
 8001ddc:	0800e3ec 	.word	0x0800e3ec
 8001de0:	20004cb0 	.word	0x20004cb0
 8001de4:	20004e9c 	.word	0x20004e9c
 8001de8:	0800e410 	.word	0x0800e410
 8001dec:	20004d4c 	.word	0x20004d4c
 8001df0:	0800e43c 	.word	0x0800e43c
 8001df4:	20004de0 	.word	0x20004de0
 8001df8:	0800e464 	.word	0x0800e464
 8001dfc:	20004cac 	.word	0x20004cac

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	; 0x50
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	2230      	movs	r2, #48	; 0x30
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00a fdc7 	bl	800c9a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e64:	2310      	movs	r3, #16
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e70:	2310      	movs	r3, #16
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	4618      	mov	r0, r3
 8001e88:	f006 fbe8 	bl	800865c <HAL_RCC_OscConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e92:	f000 fc8f 	bl	80027b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e96:	230f      	movs	r3, #15
 8001e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001ea2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001ea8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 fe41 	bl	8008b3c <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ec0:	f000 fc78 	bl	80027b4 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3750      	adds	r7, #80	; 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C1_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f12:	f004 f807 	bl	8005f24 <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 fc4a 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20004c04 	.word	0x20004c04
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <MX_I2C2_Init+0x54>)
 8001f38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 90000;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_I2C2_Init+0x58>)
 8001f3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_I2C2_Init+0x50>)
 8001f6e:	f003 ffd9 	bl	8005f24 <HAL_I2C_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f78:	f000 fc1c 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20004c58 	.word	0x20004c58
 8001f84:	40005800 	.word	0x40005800
 8001f88:	00015f90 	.word	0x00015f90

08001f8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <MX_SPI2_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fde:	f006 ffab 	bl	8008f38 <HAL_SPI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f000 fbe4 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20004ba8 	.word	0x20004ba8
 8001ff4:	40003800 	.word	0x40003800

08001ff8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_SPI3_Init+0x64>)
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <MX_SPI3_Init+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI3_Init+0x64>)
 8002004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002008:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI3_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_SPI3_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI3_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI3_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI3_Init+0x64>)
 8002024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002028:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI3_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <MX_SPI3_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI3_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <MX_SPI3_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI3_Init+0x64>)
 8002044:	220a      	movs	r2, #10
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_SPI3_Init+0x64>)
 800204a:	f006 ff75 	bl	8008f38 <HAL_SPI_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002054:	f000 fbae 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20004cf4 	.word	0x20004cf4
 8002060:	40003c00 	.word	0x40003c00

08002064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b096      	sub	sp, #88	; 0x58
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2220      	movs	r2, #32
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00a fc80 	bl	800c9a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <MX_TIM1_Init+0x134>)
 80020a4:	4a3d      	ldr	r2, [pc, #244]	; (800219c <MX_TIM1_Init+0x138>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <MX_TIM1_Init+0x134>)
 80020aa:	2214      	movs	r2, #20
 80020ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <MX_TIM1_Init+0x134>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <MX_TIM1_Init+0x134>)
 80020b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80020ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <MX_TIM1_Init+0x134>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <MX_TIM1_Init+0x134>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <MX_TIM1_Init+0x134>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020ce:	4832      	ldr	r0, [pc, #200]	; (8002198 <MX_TIM1_Init+0x134>)
 80020d0:	f006 ff96 	bl	8009000 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020da:	f000 fb6b 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e8:	4619      	mov	r1, r3
 80020ea:	482b      	ldr	r0, [pc, #172]	; (8002198 <MX_TIM1_Init+0x134>)
 80020ec:	f007 fb84 	bl	80097f8 <HAL_TIM_ConfigClockSource>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020f6:	f000 fb5d 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020fa:	4827      	ldr	r0, [pc, #156]	; (8002198 <MX_TIM1_Init+0x134>)
 80020fc:	f006 ffcf 	bl	800909e <HAL_TIM_PWM_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002106:	f000 fb55 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002112:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002116:	4619      	mov	r1, r3
 8002118:	481f      	ldr	r0, [pc, #124]	; (8002198 <MX_TIM1_Init+0x134>)
 800211a:	f008 f82d 	bl	800a178 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002124:	f000 fb46 	bl	80027b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002128:	2360      	movs	r3, #96	; 0x60
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	220c      	movs	r2, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4813      	ldr	r0, [pc, #76]	; (8002198 <MX_TIM1_Init+0x134>)
 800214a:	f007 fa8f 	bl	800966c <HAL_TIM_PWM_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002154:	f000 fb2e 	bl	80027b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002170:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <MX_TIM1_Init+0x134>)
 800217c:	f008 f86a 	bl	800a254 <HAL_TIMEx_ConfigBreakDeadTime>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002186:	f000 fb15 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <MX_TIM1_Init+0x134>)
 800218c:	f001 fb4a 	bl	8003824 <HAL_TIM_MspPostInit>

}
 8002190:	bf00      	nop
 8002192:	3758      	adds	r7, #88	; 0x58
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20004da0 	.word	0x20004da0
 800219c:	40010000 	.word	0x40010000

080021a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021f6:	4823      	ldr	r0, [pc, #140]	; (8002284 <MX_TIM2_Init+0xe4>)
 80021f8:	f006 ff02 	bl	8009000 <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002202:	f000 fad7 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002210:	4619      	mov	r1, r3
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <MX_TIM2_Init+0xe4>)
 8002214:	f007 faf0 	bl	80097f8 <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800221e:	f000 fac9 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <MX_TIM2_Init+0xe4>)
 8002224:	f006 ff3b 	bl	800909e <HAL_TIM_PWM_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800222e:	f000 fac1 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	4619      	mov	r1, r3
 8002240:	4810      	ldr	r0, [pc, #64]	; (8002284 <MX_TIM2_Init+0xe4>)
 8002242:	f007 ff99 	bl	800a178 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800224c:	f000 fab2 	bl	80027b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002250:	2360      	movs	r3, #96	; 0x60
 8002252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2204      	movs	r2, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM2_Init+0xe4>)
 8002268:	f007 fa00 	bl	800966c <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002272:	f000 fa9f 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM2_Init+0xe4>)
 8002278:	f001 fad4 	bl	8003824 <HAL_TIM_MspPostInit>

}
 800227c:	bf00      	nop
 800227e:	3738      	adds	r7, #56	; 0x38
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20004e5c 	.word	0x20004e5c

08002288 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0318 	add.w	r3, r7, #24
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <MX_TIM5_Init+0xdc>)
 80022b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20;
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022ba:	2214      	movs	r2, #20
 80022bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80022ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022d8:	4821      	ldr	r0, [pc, #132]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022da:	f006 fe91 	bl	8009000 <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80022e4:	f000 fa66 	bl	80027b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022ee:	f107 0318 	add.w	r3, r7, #24
 80022f2:	4619      	mov	r1, r3
 80022f4:	481a      	ldr	r0, [pc, #104]	; (8002360 <MX_TIM5_Init+0xd8>)
 80022f6:	f007 fa7f 	bl	80097f8 <HAL_TIM_ConfigClockSource>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002300:	f000 fa58 	bl	80027b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002304:	4816      	ldr	r0, [pc, #88]	; (8002360 <MX_TIM5_Init+0xd8>)
 8002306:	f006 feff 	bl	8009108 <HAL_TIM_IC_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002310:	f000 fa50 	bl	80027b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	480f      	ldr	r0, [pc, #60]	; (8002360 <MX_TIM5_Init+0xd8>)
 8002324:	f007 ff28 	bl	800a178 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800232e:	f000 fa41 	bl	80027b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002336:	2301      	movs	r3, #1
 8002338:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_TIM5_Init+0xd8>)
 800234a:	f007 f8f3 	bl	8009534 <HAL_TIM_IC_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002354:	f000 fa2e 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20004cb4 	.word	0x20004cb4
 8002364:	40000c00 	.word	0x40000c00

08002368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_USART1_UART_Init+0x50>)
 8002370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 80023a0:	f007 ffbe 	bl	800a320 <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023aa:	f000 fa03 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20004d5c 	.word	0x20004d5c
 80023b8:	40011000 	.word	0x40011000

080023bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <MX_USART2_UART_Init+0x50>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_USART2_UART_Init+0x4c>)
 80023f4:	f007 ff94 	bl	800a320 <HAL_UART_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023fe:	f000 f9d9 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20004e9c 	.word	0x20004e9c
 800240c:	40004400 	.word	0x40004400

08002410 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <MX_USART6_UART_Init+0x50>)
 8002418:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_USART6_UART_Init+0x4c>)
 800241c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002420:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_USART6_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_USART6_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_USART6_UART_Init+0x4c>)
 8002448:	f007 ff6a 	bl	800a320 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002452:	f000 f9af 	bl	80027b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20004de4 	.word	0x20004de4
 8002460:	40011400 	.word	0x40011400

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <MX_GPIO_Init+0x134>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a45      	ldr	r2, [pc, #276]	; (8002598 <MX_GPIO_Init+0x134>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <MX_GPIO_Init+0x134>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <MX_GPIO_Init+0x134>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <MX_GPIO_Init+0x134>)
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <MX_GPIO_Init+0x134>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <MX_GPIO_Init+0x134>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a37      	ldr	r2, [pc, #220]	; (8002598 <MX_GPIO_Init+0x134>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b35      	ldr	r3, [pc, #212]	; (8002598 <MX_GPIO_Init+0x134>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <MX_GPIO_Init+0x134>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a30      	ldr	r2, [pc, #192]	; (8002598 <MX_GPIO_Init+0x134>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <MX_GPIO_Init+0x134>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_Pin|ION_Pin|DAMPER_IN_2_Pin|DAMPER_IN_3_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2133      	movs	r1, #51	; 0x33
 80024ee:	482b      	ldr	r0, [pc, #172]	; (800259c <MX_GPIO_Init+0x138>)
 80024f0:	f003 fcfe 	bl	8005ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAMPER_OUT_0_Pin|DAMPER_OUT_1_Pin|DAMPER_OUT_2_Pin|DAMPER_OUT_3_Pin, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	21f0      	movs	r1, #240	; 0xf0
 80024f8:	4829      	ldr	r0, [pc, #164]	; (80025a0 <MX_GPIO_Init+0x13c>)
 80024fa:	f003 fcf9 	bl	8005ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DAMPER_IN_0_Pin|DAMPER_IN_1_Pin, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	2103      	movs	r1, #3
 8002502:	4828      	ldr	r0, [pc, #160]	; (80025a4 <MX_GPIO_Init+0x140>)
 8002504:	f003 fcf4 	bl	8005ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <MX_GPIO_Init+0x144>)
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	481f      	ldr	r0, [pc, #124]	; (800259c <MX_GPIO_Init+0x138>)
 800251e:	f003 fb65 	bl	8005bec <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_Pin ION_Pin DAMPER_IN_2_Pin DAMPER_IN_3_Pin */
  GPIO_InitStruct.Pin = UV_Pin|ION_Pin|DAMPER_IN_2_Pin|DAMPER_IN_3_Pin;
 8002522:	2333      	movs	r3, #51	; 0x33
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4818      	ldr	r0, [pc, #96]	; (800259c <MX_GPIO_Init+0x138>)
 800253a:	f003 fb57 	bl	8005bec <HAL_GPIO_Init>

  /*Configure GPIO pins : DAMPER_OUT_0_Pin DAMPER_OUT_1_Pin DAMPER_OUT_2_Pin DAMPER_OUT_3_Pin */
  GPIO_InitStruct.Pin = DAMPER_OUT_0_Pin|DAMPER_OUT_1_Pin|DAMPER_OUT_2_Pin|DAMPER_OUT_3_Pin;
 800253e:	23f0      	movs	r3, #240	; 0xf0
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	4812      	ldr	r0, [pc, #72]	; (80025a0 <MX_GPIO_Init+0x13c>)
 8002556:	f003 fb49 	bl	8005bec <HAL_GPIO_Init>

  /*Configure GPIO pins : DAMPER_IN_0_Pin DAMPER_IN_1_Pin */
  GPIO_InitStruct.Pin = DAMPER_IN_0_Pin|DAMPER_IN_1_Pin;
 800255a:	2303      	movs	r3, #3
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MX_GPIO_Init+0x140>)
 8002572:	f003 fb3b 	bl	8005bec <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RECEIVE_PIN_Pin */
  GPIO_InitStruct.Pin = IR_RECEIVE_PIN_Pin;
 8002576:	2304      	movs	r3, #4
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_RECEIVE_PIN_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_GPIO_Init+0x140>)
 800258a:	f003 fb2f 	bl	8005bec <HAL_GPIO_Init>

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	10210000 	.word	0x10210000

080025ac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	uint32_t value;
	if (htim->Instance==TIM5)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_TIM_IC_CaptureCallback+0x80>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d132      	bne.n	8002624 <HAL_TIM_IC_CaptureCallback+0x78>
	{
		fan_flag++;
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x84>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x84>)
 80025c8:	701a      	strb	r2, [r3, #0]
		if(fan_flag==1)
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x84>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d103      	bne.n	80025da <HAL_TIM_IC_CaptureCallback+0x2e>
		{
//			value1 = __HAL_TIM_GetCounter(&htim2);    //read TIM2 channel 1 capture value
			__HAL_TIM_SetCounter(&htim5, 0);    //reset counter after input capture interrupt occurs
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x88>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(fan_flag==2)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x84>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d120      	bne.n	8002624 <HAL_TIM_IC_CaptureCallback+0x78>
		{
			fan_flag = 0;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x84>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
			value = __HAL_TIM_GetCounter(&htim5);    //read TIM2 channel 1 capture value
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x88>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCounter(&htim5, 0);    //reset counter after input capture interrupt occurs
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x88>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
			cap_speed = (1000000/value)*60/15;
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	461a      	mov	r2, r3
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_TIM_IC_CaptureCallback+0x90>)
 800260c:	fba3 2302 	umull	r2, r3, r3, r2
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002614:	6013      	str	r3, [r2, #0]
			cap_speed_available = 1;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 800261c:	2100      	movs	r1, #0
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002620:	f006 fe10 	bl	8009244 <HAL_TIM_IC_Stop_IT>
		}
	}
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40000c00 	.word	0x40000c00
 8002630:	20000622 	.word	0x20000622
 8002634:	20004cb4 	.word	0x20004cb4
 8002638:	000f4240 	.word	0x000f4240
 800263c:	88888889 	.word	0x88888889
 8002640:	20004c00 	.word	0x20004c00
 8002644:	20000621 	.word	0x20000621

08002648 <StartUpdateTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartUpdateTask */
void StartUpdateTask(void const * argument)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  getSVM30(&sensorSVM30data);
 8002650:	4838      	ldr	r0, [pc, #224]	; (8002734 <StartUpdateTask+0xec>)
 8002652:	f000 fa91 	bl	8002b78 <getSVM30>
	  tvoc_ppb = sensorSVM30data.tvoc_ppb;
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <StartUpdateTask+0xec>)
 8002658:	891a      	ldrh	r2, [r3, #8]
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <StartUpdateTask+0xf0>)
 800265c:	801a      	strh	r2, [r3, #0]
	  co2_ppm  = sensorSVM30data.co2_eq_ppm;
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <StartUpdateTask+0xec>)
 8002660:	895a      	ldrh	r2, [r3, #10]
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <StartUpdateTask+0xf4>)
 8002664:	801a      	strh	r2, [r3, #0]
	  temperature = sensorSVM30data.temperature;
 8002666:	4b33      	ldr	r3, [pc, #204]	; (8002734 <StartUpdateTask+0xec>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a35      	ldr	r2, [pc, #212]	; (8002740 <StartUpdateTask+0xf8>)
 800266c:	6013      	str	r3, [r2, #0]
	  humidity = sensorSVM30data.humidity;
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <StartUpdateTask+0xec>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <StartUpdateTask+0xfc>)
 8002674:	6013      	str	r3, [r2, #0]

	  //pm2_5 = amphenol.PM2p5_Standard;
	  updateAirAQI();
 8002676:	f7fe fdc9 	bl	800120c <updateAirAQI>
	  updateControlState();
 800267a:	f7fe fe61 	bl	8001340 <updateControlState>

	  if((vanst == DAMPER_OUT) && (vanst != preVanst)){
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <StartUpdateTask+0x100>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d117      	bne.n	80026b6 <StartUpdateTask+0x6e>
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <StartUpdateTask+0x100>)
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <StartUpdateTask+0x104>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d011      	beq.n	80026b6 <StartUpdateTask+0x6e>
		  directionOfRotation(DAMPER_OUT, true, 220);
 8002692:	22dc      	movs	r2, #220	; 0xdc
 8002694:	2101      	movs	r1, #1
 8002696:	2001      	movs	r0, #1
 8002698:	f000 fd78 	bl	800318c <directionOfRotation>
		  directionOfRotation(DAMPER_IN, false, 220);
 800269c:	22dc      	movs	r2, #220	; 0xdc
 800269e:	2100      	movs	r1, #0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 fd73 	bl	800318c <directionOfRotation>
		  preVanst = vanst;
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <StartUpdateTask+0x100>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <StartUpdateTask+0x104>)
 80026ac:	701a      	strb	r2, [r3, #0]
		  printf("change vanst to damper out\r\n");
 80026ae:	4828      	ldr	r0, [pc, #160]	; (8002750 <StartUpdateTask+0x108>)
 80026b0:	f00a f9f4 	bl	800ca9c <puts>
 80026b4:	e032      	b.n	800271c <StartUpdateTask+0xd4>
	  }else if((vanst == DAMPER_IN) && (vanst != preVanst)){
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <StartUpdateTask+0x100>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d117      	bne.n	80026ee <StartUpdateTask+0xa6>
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <StartUpdateTask+0x100>)
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	4b22      	ldr	r3, [pc, #136]	; (800274c <StartUpdateTask+0x104>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d011      	beq.n	80026ee <StartUpdateTask+0xa6>
		  directionOfRotation(DAMPER_IN, true, 220);
 80026ca:	22dc      	movs	r2, #220	; 0xdc
 80026cc:	2101      	movs	r1, #1
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 fd5c 	bl	800318c <directionOfRotation>
		  directionOfRotation(DAMPER_OUT, false, 220);
 80026d4:	22dc      	movs	r2, #220	; 0xdc
 80026d6:	2100      	movs	r1, #0
 80026d8:	2001      	movs	r0, #1
 80026da:	f000 fd57 	bl	800318c <directionOfRotation>
		  preVanst = vanst;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <StartUpdateTask+0x100>)
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <StartUpdateTask+0x104>)
 80026e4:	701a      	strb	r2, [r3, #0]
		  printf("change vanst to damper in\r\n");
 80026e6:	481b      	ldr	r0, [pc, #108]	; (8002754 <StartUpdateTask+0x10c>)
 80026e8:	f00a f9d8 	bl	800ca9c <puts>
 80026ec:	e016      	b.n	800271c <StartUpdateTask+0xd4>
	  }else if(vanst != preVanst) {
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <StartUpdateTask+0x100>)
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <StartUpdateTask+0x104>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d010      	beq.n	800271c <StartUpdateTask+0xd4>
		  directionOfRotation(DAMPER_IN, false, 220);
 80026fa:	22dc      	movs	r2, #220	; 0xdc
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f000 fd44 	bl	800318c <directionOfRotation>
		  directionOfRotation(DAMPER_OUT, false, 220);
 8002704:	22dc      	movs	r2, #220	; 0xdc
 8002706:	2100      	movs	r1, #0
 8002708:	2001      	movs	r0, #1
 800270a:	f000 fd3f 	bl	800318c <directionOfRotation>
		  preVanst = vanst;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <StartUpdateTask+0x100>)
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <StartUpdateTask+0x104>)
 8002714:	701a      	strb	r2, [r3, #0]
		  printf("close vanst\r\n");
 8002716:	4810      	ldr	r0, [pc, #64]	; (8002758 <StartUpdateTask+0x110>)
 8002718:	f00a f9c0 	bl	800ca9c <puts>
	  }
	  printf("Update task\r\n");
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <StartUpdateTask+0x114>)
 800271e:	f00a f9bd 	bl	800ca9c <puts>
	  MQTTYield(&client, 500);
 8002722:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <StartUpdateTask+0x118>)
 8002728:	f001 ff6a 	bl	8004600 <MQTTYield>
	  osDelay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f008 feb0 	bl	800b492 <osDelay>
	  getSVM30(&sensorSVM30data);
 8002732:	e78d      	b.n	8002650 <StartUpdateTask+0x8>
 8002734:	20004d50 	.word	0x20004d50
 8002738:	2000060c 	.word	0x2000060c
 800273c:	2000060e 	.word	0x2000060e
 8002740:	20000610 	.word	0x20000610
 8002744:	20000614 	.word	0x20000614
 8002748:	2000061f 	.word	0x2000061f
 800274c:	20000620 	.word	0x20000620
 8002750:	0800e480 	.word	0x0800e480
 8002754:	0800e49c 	.word	0x0800e49c
 8002758:	0800e4b8 	.word	0x0800e4b8
 800275c:	0800e4c8 	.word	0x0800e4c8
 8002760:	20000534 	.word	0x20000534

08002764 <StartIR_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIR_Task */
void StartIR_Task(void const * argument)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIR_Task */
	int i;
  /* Infinite loop */
  for(;;)
  {
	  i++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
	  osDelay(100);
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f008 fe8d 	bl	800b492 <osDelay>
	  i++;
 8002778:	e7f8      	b.n	800276c <StartIR_Task+0x8>

0800277a <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	int i;
  /* Infinite loop */
  for(;;)
  {
	  i++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
	  osDelay(100);
 8002788:	2064      	movs	r0, #100	; 0x64
 800278a:	f008 fe82 	bl	800b492 <osDelay>
	  i++;
 800278e:	e7f8      	b.n	8002782 <StartDisplayTask+0x8>

08002790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027a2:	f003 f855 	bl	8005850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40000800 	.word	0x40000800

080027b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint8_t sensirion_common_generate_crc(uint8_t *data, uint16_t count) {
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80027ce:	23ff      	movs	r3, #255	; 0xff
 80027d0:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	81fb      	strh	r3, [r7, #14]
 80027d6:	e021      	b.n	800281c <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	4053      	eors	r3, r2
 80027e4:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80027e6:	2308      	movs	r3, #8
 80027e8:	733b      	strb	r3, [r7, #12]
 80027ea:	e011      	b.n	8002810 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80027ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da07      	bge.n	8002804 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	737b      	strb	r3, [r7, #13]
 8002802:	e002      	b.n	800280a <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800280a:	7b3b      	ldrb	r3, [r7, #12]
 800280c:	3b01      	subs	r3, #1
 800280e:	733b      	strb	r3, [r7, #12]
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ea      	bne.n	80027ec <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002816:	89fb      	ldrh	r3, [r7, #14]
 8002818:	3301      	adds	r3, #1
 800281a:	81fb      	strh	r3, [r7, #14]
 800281c:	89fa      	ldrh	r2, [r7, #14]
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3d9      	bcc.n	80027d8 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8002824:	7b7b      	ldrb	r3, [r7, #13]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(uint8_t *data, uint16_t count,
                                  uint8_t checksum) {
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	807b      	strh	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffbb 	bl	80027c2 <sensirion_common_generate_crc>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	4293      	cmp	r3, r2
 8002854:	d002      	beq.n	800285c <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e000      	b.n	800285e <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	461a      	mov	r2, r3
 8002872:	460b      	mov	r3, r1
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	4613      	mov	r3, r2
 8002878:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	b29a      	uxth	r2, r3
 8002884:	8abb      	ldrh	r3, [r7, #20]
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	82b9      	strh	r1, [r7, #20]
 800288a:	4619      	mov	r1, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	440b      	add	r3, r1
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8002894:	8abb      	ldrh	r3, [r7, #20]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	82ba      	strh	r2, [r7, #20]
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	897a      	ldrh	r2, [r7, #10]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
 80028aa:	e030      	b.n	800290e <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	8abb      	ldrh	r3, [r7, #20]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	82b9      	strh	r1, [r7, #20]
 80028c0:	4619      	mov	r1, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	440b      	add	r3, r1
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	8abb      	ldrh	r3, [r7, #20]
 80028d6:	1c59      	adds	r1, r3, #1
 80028d8:	82b9      	strh	r1, [r7, #20]
 80028da:	4619      	mov	r1, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	440b      	add	r3, r1
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t *)&buf[idx - 2],
 80028e4:	8abb      	ldrh	r3, [r7, #20]
 80028e6:	3b02      	subs	r3, #2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff67 	bl	80027c2 <sensirion_common_generate_crc>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 80028f8:	8abb      	ldrh	r3, [r7, #20]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	82ba      	strh	r2, [r7, #20]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	7cfa      	ldrb	r2, [r7, #19]
 8002906:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	3301      	adds	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
 800290e:	7dfa      	ldrb	r2, [r7, #23]
 8002910:	7a7b      	ldrb	r3, [r7, #9]
 8002912:	429a      	cmp	r2, r3
 8002914:	d3ca      	bcc.n	80028ac <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8002916:	8abb      	ldrh	r3, [r7, #20]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t *data,
                                          uint16_t num_words) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b096      	sub	sp, #88	; 0x58
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
 800292c:	4613      	mov	r3, r2
 800292e:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8002930:	88bb      	ldrh	r3, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	0052      	lsls	r2, r2, #1
 8002936:	4413      	add	r3, r2
 8002938:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t *const buf8 = (uint8_t *)word_buf;
 800293c:	f107 0308 	add.w	r3, r7, #8
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8002942:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f92c 	bl	8002ba8 <sensirion_i2c_read>
 8002950:	4603      	mov	r3, r0
 8002952:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != STATUS_OK)
 8002956:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 800295e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002962:	e047      	b.n	80029f4 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002964:	2300      	movs	r3, #0
 8002966:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800296a:	2300      	movs	r3, #0
 800296c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8002970:	e039      	b.n	80029e6 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8002972:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002978:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800297a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800297e:	3302      	adds	r3, #2
 8002980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002982:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	2102      	movs	r1, #2
 800298a:	f7ff ff52 	bl	8002832 <sensirion_common_check_crc>
 800298e:	4603      	mov	r3, r0
 8002990:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != STATUS_OK)
 8002994:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 800299c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80029a0:	e028      	b.n	80029f4 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 80029a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a8:	441a      	add	r2, r3
 80029aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80029b4:	4619      	mov	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	440b      	add	r3, r1
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80029be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029c2:	3301      	adds	r3, #1
 80029c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c6:	441a      	add	r2, r3
 80029c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80029cc:	1c59      	adds	r1, r3, #1
 80029ce:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80029d2:	4619      	mov	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	440b      	add	r3, r1
 80029d8:	7812      	ldrb	r2, [r2, #0]
 80029da:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80029dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029e0:	3303      	adds	r3, #3
 80029e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80029e6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80029ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3bf      	bcc.n	8002972 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return STATUS_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3758      	adds	r7, #88	; 0x58
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t *data_words,
                                 uint16_t num_words) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t *)data_words,
 8002a0c:	88ba      	ldrh	r2, [r7, #4]
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff84 	bl	8002920 <sensirion_i2c_read_words_as_bytes>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != STATUS_OK)
 8002a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <sensirion_i2c_read_words+0x2e>
        return ret;
 8002a24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a28:	e022      	b.n	8002a70 <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e019      	b.n	8002a64 <sensirion_i2c_read_words+0x68>
        data_words[i] = be16_to_cpu(data_words[i]);
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	440b      	add	r3, r1
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b219      	sxth	r1, r3
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b28a      	uxth	r2, r1
 8002a5c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	3301      	adds	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d8e0      	bhi.n	8002a30 <sensirion_i2c_read_words+0x34>

    return STATUS_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460a      	mov	r2, r1
 8002a82:	71fb      	strb	r3, [r7, #7]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8002a88:	88b9      	ldrh	r1, [r7, #4]
 8002a8a:	f107 000c 	add.w	r0, r7, #12
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2200      	movs	r2, #0
 8002a92:	f7ff fee8 	bl	8002866 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8002a96:	f107 010c 	add.w	r1, r7, #12
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f89e 	bl	8002be0 <sensirion_i2c_write>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b21b      	sxth	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t *data_words,
                                          uint16_t num_words) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60ba      	str	r2, [r7, #8]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	81bb      	strh	r3, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	89b9      	ldrh	r1, [r7, #12]
 8002acc:	f107 0014 	add.w	r0, r7, #20
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	f7ff fec8 	bl	8002866 <sensirion_fill_cmd_send_buf>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	86fb      	strh	r3, [r7, #54]	; 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 8002ada:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002adc:	f107 0114 	add.w	r1, r7, #20
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f87c 	bl	8002be0 <sensirion_i2c_write>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b21b      	sxth	r3, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3738      	adds	r7, #56	; 0x38
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t *data_words,
                                       uint16_t num_words) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60ba      	str	r2, [r7, #8]
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	460b      	mov	r3, r1
 8002b04:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8002b06:	89b9      	ldrh	r1, [r7, #12]
 8002b08:	f107 0014 	add.w	r0, r7, #20
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f7ff fea9 	bl	8002866 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8002b14:	f107 0114 	add.w	r1, r7, #20
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f85f 	bl	8002be0 <sensirion_i2c_write>
 8002b22:	4603      	mov	r3, r0
 8002b24:	82fb      	strh	r3, [r7, #22]
    if (ret != STATUS_OK)
 8002b26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 8002b2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b32:	e00c      	b.n	8002b4e <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 8002b3a:	68b8      	ldr	r0, [r7, #8]
 8002b3c:	f000 f86c 	bl	8002c18 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8002b40:	8c3a      	ldrh	r2, [r7, #32]
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff58 	bl	80029fc <sensirion_i2c_read_words>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <i2c_init_sensirion>:
 * depending on your CubeMX configuration
 */
static I2C_HandleTypeDef *i2c_svm30;


void i2c_init_sensirion(I2C_HandleTypeDef * i2c_handler) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	i2c_svm30 = i2c_handler;
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <i2c_init_sensirion+0x1c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000624 	.word	0x20000624

08002b78 <getSVM30>:

int16_t getSVM30(svm30_t *svm301) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	int16_t err;
    err = svm_measure_iaq_blocking_read(&svm301->tvoc_ppb, &svm301->co2_eq_ppm,&svm301->temperature, &svm301->humidity);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 0008 	add.w	r0, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f103 010a 	add.w	r1, r3, #10
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	f001 f8b8 	bl	8003d06 <svm_measure_iaq_blocking_read>
 8002b96:	4603      	mov	r3, r0
 8002b98:	81fb      	strh	r3, [r7, #14]
    return err;
 8002b9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1),
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	b299      	uxth	r1, r3
 8002bc0:	88ba      	ldrh	r2, [r7, #4]
 8002bc2:	2364      	movs	r3, #100	; 0x64
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4804      	ldr	r0, [pc, #16]	; (8002bdc <sensirion_i2c_read+0x34>)
 8002bcc:	f003 fbe4 	bl	8006398 <HAL_I2C_Master_Receive>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20004c58 	.word	0x20004c58

08002be0 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1),
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	b299      	uxth	r1, r3
 8002bf8:	88ba      	ldrh	r2, [r7, #4]
 8002bfa:	2364      	movs	r3, #100	; 0x64
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4804      	ldr	r0, [pc, #16]	; (8002c14 <sensirion_i2c_write+0x34>)
 8002c04:	f003 fac6 	bl	8006194 <HAL_I2C_Master_Transmit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b25b      	sxtb	r3, r3
                                           (uint8_t *)data, count, 100);
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20004c58 	.word	0x20004c58

08002c18 <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <sensirion_sleep_usec+0x54>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <sensirion_sleep_usec+0x54>)
 8002c30:	fba3 1302 	umull	r1, r3, r3, r2
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <sensirion_sleep_usec+0x32>
        msec++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8002c4a:	f002 fe43 	bl	80058d4 <HAL_GetHalVersion>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <sensirion_sleep_usec+0x58>)
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d802      	bhi.n	8002c5c <sensirion_sleep_usec+0x44>
        msec++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f002 fe17 	bl	8005890 <HAL_Delay>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	10624dd3 	.word	0x10624dd3
 8002c70:	010100ff 	.word	0x010100ff

08002c74 <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 8002c7e:	f107 020b 	add.w	r2, r7, #11
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f884 	bl	8002d96 <sgp30_get_feature_set_version>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8002c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <sgp30_check_featureset+0x2c>
        return ret;
 8002c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c9e:	e00d      	b.n	8002cbc <sgp30_check_featureset+0x48>

    if (product_type != SGP30_PRODUCT_TYPE)
 8002ca0:	7afb      	ldrb	r3, [r7, #11]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <sgp30_check_featureset+0x38>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 8002ca6:	f06f 030b 	mvn.w	r3, #11
 8002caa:	e007      	b.n	8002cbc <sgp30_check_featureset+0x48>

    if (fs_version < needed_fs)
 8002cac:	89bb      	ldrh	r3, [r7, #12]
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d902      	bls.n	8002cba <sgp30_check_featureset+0x46>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 8002cb4:	f06f 0309 	mvn.w	r3, #9
 8002cb8:	e000      	b.n	8002cbc <sgp30_check_featureset+0x48>

    return STATUS_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8002cc8:	2358      	movs	r3, #88	; 0x58
 8002cca:	f242 0108 	movw	r1, #8200	; 0x2008
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fed2 	bl	8002a78 <sensirion_i2c_write_cmd>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm) {
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8002ce4:	2058      	movs	r0, #88	; 0x58
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	2202      	movs	r2, #2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7ff fe85 	bl	80029fc <sensirion_i2c_read_words>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8002cf6:	897a      	ldrh	r2, [r7, #10]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8002cfc:	893a      	ldrh	r2, [r7, #8]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	801a      	strh	r2, [r3, #0]

    return ret;
 8002d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t *tvoc_ppb,
                                        uint16_t *co2_eq_ppm) {
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8002d18:	f7ff ffd4 	bl	8002cc4 <sgp30_measure_iaq>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8002d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8002d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d2c:	e008      	b.n	8002d40 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8002d2e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002d32:	f7ff ff71 	bl	8002c18 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffce 	bl	8002cda <sgp30_read_iaq>
 8002d3e:	4603      	mov	r3, r0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <sgp30_set_absolute_humidity>:
    sensirion_sleep_usec(SGP30_CMD_SET_TVOC_BASELINE_DURATION_US);

    return ret;
}

int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t ah_scaled;

    if (absolute_humidity > 256000)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 8002d56:	d902      	bls.n	8002d5e <sgp30_set_absolute_humidity+0x16>
        return STATUS_FAIL;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e017      	b.n	8002d8e <sgp30_set_absolute_humidity+0x46>

    /* ah_scaled = (absolute_humidity / 1000) * 256 */
    ah_scaled = (uint16_t)((absolute_humidity * 16777) >> 16);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f244 1289 	movw	r2, #16777	; 0x4189
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	81bb      	strh	r3, [r7, #12]

    ret = sensirion_i2c_write_cmd_with_args(
 8002d6e:	2058      	movs	r0, #88	; 0x58
 8002d70:	f107 020c 	add.w	r2, r7, #12
 8002d74:	2301      	movs	r3, #1
 8002d76:	f242 0161 	movw	r1, #8289	; 0x2061
 8002d7a:	f7ff fe99 	bl	8002ab0 <sensirion_i2c_write_cmd_with_args>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	81fb      	strh	r3, [r7, #14]
        SGP30_I2C_ADDRESS, SGP30_CMD_SET_ABSOLUTE_HUMIDITY, &ah_scaled,
        SENSIRION_NUM_WORDS(ah_scaled));

    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);
 8002d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8002d86:	f7ff ff47 	bl	8002c18 <sensirion_sleep_usec>

    return ret;
 8002d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t *feature_set_version,
                                      uint8_t *product_type) {
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af02      	add	r7, sp, #8
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8002da0:	2058      	movs	r0, #88	; 0x58
 8002da2:	f107 020c 	add.w	r2, r7, #12
 8002da6:	2301      	movs	r3, #1
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	f242 7210 	movw	r2, #10000	; 0x2710
 8002db0:	f242 012f 	movw	r1, #8239	; 0x202f
 8002db4:	f7ff fe9e 	bl	8002af4 <sensirion_i2c_delayed_read_cmd>
 8002db8:	4603      	mov	r3, r0
 8002dba:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 8002dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <sgp30_get_feature_set_version+0x34>
        return ret;
 8002dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc8:	e00b      	b.n	8002de2 <sgp30_get_feature_set_version+0x4c>

    *feature_set_version = words[0] & 0x00FF;
 8002dca:	89bb      	ldrh	r3, [r7, #12]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 8002dd4:	89bb      	ldrh	r3, [r7, #12]
 8002dd6:	0b1b      	lsrs	r3, r3, #12
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8002df0:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 8002df2:	f242 0103 	movw	r1, #8195	; 0x2003
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe3e 	bl	8002a78 <sensirion_i2c_write_cmd>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 8002e00:	f242 7010 	movw	r0, #10000	; 0x2710
 8002e04:	f7ff ff08 	bl	8002c18 <sensirion_sleep_usec>
    return ret;
 8002e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <sgp30_probe>:

int16_t sgp30_probe() {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 8002e1a:	2020      	movs	r0, #32
 8002e1c:	f7ff ff2a 	bl	8002c74 <sgp30_check_featureset>
 8002e20:	4603      	mov	r3, r0
 8002e22:	80fb      	strh	r3, [r7, #6]

    if (ret != STATUS_OK){
 8002e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <sgp30_probe+0x2a>
    	printf("sg30 probe return %d\r\n", ret);
 8002e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4806      	ldr	r0, [pc, #24]	; (8002e4c <sgp30_probe+0x38>)
 8002e34:	f009 fdbe 	bl	800c9b4 <iprintf>
        return ret;
 8002e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3c:	e002      	b.n	8002e44 <sgp30_probe+0x30>
    }

    return sgp30_iaq_init();
 8002e3e:	f7ff ffd4 	bl	8002dea <sgp30_iaq_init>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	0800e4d8 	.word	0x0800e4d8

08002e50 <shtc1_wake_up>:

int16_t shtc1_sleep(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_SLEEP);
}

int16_t shtc1_wake_up(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_WAKEUP);
 8002e54:	2370      	movs	r3, #112	; 0x70
 8002e56:	f243 5217 	movw	r2, #13591	; 0x3517
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe0b 	bl	8002a78 <sensirion_i2c_write_cmd>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <shtc1_measure_blocking_read>:

int16_t shtc1_measure_blocking_read(int32_t *temperature, int32_t *humidity) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = shtc1_measure();
 8002e72:	f000 f817 	bl	8002ea4 <shtc1_measure>
 8002e76:	4603      	mov	r3, r0
 8002e78:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8002e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <shtc1_measure_blocking_read+0x20>
        return ret;
 8002e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e86:	e008      	b.n	8002e9a <shtc1_measure_blocking_read+0x32>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
 8002e88:	f246 309c 	movw	r0, #25500	; 0x639c
 8002e8c:	f7ff fec4 	bl	8002c18 <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f814 	bl	8002ec0 <shtc1_read>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <shtc1_measure>:

int16_t shtc1_measure(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
 8002ea8:	2270      	movs	r2, #112	; 0x70
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <shtc1_measure+0x18>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7ff fde1 	bl	8002a78 <sensirion_i2c_write_cmd>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000060 	.word	0x20000060

08002ec0 <shtc1_read>:

int16_t shtc1_read(int32_t *temperature, int32_t *humidity) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
 8002eca:	2070      	movs	r0, #112	; 0x70
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7ff fd92 	bl	80029fc <sensirion_i2c_read_words>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f245 5373 	movw	r3, #21875	; 0x5573
 8002ee4:	fb03 f302 	mul.w	r3, r3, r2
 8002ee8:	135b      	asrs	r3, r3, #13
 8002eea:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8002eee:	3bc8      	subs	r3, #200	; 0xc8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6013      	str	r3, [r2, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8002efc:	fb03 f302 	mul.w	r3, r3, r2
 8002f00:	135a      	asrs	r2, r3, #13
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	601a      	str	r2, [r3, #0]

    return ret;
 8002f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <shtc1_probe>:

int16_t shtc1_probe(void) {
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
    uint32_t serial;

    (void)shtc1_wake_up(); /* Try to wake up the sensor, ignore return value */
 8002f18:	f7ff ff9a 	bl	8002e50 <shtc1_wake_up>
    return shtc1_read_serial(&serial);
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f806 	bl	8002f30 <shtc1_read_serial>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <shtc1_read_serial>:
void shtc1_enable_low_power_mode(uint8_t enable_low_power_mode) {
    shtc1_cmd_measure =
        enable_low_power_mode ? SHTC1_CMD_MEASURE_LPM : SHTC1_CMD_MEASURE_HPM;
}

int16_t shtc1_read_serial(uint32_t *serial) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	6078      	str	r0, [r7, #4]
    int16_t ret;
    const uint16_t tx_words[] = {0x007B};
 8002f38:	237b      	movs	r3, #123	; 0x7b
 8002f3a:	81bb      	strh	r3, [r7, #12]
    uint16_t serial_words[SENSIRION_NUM_WORDS(*serial)];

    ret = sensirion_i2c_write_cmd_with_args(SHTC1_ADDRESS, 0xC595, tx_words,
 8002f3c:	2070      	movs	r0, #112	; 0x70
 8002f3e:	f107 020c 	add.w	r2, r7, #12
 8002f42:	2301      	movs	r3, #1
 8002f44:	f24c 5195 	movw	r1, #50581	; 0xc595
 8002f48:	f7ff fdb2 	bl	8002ab0 <sensirion_i2c_write_cmd_with_args>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	81fb      	strh	r3, [r7, #14]
                                            SENSIRION_NUM_WORDS(tx_words));
    if (ret){
 8002f50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <shtc1_read_serial+0x34>
    	printf("write cmd failed\r\n");
 8002f58:	4824      	ldr	r0, [pc, #144]	; (8002fec <shtc1_read_serial+0xbc>)
 8002f5a:	f009 fd9f 	bl	800ca9c <puts>
        return ret;
 8002f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f62:	e03e      	b.n	8002fe2 <shtc1_read_serial+0xb2>
    }

    sensirion_sleep_usec(SHTC1_CMD_DURATION_USEC);
 8002f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe55 	bl	8002c18 <sensirion_sleep_usec>

    ret = sensirion_i2c_delayed_read_cmd(
 8002f6e:	2070      	movs	r0, #112	; 0x70
 8002f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f74:	4619      	mov	r1, r3
 8002f76:	f107 0208 	add.w	r2, r7, #8
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	460a      	mov	r2, r1
 8002f82:	f24c 71f7 	movw	r1, #51191	; 0xc7f7
 8002f86:	f7ff fdb5 	bl	8002af4 <sensirion_i2c_delayed_read_cmd>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	81fb      	strh	r3, [r7, #14]
        SHTC1_ADDRESS, 0xC7F7, SHTC1_CMD_DURATION_USEC, &serial_words[0], 1);
    if (ret){
 8002f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <shtc1_read_serial+0x72>
    	printf("read cmd failed\r\n");
 8002f96:	4816      	ldr	r0, [pc, #88]	; (8002ff0 <shtc1_read_serial+0xc0>)
 8002f98:	f009 fd80 	bl	800ca9c <puts>
        return ret;
 8002f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa0:	e01f      	b.n	8002fe2 <shtc1_read_serial+0xb2>
    }

    ret = sensirion_i2c_delayed_read_cmd(
 8002fa2:	2070      	movs	r0, #112	; 0x70
 8002fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	f24c 71f7 	movw	r1, #51191	; 0xc7f7
 8002fbc:	f7ff fd9a 	bl	8002af4 <sensirion_i2c_delayed_read_cmd>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	81fb      	strh	r3, [r7, #14]
        SHTC1_ADDRESS, 0xC7F7, SHTC1_CMD_DURATION_USEC, &serial_words[1], 1);
    if (ret)
 8002fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <shtc1_read_serial+0xa2>
        return ret;
 8002fcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fd0:	e007      	b.n	8002fe2 <shtc1_read_serial+0xb2>

    *serial = ((uint32_t)serial_words[0] << 16) | serial_words[1];
 8002fd2:	893b      	ldrh	r3, [r7, #8]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	897a      	ldrh	r2, [r7, #10]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
    return ret;
 8002fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	0800e4f0 	.word	0x0800e4f0
 8002ff0:	0800e504 	.word	0x0800e504

08002ff4 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b092      	sub	sp, #72	; 0x48
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	uint32_t speed;
	uint8_t str[50];
  if (huart->Instance == USART6) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a59      	ldr	r2, [pc, #356]	; (8003168 <HAL_UART_RxCpltCallback+0x174>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d165      	bne.n	80030d2 <HAL_UART_RxCpltCallback+0xde>
	if ( rxBuffer[0] == 'B' && rxBuffer[1] == 'M') {
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b42      	cmp	r3, #66	; 0x42
 800300c:	d14e      	bne.n	80030ac <HAL_UART_RxCpltCallback+0xb8>
 800300e:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b4d      	cmp	r3, #77	; 0x4d
 8003014:	d14a      	bne.n	80030ac <HAL_UART_RxCpltCallback+0xb8>

	  amphenol1.PM1_Standard = rxBuffer[4]*256 + rxBuffer[5];
 8003016:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	b29b      	uxth	r3, r3
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003022:	795b      	ldrb	r3, [r3, #5]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4413      	add	r3, r2
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 800302c:	801a      	strh	r2, [r3, #0]
	  amphenol1.PM2p5_Standard = rxBuffer[6]*256 + rxBuffer[7];
 800302e:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003030:	799b      	ldrb	r3, [r3, #6]
 8003032:	b29b      	uxth	r3, r3
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	b29a      	uxth	r2, r3
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 800303a:	79db      	ldrb	r3, [r3, #7]
 800303c:	b29b      	uxth	r3, r3
 800303e:	4413      	add	r3, r2
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 8003044:	805a      	strh	r2, [r3, #2]
	  amphenol1.PM10_Standard = rxBuffer[8]*256 + rxBuffer[9];
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003048:	7a1b      	ldrb	r3, [r3, #8]
 800304a:	b29b      	uxth	r3, r3
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003052:	7a5b      	ldrb	r3, [r3, #9]
 8003054:	b29b      	uxth	r3, r3
 8003056:	4413      	add	r3, r2
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 800305c:	809a      	strh	r2, [r3, #4]

	  amphenol1.PM1_Environment = rxBuffer[10]*256 + rxBuffer[11];
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003060:	7a9b      	ldrb	r3, [r3, #10]
 8003062:	b29b      	uxth	r3, r3
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b29a      	uxth	r2, r3
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 800306a:	7adb      	ldrb	r3, [r3, #11]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4413      	add	r3, r2
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 8003074:	80da      	strh	r2, [r3, #6]
	  amphenol1.PM2p5_Environment = rxBuffer[12]*256 + rxBuffer[13];
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003078:	7b1b      	ldrb	r3, [r3, #12]
 800307a:	b29b      	uxth	r3, r3
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003082:	7b5b      	ldrb	r3, [r3, #13]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4413      	add	r3, r2
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 800308c:	811a      	strh	r2, [r3, #8]
	  amphenol1.PM10_Environment = rxBuffer[14]*256 + rxBuffer[15];
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 8003090:	7b9b      	ldrb	r3, [r3, #14]
 8003092:	b29b      	uxth	r3, r3
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 800309a:	7bdb      	ldrb	r3, [r3, #15]
 800309c:	b29b      	uxth	r3, r3
 800309e:	4413      	add	r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_UART_RxCpltCallback+0x17c>)
 80030a4:	815a      	strh	r2, [r3, #10]
	  printf("finish get pm2.5\r\n");
 80030a6:	4833      	ldr	r0, [pc, #204]	; (8003174 <HAL_UART_RxCpltCallback+0x180>)
 80030a8:	f009 fcf8 	bl	800ca9c <puts>
	}

	for (int i = 0; i<32 ; i++) {
 80030ac:	2300      	movs	r3, #0
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
 80030b0:	e007      	b.n	80030c2 <HAL_UART_RxCpltCallback+0xce>
	  rxBuffer[i] = 0;
 80030b2:	4a2e      	ldr	r2, [pc, #184]	; (800316c <HAL_UART_RxCpltCallback+0x178>)
 80030b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b6:	4413      	add	r3, r2
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<32 ; i++) {
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	3301      	adds	r3, #1
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
 80030c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c4:	2b1f      	cmp	r3, #31
 80030c6:	ddf4      	ble.n	80030b2 <HAL_UART_RxCpltCallback+0xbe>
	}
	HAL_UART_DMAStop(huart_sm_uart_04l);
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_UART_RxCpltCallback+0x184>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f007 fb08 	bl	800a6e2 <HAL_UART_DMAStop>
  }
  if(huart->Instance == USART2){
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_UART_RxCpltCallback+0x188>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d140      	bne.n	800315e <HAL_UART_RxCpltCallback+0x16a>
	  HAL_UART_Transmit(&huart2, (uint8_t *)&Rx_data[0], 1, 0xFFFF);
 80030dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e0:	2201      	movs	r2, #1
 80030e2:	4927      	ldr	r1, [pc, #156]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 80030e4:	4827      	ldr	r0, [pc, #156]	; (8003184 <HAL_UART_RxCpltCallback+0x190>)
 80030e6:	f007 f968 	bl	800a3ba <HAL_UART_Transmit>
	  if(Rx_data[0] == 'h'){
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b68      	cmp	r3, #104	; 0x68
 80030f0:	d103      	bne.n	80030fa <HAL_UART_RxCpltCallback+0x106>
		  xiaomi_fan_run(HIGH_SPEED);
 80030f2:	2003      	movs	r0, #3
 80030f4:	f7fd ffbe 	bl	8001074 <xiaomi_fan_run>
 80030f8:	e02c      	b.n	8003154 <HAL_UART_RxCpltCallback+0x160>
	  }else if(Rx_data[0] == 'm'){
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b6d      	cmp	r3, #109	; 0x6d
 8003100:	d103      	bne.n	800310a <HAL_UART_RxCpltCallback+0x116>
		  xiaomi_fan_run(MED_SPEED);
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd ffb6 	bl	8001074 <xiaomi_fan_run>
 8003108:	e024      	b.n	8003154 <HAL_UART_RxCpltCallback+0x160>
	  }else if(Rx_data[0] == 'l'){
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b6c      	cmp	r3, #108	; 0x6c
 8003110:	d103      	bne.n	800311a <HAL_UART_RxCpltCallback+0x126>
		  xiaomi_fan_run(LOW_SPEED);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd ffae 	bl	8001074 <xiaomi_fan_run>
 8003118:	e01c      	b.n	8003154 <HAL_UART_RxCpltCallback+0x160>
	  }else if(Rx_data[0] == 'r'){
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b72      	cmp	r3, #114	; 0x72
 8003120:	d118      	bne.n	8003154 <HAL_UART_RxCpltCallback+0x160>
		  speed = xiaomi_fan_read();
 8003122:	f7fe f81f 	bl	8001164 <xiaomi_fan_read>
 8003126:	4603      	mov	r3, r0
 8003128:	643b      	str	r3, [r7, #64]	; 0x40
		  sprintf(str, "speed %u\r\n", speed);
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	4915      	ldr	r1, [pc, #84]	; (8003188 <HAL_UART_RxCpltCallback+0x194>)
 8003132:	4618      	mov	r0, r3
 8003134:	f009 fcba 	bl	800caac <siprintf>
		  HAL_UART_Transmit(&huart2, str, strlen(str), 0xFFFF);
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f859 	bl	80001f4 <strlen>
 8003142:	4603      	mov	r3, r0
 8003144:	b29a      	uxth	r2, r3
 8003146:	f107 010c 	add.w	r1, r7, #12
 800314a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800314e:	480d      	ldr	r0, [pc, #52]	; (8003184 <HAL_UART_RxCpltCallback+0x190>)
 8003150:	f007 f933 	bl	800a3ba <HAL_UART_Transmit>
	  }
	  HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8003154:	2201      	movs	r2, #1
 8003156:	490a      	ldr	r1, [pc, #40]	; (8003180 <HAL_UART_RxCpltCallback+0x18c>)
 8003158:	480a      	ldr	r0, [pc, #40]	; (8003184 <HAL_UART_RxCpltCallback+0x190>)
 800315a:	f007 fa6d 	bl	800a638 <HAL_UART_Receive_IT>
  }
}
 800315e:	bf00      	nop
 8003160:	3748      	adds	r7, #72	; 0x48
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40011400 	.word	0x40011400
 800316c:	20000628 	.word	0x20000628
 8003170:	20005110 	.word	0x20005110
 8003174:	0800e518 	.word	0x0800e518
 8003178:	2000511c 	.word	0x2000511c
 800317c:	40004400 	.word	0x40004400
 8003180:	20004cb0 	.word	0x20004cb0
 8003184:	20004e9c 	.word	0x20004e9c
 8003188:	0800e52c 	.word	0x0800e52c

0800318c <directionOfRotation>:
#include "main.h"
#include "stepmotor.h"
#include "stdbool.h"
#include "stdio.h"

void directionOfRotation(int damper, bool direction, int degree) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	; 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	460b      	mov	r3, r1
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	72fb      	strb	r3, [r7, #11]
	GPIO_TypeDef *damper_port0 = IN1_Port;
 800319a:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <directionOfRotation+0x268>)
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef *damper_port1 = IN2_Port;
 800319e:	4b95      	ldr	r3, [pc, #596]	; (80033f4 <directionOfRotation+0x268>)
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_TypeDef *damper_port2 = IN3_Port;
 80031a2:	4b95      	ldr	r3, [pc, #596]	; (80033f8 <directionOfRotation+0x26c>)
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef *damper_port3 = IN4_Port;
 80031a6:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <directionOfRotation+0x26c>)
 80031a8:	623b      	str	r3, [r7, #32]
	uint16_t pin0 = IN1_Pin;
 80031aa:	2310      	movs	r3, #16
 80031ac:	83fb      	strh	r3, [r7, #30]
	uint16_t pin1 = IN2_Pin;
 80031ae:	2320      	movs	r3, #32
 80031b0:	83bb      	strh	r3, [r7, #28]
	uint16_t pin2 = IN3_Pin;
 80031b2:	2301      	movs	r3, #1
 80031b4:	837b      	strh	r3, [r7, #26]
	uint16_t pin3 = IN4_Pin;
 80031b6:	2302      	movs	r3, #2
 80031b8:	833b      	strh	r3, [r7, #24]

	if(damper == DAMPER_IN){
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d110      	bne.n	80031e2 <directionOfRotation+0x56>
		damper_port0 = DAMPER_IN_0_GPIO_Port;
 80031c0:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <directionOfRotation+0x26c>)
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		damper_port1 = DAMPER_IN_1_GPIO_Port;
 80031c4:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <directionOfRotation+0x26c>)
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
		damper_port2 = DAMPER_IN_2_GPIO_Port;
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <directionOfRotation+0x268>)
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
		damper_port3 = DAMPER_IN_3_GPIO_Port;
 80031cc:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <directionOfRotation+0x268>)
 80031ce:	623b      	str	r3, [r7, #32]

		pin0 = DAMPER_IN_0_Pin;
 80031d0:	2301      	movs	r3, #1
 80031d2:	83fb      	strh	r3, [r7, #30]
		pin1 = DAMPER_IN_1_Pin;
 80031d4:	2302      	movs	r3, #2
 80031d6:	83bb      	strh	r3, [r7, #28]
		pin2 = DAMPER_IN_2_Pin;
 80031d8:	2310      	movs	r3, #16
 80031da:	837b      	strh	r3, [r7, #26]
		pin3 = DAMPER_IN_3_Pin;
 80031dc:	2320      	movs	r3, #32
 80031de:	833b      	strh	r3, [r7, #24]
 80031e0:	e012      	b.n	8003208 <directionOfRotation+0x7c>

	}else if(damper == DAMPER_OUT){
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10f      	bne.n	8003208 <directionOfRotation+0x7c>
		damper_port0 = DAMPER_OUT_0_GPIO_Port;
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <directionOfRotation+0x270>)
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		damper_port1 = DAMPER_OUT_1_GPIO_Port;
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <directionOfRotation+0x270>)
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
		damper_port2 = DAMPER_OUT_2_GPIO_Port;
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <directionOfRotation+0x270>)
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
		damper_port3 = DAMPER_OUT_3_GPIO_Port;
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <directionOfRotation+0x270>)
 80031f6:	623b      	str	r3, [r7, #32]

		pin0 = DAMPER_OUT_0_Pin;
 80031f8:	2310      	movs	r3, #16
 80031fa:	83fb      	strh	r3, [r7, #30]
		pin1 = DAMPER_OUT_1_Pin;
 80031fc:	2320      	movs	r3, #32
 80031fe:	83bb      	strh	r3, [r7, #28]
		pin2 = DAMPER_OUT_2_Pin;
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	837b      	strh	r3, [r7, #26]
		pin3 = DAMPER_OUT_3_Pin;
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	833b      	strh	r3, [r7, #24]
	}

	uint16_t t = degree*512/360;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	4a7c      	ldr	r2, [pc, #496]	; (8003400 <directionOfRotation+0x274>)
 800320e:	fb82 1203 	smull	r1, r2, r2, r3
 8003212:	441a      	add	r2, r3
 8003214:	1212      	asrs	r2, r2, #8
 8003216:	17db      	asrs	r3, r3, #31
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i <t; i++) {
 800321c:	2300      	movs	r3, #0
 800321e:	82fb      	strh	r3, [r7, #22]
 8003220:	e0de      	b.n	80033e0 <directionOfRotation+0x254>
		if(direction) {
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d06c      	beq.n	8003302 <directionOfRotation+0x176>
			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_SET);
 8003228:	8bfb      	ldrh	r3, [r7, #30]
 800322a:	2201      	movs	r2, #1
 800322c:	4619      	mov	r1, r3
 800322e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003230:	f002 fe5e 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_SET);
 8003234:	8bbb      	ldrh	r3, [r7, #28]
 8003236:	2201      	movs	r2, #1
 8003238:	4619      	mov	r1, r3
 800323a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323c:	f002 fe58 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_RESET);
 8003240:	8b7b      	ldrh	r3, [r7, #26]
 8003242:	2200      	movs	r2, #0
 8003244:	4619      	mov	r1, r3
 8003246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003248:	f002 fe52 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_RESET);
 800324c:	8b3b      	ldrh	r3, [r7, #24]
 800324e:	2200      	movs	r2, #0
 8003250:	4619      	mov	r1, r3
 8003252:	6a38      	ldr	r0, [r7, #32]
 8003254:	f002 fe4c 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 8003258:	2002      	movs	r0, #2
 800325a:	f002 fb19 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_RESET);
 800325e:	8bfb      	ldrh	r3, [r7, #30]
 8003260:	2200      	movs	r2, #0
 8003262:	4619      	mov	r1, r3
 8003264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003266:	f002 fe43 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_SET);
 800326a:	8bbb      	ldrh	r3, [r7, #28]
 800326c:	2201      	movs	r2, #1
 800326e:	4619      	mov	r1, r3
 8003270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003272:	f002 fe3d 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_SET);
 8003276:	8b7b      	ldrh	r3, [r7, #26]
 8003278:	2201      	movs	r2, #1
 800327a:	4619      	mov	r1, r3
 800327c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800327e:	f002 fe37 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_RESET);
 8003282:	8b3b      	ldrh	r3, [r7, #24]
 8003284:	2200      	movs	r2, #0
 8003286:	4619      	mov	r1, r3
 8003288:	6a38      	ldr	r0, [r7, #32]
 800328a:	f002 fe31 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 800328e:	2002      	movs	r0, #2
 8003290:	f002 fafe 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_RESET);
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	2200      	movs	r2, #0
 8003298:	4619      	mov	r1, r3
 800329a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800329c:	f002 fe28 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_RESET);
 80032a0:	8bbb      	ldrh	r3, [r7, #28]
 80032a2:	2200      	movs	r2, #0
 80032a4:	4619      	mov	r1, r3
 80032a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a8:	f002 fe22 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_SET);
 80032ac:	8b7b      	ldrh	r3, [r7, #26]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4619      	mov	r1, r3
 80032b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b4:	f002 fe1c 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_SET);
 80032b8:	8b3b      	ldrh	r3, [r7, #24]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4619      	mov	r1, r3
 80032be:	6a38      	ldr	r0, [r7, #32]
 80032c0:	f002 fe16 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 80032c4:	2002      	movs	r0, #2
 80032c6:	f002 fae3 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_SET);
 80032ca:	8bfb      	ldrh	r3, [r7, #30]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4619      	mov	r1, r3
 80032d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d2:	f002 fe0d 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_RESET);
 80032d6:	8bbb      	ldrh	r3, [r7, #28]
 80032d8:	2200      	movs	r2, #0
 80032da:	4619      	mov	r1, r3
 80032dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032de:	f002 fe07 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_RESET);
 80032e2:	8b7b      	ldrh	r3, [r7, #26]
 80032e4:	2200      	movs	r2, #0
 80032e6:	4619      	mov	r1, r3
 80032e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ea:	f002 fe01 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_SET);
 80032ee:	8b3b      	ldrh	r3, [r7, #24]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4619      	mov	r1, r3
 80032f4:	6a38      	ldr	r0, [r7, #32]
 80032f6:	f002 fdfb 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 80032fa:	2002      	movs	r0, #2
 80032fc:	f002 fac8 	bl	8005890 <HAL_Delay>
 8003300:	e06b      	b.n	80033da <directionOfRotation+0x24e>
		} else {
			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_SET);
 8003302:	8bfb      	ldrh	r3, [r7, #30]
 8003304:	2201      	movs	r2, #1
 8003306:	4619      	mov	r1, r3
 8003308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800330a:	f002 fdf1 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_RESET);
 800330e:	8bbb      	ldrh	r3, [r7, #28]
 8003310:	2200      	movs	r2, #0
 8003312:	4619      	mov	r1, r3
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f002 fdeb 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_RESET);
 800331a:	8b7b      	ldrh	r3, [r7, #26]
 800331c:	2200      	movs	r2, #0
 800331e:	4619      	mov	r1, r3
 8003320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003322:	f002 fde5 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_SET);
 8003326:	8b3b      	ldrh	r3, [r7, #24]
 8003328:	2201      	movs	r2, #1
 800332a:	4619      	mov	r1, r3
 800332c:	6a38      	ldr	r0, [r7, #32]
 800332e:	f002 fddf 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 8003332:	2002      	movs	r0, #2
 8003334:	f002 faac 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_RESET);
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	2200      	movs	r2, #0
 800333c:	4619      	mov	r1, r3
 800333e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003340:	f002 fdd6 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_RESET);
 8003344:	8bbb      	ldrh	r3, [r7, #28]
 8003346:	2200      	movs	r2, #0
 8003348:	4619      	mov	r1, r3
 800334a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334c:	f002 fdd0 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_SET);
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	2201      	movs	r2, #1
 8003354:	4619      	mov	r1, r3
 8003356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003358:	f002 fdca 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_SET);
 800335c:	8b3b      	ldrh	r3, [r7, #24]
 800335e:	2201      	movs	r2, #1
 8003360:	4619      	mov	r1, r3
 8003362:	6a38      	ldr	r0, [r7, #32]
 8003364:	f002 fdc4 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 8003368:	2002      	movs	r0, #2
 800336a:	f002 fa91 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_RESET);
 800336e:	8bfb      	ldrh	r3, [r7, #30]
 8003370:	2200      	movs	r2, #0
 8003372:	4619      	mov	r1, r3
 8003374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003376:	f002 fdbb 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_SET);
 800337a:	8bbb      	ldrh	r3, [r7, #28]
 800337c:	2201      	movs	r2, #1
 800337e:	4619      	mov	r1, r3
 8003380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003382:	f002 fdb5 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_SET);
 8003386:	8b7b      	ldrh	r3, [r7, #26]
 8003388:	2201      	movs	r2, #1
 800338a:	4619      	mov	r1, r3
 800338c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338e:	f002 fdaf 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_RESET);
 8003392:	8b3b      	ldrh	r3, [r7, #24]
 8003394:	2200      	movs	r2, #0
 8003396:	4619      	mov	r1, r3
 8003398:	6a38      	ldr	r0, [r7, #32]
 800339a:	f002 fda9 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 800339e:	2002      	movs	r0, #2
 80033a0:	f002 fa76 	bl	8005890 <HAL_Delay>

			HAL_GPIO_WritePin (damper_port0, pin0, GPIO_PIN_SET);
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4619      	mov	r1, r3
 80033aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ac:	f002 fda0 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port1, pin1, GPIO_PIN_SET);
 80033b0:	8bbb      	ldrh	r3, [r7, #28]
 80033b2:	2201      	movs	r2, #1
 80033b4:	4619      	mov	r1, r3
 80033b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b8:	f002 fd9a 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port2, pin2, GPIO_PIN_RESET);
 80033bc:	8b7b      	ldrh	r3, [r7, #26]
 80033be:	2200      	movs	r2, #0
 80033c0:	4619      	mov	r1, r3
 80033c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c4:	f002 fd94 	bl	8005ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (damper_port3, pin3, GPIO_PIN_RESET);
 80033c8:	8b3b      	ldrh	r3, [r7, #24]
 80033ca:	2200      	movs	r2, #0
 80033cc:	4619      	mov	r1, r3
 80033ce:	6a38      	ldr	r0, [r7, #32]
 80033d0:	f002 fd8e 	bl	8005ef0 <HAL_GPIO_WritePin>

			HAL_Delay(delayTime);
 80033d4:	2002      	movs	r0, #2
 80033d6:	f002 fa5b 	bl	8005890 <HAL_Delay>
	for (uint16_t i = 0; i <t; i++) {
 80033da:	8afb      	ldrh	r3, [r7, #22]
 80033dc:	3301      	adds	r3, #1
 80033de:	82fb      	strh	r3, [r7, #22]
 80033e0:	8afa      	ldrh	r2, [r7, #22]
 80033e2:	8abb      	ldrh	r3, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f4ff af1c 	bcc.w	8003222 <directionOfRotation+0x96>
		}
	}
}
 80033ea:	bf00      	nop
 80033ec:	3730      	adds	r7, #48	; 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40020000 	.word	0x40020000
 8003400:	b60b60b7 	.word	0xb60b60b7

08003404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_MspInit+0x54>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_MspInit+0x54>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_MspInit+0x54>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_MspInit+0x54>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_MspInit+0x54>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_MspInit+0x54>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	210f      	movs	r1, #15
 8003446:	f06f 0001 	mvn.w	r0, #1
 800344a:	f002 fb05 	bl	8005a58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800

0800345c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 031c 	add.w	r3, r7, #28
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a43      	ldr	r2, [pc, #268]	; (8003588 <HAL_I2C_MspInit+0x12c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d13c      	bne.n	80034f8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a41      	ldr	r2, [pc, #260]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349e:	2312      	movs	r3, #18
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a6:	2303      	movs	r3, #3
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034aa:	2304      	movs	r3, #4
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	4619      	mov	r1, r3
 80034b4:	4836      	ldr	r0, [pc, #216]	; (8003590 <HAL_I2C_MspInit+0x134>)
 80034b6:	f002 fb99 	bl	8005bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_I2C_MspInit+0x130>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a32      	ldr	r2, [pc, #200]	; (800358c <HAL_I2C_MspInit+0x130>)
 80034c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_I2C_MspInit+0x130>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2105      	movs	r1, #5
 80034da:	201f      	movs	r0, #31
 80034dc:	f002 fabc 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034e0:	201f      	movs	r0, #31
 80034e2:	f002 fad5 	bl	8005a90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2105      	movs	r1, #5
 80034ea:	2020      	movs	r0, #32
 80034ec:	f002 fab4 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80034f0:	2020      	movs	r0, #32
 80034f2:	f002 facd 	bl	8005a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034f6:	e042      	b.n	800357e <HAL_I2C_MspInit+0x122>
  else if(hi2c->Instance==I2C2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_I2C_MspInit+0x138>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d13d      	bne.n	800357e <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a20      	ldr	r2, [pc, #128]	; (800358c <HAL_I2C_MspInit+0x130>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800351e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003524:	2312      	movs	r3, #18
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800352c:	2301      	movs	r3, #1
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003530:	2304      	movs	r3, #4
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	4619      	mov	r1, r3
 800353a:	4815      	ldr	r0, [pc, #84]	; (8003590 <HAL_I2C_MspInit+0x134>)
 800353c:	f002 fb56 	bl	8005bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003546:	2312      	movs	r3, #18
 8003548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800354e:	2301      	movs	r3, #1
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003552:	2309      	movs	r3, #9
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4619      	mov	r1, r3
 800355c:	480c      	ldr	r0, [pc, #48]	; (8003590 <HAL_I2C_MspInit+0x134>)
 800355e:	f002 fb45 	bl	8005bec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_I2C_MspInit+0x130>)
 800356c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_I2C_MspInit+0x130>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	bf00      	nop
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40005400 	.word	0x40005400
 800358c:	40023800 	.word	0x40023800
 8003590:	40020400 	.word	0x40020400
 8003594:	40005800 	.word	0x40005800

08003598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a51      	ldr	r2, [pc, #324]	; (80036fc <HAL_SPI_MspInit+0x164>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d14b      	bne.n	8003652 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a4f      	ldr	r2, [pc, #316]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a48      	ldr	r2, [pc, #288]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a41      	ldr	r2, [pc, #260]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_SPI_MspInit+0x168>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800360e:	230c      	movs	r3, #12
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003612:	2302      	movs	r3, #2
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800361e:	2305      	movs	r3, #5
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003626:	4619      	mov	r1, r3
 8003628:	4836      	ldr	r0, [pc, #216]	; (8003704 <HAL_SPI_MspInit+0x16c>)
 800362a:	f002 fadf 	bl	8005bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800362e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003640:	2305      	movs	r3, #5
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003648:	4619      	mov	r1, r3
 800364a:	482f      	ldr	r0, [pc, #188]	; (8003708 <HAL_SPI_MspInit+0x170>)
 800364c:	f002 face 	bl	8005bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003650:	e050      	b.n	80036f4 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_SPI_MspInit+0x174>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d14b      	bne.n	80036f4 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_SPI_MspInit+0x168>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_SPI_MspInit+0x168>)
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	6413      	str	r3, [r2, #64]	; 0x40
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_SPI_MspInit+0x168>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_SPI_MspInit+0x168>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_SPI_MspInit+0x168>)
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	6313      	str	r3, [r2, #48]	; 0x30
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_SPI_MspInit+0x168>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_SPI_MspInit+0x168>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_SPI_MspInit+0x168>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6313      	str	r3, [r2, #48]	; 0x30
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_SPI_MspInit+0x168>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	2302      	movs	r3, #2
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036be:	2303      	movs	r3, #3
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80036c2:	2307      	movs	r3, #7
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ca:	4619      	mov	r1, r3
 80036cc:	480e      	ldr	r0, [pc, #56]	; (8003708 <HAL_SPI_MspInit+0x170>)
 80036ce:	f002 fa8d 	bl	8005bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80036d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036e4:	2306      	movs	r3, #6
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ec:	4619      	mov	r1, r3
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_SPI_MspInit+0x16c>)
 80036f0:	f002 fa7c 	bl	8005bec <HAL_GPIO_Init>
}
 80036f4:	bf00      	nop
 80036f6:	3738      	adds	r7, #56	; 0x38
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40003800 	.word	0x40003800
 8003700:	40023800 	.word	0x40023800
 8003704:	40020800 	.word	0x40020800
 8003708:	40020400 	.word	0x40020400
 800370c:	40003c00 	.word	0x40003c00

08003710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a39      	ldr	r2, [pc, #228]	; (8003814 <HAL_TIM_Base_MspInit+0x104>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d116      	bne.n	8003760 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2105      	movs	r1, #5
 8003752:	201b      	movs	r0, #27
 8003754:	f002 f980 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003758:	201b      	movs	r0, #27
 800375a:	f002 f999 	bl	8005a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800375e:	e054      	b.n	800380a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d116      	bne.n	8003798 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2105      	movs	r1, #5
 800378a:	201c      	movs	r0, #28
 800378c:	f002 f964 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003790:	201c      	movs	r0, #28
 8003792:	f002 f97d 	bl	8005a90 <HAL_NVIC_EnableIRQ>
}
 8003796:	e038      	b.n	800380a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_TIM_Base_MspInit+0x10c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d133      	bne.n	800380a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037ac:	f043 0308 	orr.w	r3, r3, #8
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_TIM_Base_MspInit+0x108>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4619      	mov	r1, r3
 80037f4:	480a      	ldr	r0, [pc, #40]	; (8003820 <HAL_TIM_Base_MspInit+0x110>)
 80037f6:	f002 f9f9 	bl	8005bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2105      	movs	r1, #5
 80037fe:	2032      	movs	r0, #50	; 0x32
 8003800:	f002 f92a 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003804:	2032      	movs	r0, #50	; 0x32
 8003806:	f002 f943 	bl	8005a90 <HAL_NVIC_EnableIRQ>
}
 800380a:	bf00      	nop
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40023800 	.word	0x40023800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40020000 	.word	0x40020000

08003824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <HAL_TIM_MspPostInit+0xb0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d11f      	bne.n	8003886 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003874:	2301      	movs	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	4817      	ldr	r0, [pc, #92]	; (80038dc <HAL_TIM_MspPostInit+0xb8>)
 8003880:	f002 f9b4 	bl	8005bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003884:	e022      	b.n	80038cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d11d      	bne.n	80038cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6313      	str	r3, [r2, #48]	; 0x30
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_TIM_MspPostInit+0xb4>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038ac:	2302      	movs	r3, #2
 80038ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <HAL_TIM_MspPostInit+0xb8>)
 80038c8:	f002 f990 	bl	8005bec <HAL_GPIO_Init>
}
 80038cc:	bf00      	nop
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_UART_MspInit+0x15c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12d      	bne.n	800395e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	4b4e      	ldr	r3, [pc, #312]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_UART_MspInit+0x160>)
 800390c:	f043 0310 	orr.w	r3, r3, #16
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800393a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800394c:	2307      	movs	r3, #7
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003954:	4619      	mov	r1, r3
 8003956:	483b      	ldr	r0, [pc, #236]	; (8003a44 <HAL_UART_MspInit+0x164>)
 8003958:	f002 f948 	bl	8005bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800395c:	e06a      	b.n	8003a34 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_UART_MspInit+0x168>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12c      	bne.n	80039c2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_UART_MspInit+0x160>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_UART_MspInit+0x160>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_UART_MspInit+0x160>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <HAL_UART_MspInit+0x160>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6313      	str	r3, [r2, #48]	; 0x30
 8003994:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_UART_MspInit+0x160>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039a0:	230c      	movs	r3, #12
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039b0:	2307      	movs	r3, #7
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b8:	4619      	mov	r1, r3
 80039ba:	4822      	ldr	r0, [pc, #136]	; (8003a44 <HAL_UART_MspInit+0x164>)
 80039bc:	f002 f916 	bl	8005bec <HAL_GPIO_Init>
}
 80039c0:	e038      	b.n	8003a34 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <HAL_UART_MspInit+0x16c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d133      	bne.n	8003a34 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	6453      	str	r3, [r2, #68]	; 0x44
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_UART_MspInit+0x160>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a04:	23c0      	movs	r3, #192	; 0xc0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a14:	2308      	movs	r3, #8
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	480c      	ldr	r0, [pc, #48]	; (8003a50 <HAL_UART_MspInit+0x170>)
 8003a20:	f002 f8e4 	bl	8005bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2105      	movs	r1, #5
 8003a28:	2047      	movs	r0, #71	; 0x47
 8003a2a:	f002 f815 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a2e:	2047      	movs	r0, #71	; 0x47
 8003a30:	f002 f82e 	bl	8005a90 <HAL_NVIC_EnableIRQ>
}
 8003a34:	bf00      	nop
 8003a36:	3738      	adds	r7, #56	; 0x38
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40011000 	.word	0x40011000
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40004400 	.word	0x40004400
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	40020800 	.word	0x40020800

08003a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	201e      	movs	r0, #30
 8003a6a:	f001 fff5 	bl	8005a58 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8003a6e:	201e      	movs	r0, #30
 8003a70:	f002 f80e 	bl	8005a90 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <HAL_InitTick+0xa4>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_InitTick+0xa4>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_InitTick+0xa4>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a90:	f107 0210 	add.w	r2, r7, #16
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f005 fa1a 	bl	8008ed4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003aa0:	f005 f9f0 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_InitTick+0xa8>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_InitTick+0xac>)
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_InitTick+0xb0>)
 8003abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_InitTick+0xac>)
 8003ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ac4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_InitTick+0xac>)
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_InitTick+0xac>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_InitTick+0xac>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <HAL_InitTick+0xac>)
 8003ada:	f005 fa91 	bl	8009000 <HAL_TIM_Base_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003ae4:	4806      	ldr	r0, [pc, #24]	; (8003b00 <HAL_InitTick+0xac>)
 8003ae6:	f005 fab6 	bl	8009056 <HAL_TIM_Base_Start_IT>
 8003aea:	4603      	mov	r3, r0
 8003aec:	e000      	b.n	8003af0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	20005120 	.word	0x20005120
 8003b04:	40000800 	.word	0x40000800

08003b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b1a:	e7fe      	b.n	8003b1a <HardFault_Handler+0x4>

08003b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b20:	e7fe      	b.n	8003b20 <MemManage_Handler+0x4>

08003b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b26:	e7fe      	b.n	8003b26 <BusFault_Handler+0x4>

08003b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <UsageFault_Handler+0x4>

08003b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM1_CC_IRQHandler+0x10>)
 8003b42:	f005 fbef 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20004da0 	.word	0x20004da0

08003b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <TIM2_IRQHandler+0x10>)
 8003b56:	f005 fbe5 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20004e5c 	.word	0x20004e5c

08003b64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <TIM4_IRQHandler+0x10>)
 8003b6a:	f005 fbdb 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20005120 	.word	0x20005120

08003b78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <I2C1_EV_IRQHandler+0x10>)
 8003b7e:	f002 fe31 	bl	80067e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20004c04 	.word	0x20004c04

08003b8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <I2C1_ER_IRQHandler+0x10>)
 8003b92:	f002 ff8d 	bl	8006ab0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20004c04 	.word	0x20004c04

08003ba0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <TIM5_IRQHandler+0x10>)
 8003ba6:	f005 fbbd 	bl	8009324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20004cb4 	.word	0x20004cb4

08003bb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <USART6_IRQHandler+0x10>)
 8003bba:	f006 fded 	bl	800a798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20004de4 	.word	0x20004de4

08003bc8 <svm_compensate_rht>:
#define T_HI 70000
static const uint32_t AH_LUT_100RH[] = {1078,  2364,  4849,  9383,   17243,
                                        30264, 50983, 82785, 130048, 198277};
static const uint32_t T_STEP = (T_HI - T_LO) / (ARRAY_SIZE(AH_LUT_100RH) - 1);

static void svm_compensate_rht(int32_t *temperature, int32_t *humidity) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    *temperature = ((*temperature * 8225) >> 13) - 500;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	4413      	add	r3, r2
 8003bdc:	015b      	lsls	r3, r3, #5
 8003bde:	4413      	add	r3, r2
 8003be0:	135b      	asrs	r3, r3, #13
 8003be2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
    *humidity = (*humidity * 8397) >> 13;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f242 02cd 	movw	r2, #8397	; 0x20cd
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	135a      	asrs	r2, r3, #13
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	601a      	str	r2, [r3, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <sensirion_calc_absolute_humidity>:
/**
 * Convert relative humidity [%RH*1000] and temperature [mC] to
 * absolute humidity [mg/m^3]
 */
static uint32_t sensirion_calc_absolute_humidity(const int32_t *temperature,
                                                 const int32_t *humidity) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
    uint32_t t, i, rem, ret;

    if (*humidity <= 0)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dc01      	bgt.n	8003c1e <sensirion_calc_absolute_humidity+0x16>
        return 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e04d      	b.n	8003cba <sensirion_calc_absolute_humidity+0xb2>

    if (*temperature < T_LO)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <sensirion_calc_absolute_humidity+0xc0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	da02      	bge.n	8003c2e <sensirion_calc_absolute_humidity+0x26>
        t = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e005      	b.n	8003c3a <sensirion_calc_absolute_humidity+0x32>
    else
        t = (uint32_t)(*temperature - T_LO);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003c36:	3320      	adds	r3, #32
 8003c38:	617b      	str	r3, [r7, #20]

    i = t / T_STEP;
 8003c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    rem = t % T_STEP;
 8003c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c50:	fb02 f201 	mul.w	r2, r2, r1
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]

    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d902      	bls.n	8003c64 <sensirion_calc_absolute_humidity+0x5c>
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <sensirion_calc_absolute_humidity+0xc4>)
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e01f      	b.n	8003ca4 <sensirion_calc_absolute_humidity+0x9c>

    } else if (rem == 0) {
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <sensirion_calc_absolute_humidity+0x6e>
        ret = AH_LUT_100RH[i];
 8003c6a:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <sensirion_calc_absolute_humidity+0xc8>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e016      	b.n	8003ca4 <sensirion_calc_absolute_humidity+0x9c>

    } else {
        ret = (AH_LUT_100RH[i] +
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <sensirion_calc_absolute_humidity+0xc8>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
               ((AH_LUT_100RH[i + 1] - AH_LUT_100RH[i]) * rem / T_STEP));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	4913      	ldr	r1, [pc, #76]	; (8003cd0 <sensirion_calc_absolute_humidity+0xc8>)
 8003c84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003c88:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <sensirion_calc_absolute_humidity+0xc8>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c90:	1acb      	subs	r3, r1, r3
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	f242 7110 	movw	r1, #10000	; 0x2710
 8003c9c:	fbb3 f3f1 	udiv	r3, r3, r1
        ret = (AH_LUT_100RH[i] +
 8003ca0:	4413      	add	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    // Multiplication might overflow with a maximum of 3 digits
    // Trick: ((ret >> 3) * (uint32_t)(*humidity)) does never overflow
    // Now we only need to divide by 12500, as the tripple righ shift
    // divides by 8

    return ((ret >> 3) * (uint32_t)(*humidity)) / 12500;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <sensirion_calc_absolute_humidity+0xcc>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0a1b      	lsrs	r3, r3, #8
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	ffffb1e0 	.word	0xffffb1e0
 8003ccc:	00030685 	.word	0x00030685
 8003cd0:	0800e620 	.word	0x0800e620
 8003cd4:	14f8b589 	.word	0x14f8b589

08003cd8 <svm_set_humidity>:

static int16_t svm_set_humidity(const int32_t *temperature,
                                const int32_t *humidity) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    uint32_t absolute_humidity;

    absolute_humidity = sensirion_calc_absolute_humidity(temperature, humidity);
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff8f 	bl	8003c08 <sensirion_calc_absolute_humidity>
 8003cea:	60f8      	str	r0, [r7, #12]

    if (absolute_humidity == 0)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <svm_set_humidity+0x1e>
        absolute_humidity = 1; /* avoid disabling humidity compensation */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

    return sgp30_set_absolute_humidity(absolute_humidity);
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff f826 	bl	8002d48 <sgp30_set_absolute_humidity>
 8003cfc:	4603      	mov	r3, r0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <svm_measure_iaq_blocking_read>:
//const char *svm_get_driver_version() {
//    return SGP_DRV_VERSION_STR;
//}

int16_t svm_measure_iaq_blocking_read(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm,
                                      int32_t *temperature, int32_t *humidity) {
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	603b      	str	r3, [r7, #0]
    int16_t err;

    err = shtc1_measure_blocking_read(temperature, humidity);
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff f8a6 	bl	8002e68 <shtc1_measure_blocking_read>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8003d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <svm_measure_iaq_blocking_read+0x28>
        return err;
 8003d28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d2c:	e01e      	b.n	8003d6c <svm_measure_iaq_blocking_read+0x66>

    err = svm_set_humidity(temperature, humidity);
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffd1 	bl	8003cd8 <svm_set_humidity>
 8003d36:	4603      	mov	r3, r0
 8003d38:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8003d3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <svm_measure_iaq_blocking_read+0x42>
        return err;
 8003d42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d46:	e011      	b.n	8003d6c <svm_measure_iaq_blocking_read+0x66>

    svm_compensate_rht(temperature, humidity);
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff3c 	bl	8003bc8 <svm_compensate_rht>

    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7fe ffdb 	bl	8002d0e <sgp30_measure_iaq_blocking_read>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 8003d5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <svm_measure_iaq_blocking_read+0x64>
        return err;
 8003d64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d68:	e000      	b.n	8003d6c <svm_measure_iaq_blocking_read+0x66>

    return STATUS_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <svm_probe>:
        return err;

    return STATUS_OK;
}

int16_t svm_probe() {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
    int16_t err;

    err = shtc1_probe();
 8003d7a:	f7ff f8ca 	bl	8002f12 <shtc1_probe>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
    if (err != STATUS_OK){
 8003d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <svm_probe+0x22>
    	printf("shtc1 failed\r\n");
 8003d8a:	4806      	ldr	r0, [pc, #24]	; (8003da4 <svm_probe+0x30>)
 8003d8c:	f008 fe86 	bl	800ca9c <puts>
        return err;
 8003d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d94:	e002      	b.n	8003d9c <svm_probe+0x28>
    }
    return sgp30_probe();
 8003d96:	f7ff f83d 	bl	8002e14 <sgp30_probe>
 8003d9a:	4603      	mov	r3, r0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800e538 	.word	0x0800e538

08003da8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e00a      	b.n	8003dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dba:	f3af 8000 	nop.w
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60ba      	str	r2, [r7, #8]
 8003dc6:	b2ca      	uxtb	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	dbf0      	blt.n	8003dba <_read+0x12>
	}

return len;
 8003dd8:	687b      	ldr	r3, [r7, #4]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e009      	b.n	8003e08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd f99f 	bl	8001140 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	3301      	adds	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dbf1      	blt.n	8003df4 <_write+0x12>
	}
	return len;
 8003e10:	687b      	ldr	r3, [r7, #4]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_close>:

int _close(int file)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	return -1;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e42:	605a      	str	r2, [r3, #4]
	return 0;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <_isatty>:

int _isatty(int file)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
	return 1;
 8003e5a:	2301      	movs	r3, #1
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <_sbrk+0x50>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_sbrk+0x16>
		heap_end = &end;
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <_sbrk+0x50>)
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <_sbrk+0x54>)
 8003e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <_sbrk+0x50>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <_sbrk+0x50>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	466a      	mov	r2, sp
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d907      	bls.n	8003ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003eae:	f008 fd43 	bl	800c938 <__errno>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	e006      	b.n	8003ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <_sbrk+0x50>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a03      	ldr	r2, [pc, #12]	; (8003ed4 <_sbrk+0x50>)
 8003ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000648 	.word	0x20000648
 8003ed8:	20005168 	.word	0x20005168

08003edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <SystemInit+0x28>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <SystemInit+0x28>)
 8003ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <SystemInit+0x28>)
 8003ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <getNextPacketId+0x1c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	e000      	b.n	8003f4a <getNextPacketId+0x1e>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8003f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	617b      	str	r3, [r7, #20]
        sent = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
    while ((sent < length) && (!TimerIsExpired(timer)))
 8003f74:	e01a      	b.n	8003fac <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f7c:	689c      	ldr	r4, [r3, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	18d6      	adds	r6, r2, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fc fd3d 	bl	8000a0c <TimerLeftMS>
 8003f92:	4603      	mov	r3, r0
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	4631      	mov	r1, r6
 8003f98:	4628      	mov	r0, r5
 8003f9a:	47a0      	blx	r4
 8003f9c:	6178      	str	r0, [r7, #20]
        if (rc < 0){  // there was an error writing the data
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db0e      	blt.n	8003fc2 <sendPacket+0x64>
            break;
        }

        sent += rc;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	4413      	add	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    while ((sent < length) && (!TimerIsExpired(timer)))
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	da07      	bge.n	8003fc4 <sendPacket+0x66>
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc fcf1 	bl	800099c <TimerIsExpired>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0da      	beq.n	8003f76 <sendPacket+0x18>
 8003fc0:	e000      	b.n	8003fc4 <sendPacket+0x66>
            break;
 8003fc2:	bf00      	nop
    }

    if (sent == length)
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d10b      	bne.n	8003fe4 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fc fd05 	bl	80009e8 <TimerCountdown>
        rc = SUCCESS;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e002      	b.n	8003fea <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	617b      	str	r3, [r7, #20]
    return rc;
 8003fea:	697b      	ldr	r3, [r7, #20]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e009      	b.n	8004024 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3304      	adds	r3, #4
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3301      	adds	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b13      	cmp	r3, #19
 8004028:	ddf2      	ble.n	8004010 <MQTTClientInit+0x1c>
    c->command_timeout_ms = command_timeout_ms;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004040:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004046:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	c->next_packetid = 1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	33cc      	adds	r3, #204	; 0xcc
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fc86 	bl	8000978 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8004088:	2304      	movs	r3, #4
 800408a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	3301      	adds	r3, #1
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	6a3a      	ldr	r2, [r7, #32]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	dd03      	ble.n	80040ae <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	61bb      	str	r3, [r7, #24]
            goto exit;
 80040ac:	e023      	b.n	80040f6 <decodePacket+0x82>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80040b4:	685c      	ldr	r4, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80040bc:	f107 0117 	add.w	r1, r7, #23
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	47a0      	blx	r4
 80040c6:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d112      	bne.n	80040f4 <decodePacket+0x80>
            goto exit;
        *value += (i & 127) * multiplier;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	441a      	add	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	dbcf      	blt.n	8004092 <decodePacket+0x1e>
exit:
 80040f2:	e000      	b.n	80040f6 <decodePacket+0x82>
            goto exit;
 80040f4:	bf00      	nop
    return len;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	372c      	adds	r7, #44	; 0x2c
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8004100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
    int len = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
    int j;

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1){
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004122:	685c      	ldr	r4, [r3, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	695e      	ldr	r6, [r3, #20]
 800412e:	68b8      	ldr	r0, [r7, #8]
 8004130:	f7fc fc6c 	bl	8000a0c <TimerLeftMS>
 8004134:	4603      	mov	r3, r0
 8004136:	2201      	movs	r2, #1
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	47a0      	blx	r4
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d13d      	bne.n	80041c0 <readPacket+0xc0>
        goto exit;
    }
    len = 1;
 8004144:	2301      	movs	r3, #1
 8004146:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8004148:	68b8      	ldr	r0, [r7, #8]
 800414a:	f7fc fc5f 	bl	8000a0c <TimerLeftMS>
 800414e:	4602      	mov	r2, r0
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	4619      	mov	r1, r3
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff ff8c 	bl	8004074 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ff30 	bl	8004fcc <MQTTPacket_encode>
 800416c:	4602      	mov	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dd18      	ble.n	80041ac <readPacket+0xac>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004180:	685c      	ldr	r4, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	18d6      	adds	r6, r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	68b8      	ldr	r0, [r7, #8]
 8004196:	f7fc fc39 	bl	8000a0c <TimerLeftMS>
 800419a:	4603      	mov	r3, r0
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4631      	mov	r1, r6
 80041a0:	4628      	mov	r0, r5
 80041a2:	47a0      	blx	r4
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d10b      	bne.n	80041c4 <readPacket+0xc4>
        goto exit;
    header.byte = c->readbuf[0];
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80041b4:	7d3b      	ldrb	r3, [r7, #20]
 80041b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e002      	b.n	80041c6 <readPacket+0xc6>
        goto exit;
 80041c0:	bf00      	nop
 80041c2:	e000      	b.n	80041c6 <readPacket+0xc6>
        goto exit;
 80041c4:	bf00      	nop
exit:
    return rc;
 80041c6:	69fb      	ldr	r3, [r7, #28]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3724      	adds	r7, #36	; 0x24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
 80041f0:	e039      	b.n	8004266 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b2f      	cmp	r3, #47	; 0x2f
 80041f8:	d103      	bne.n	8004202 <isTopicMatched+0x32>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b2f      	cmp	r3, #47	; 0x2f
 8004200:	d13a      	bne.n	8004278 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b2b      	cmp	r3, #43	; 0x2b
 8004208:	d009      	beq.n	800421e <isTopicMatched+0x4e>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b23      	cmp	r3, #35	; 0x23
 8004210:	d005      	beq.n	800421e <isTopicMatched+0x4e>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d12e      	bne.n	800427c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b2b      	cmp	r3, #43	; 0x2b
 8004224:	d112      	bne.n	800424c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800422c:	e005      	b.n	800423a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d20b      	bcs.n	800425a <isTopicMatched+0x8a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b2f      	cmp	r3, #47	; 0x2f
 8004248:	d1f1      	bne.n	800422e <isTopicMatched+0x5e>
 800424a:	e006      	b.n	800425a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b23      	cmp	r3, #35	; 0x23
 8004252:	d102      	bne.n	800425a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
        curf++;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3301      	adds	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
        curn++;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3301      	adds	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <isTopicMatched+0xae>
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3bd      	bcc.n	80041f2 <isTopicMatched+0x22>
 8004276:	e002      	b.n	800427e <isTopicMatched+0xae>
            break;
 8004278:	bf00      	nop
 800427a:	e000      	b.n	800427e <isTopicMatched+0xae>
            break;
 800427c:	bf00      	nop
    };
    
    return (curn == curn_end) && (*curf == '\0');
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	d105      	bne.n	8004292 <isTopicMatched+0xc2>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <isTopicMatched+0xc2>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <isTopicMatched+0xc4>
 8004292:	2300      	movs	r3, #0
 8004294:	b2db      	uxtb	r3, r3
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08c      	sub	sp, #48	; 0x30
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b8:	e048      	b.n	800434c <deliverMessage+0xaa>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	3304      	adds	r3, #4
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03d      	beq.n	8004346 <deliverMessage+0xa4>
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	3304      	adds	r3, #4
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4619      	mov	r1, r3
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f001 f847 	bl	800536c <MQTTPacket_equals>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10c      	bne.n	80042fe <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	3304      	adds	r3, #4
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff6c 	bl	80041d0 <isTopicMatched>
 80042f8:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d023      	beq.n	8004346 <deliverMessage+0xa4>
        {
            if (c->messageHandlers[i].fp != NULL)
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	3304      	adds	r3, #4
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <deliverMessage+0xa4>
            {
                MessageData md;
                char *data = message->payload;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
				data[message->payloadlen]='\0';
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	4413      	add	r3, r2
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
                NewMessageData(&md, topicName, message);
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fded 	bl	8003f08 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	3304      	adds	r3, #4
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f107 021c 	add.w	r2, r7, #28
 800433e:	4610      	mov	r0, r2
 8004340:	4798      	blx	r3
                rc = SUCCESS;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	3301      	adds	r3, #1
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b13      	cmp	r3, #19
 8004350:	ddb3      	ble.n	80042ba <deliverMessage+0x18>
            }
        }

    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d114      	bne.n	8004384 <deliverMessage+0xe2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <deliverMessage+0xe2>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fdcb 	bl	8003f08 <NewMessageData>
        c->defaultMessageHandler(&md);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004378:	f107 0214 	add.w	r2, r7, #20
 800437c:	4610      	mov	r0, r2
 800437e:	4798      	blx	r3
        rc = SUCCESS;
 8004380:	2300      	movs	r3, #0
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
    }   
    
    return rc;
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004386:	4618      	mov	r0, r3
 8004388:	3730      	adds	r7, #48	; 0x30
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <keepalive>:


int keepalive(MQTTClient* c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295
 800439c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <keepalive+0x1c>
    {
        rc = SUCCESS;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
        goto exit;
 80043aa:	e036      	b.n	800441a <keepalive+0x8a>
    }

    if (TimerIsExpired(&c->ping_timer))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	33cc      	adds	r3, #204	; 0xcc
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc faf3 	bl	800099c <TimerIsExpired>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02d      	beq.n	8004418 <keepalive+0x88>
    {
        if (!c->ping_outstanding)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7f1b      	ldrb	r3, [r3, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d129      	bne.n	8004418 <keepalive+0x88>
        {
            Timer timer;
            TimerInit(&timer);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fad5 	bl	8000978 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc faf5 	bl	80009c6 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 fd24 	bl	8004e34 <MQTTSerialize_pingreq>
 80043ec:	61b8      	str	r0, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS){ // send the ping packet
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dd12      	ble.n	800441a <keepalive+0x8a>
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	461a      	mov	r2, r3
 80043fa:	69b9      	ldr	r1, [r7, #24]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fdae 	bl	8003f5e <sendPacket>
 8004402:	61f8      	str	r0, [r7, #28]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <keepalive+0x8a>
                c->ping_outstanding = 1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	771a      	strb	r2, [r3, #28]
                printf("send ping request\r\n");
 8004410:	4804      	ldr	r0, [pc, #16]	; (8004424 <keepalive+0x94>)
 8004412:	f008 fb43 	bl	800ca9c <puts>
 8004416:	e000      	b.n	800441a <keepalive+0x8a>
            }
        }
    }

exit:
 8004418:	bf00      	nop
    return rc;
 800441a:	69fb      	ldr	r3, [r7, #28]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	0800e548 	.word	0x0800e548

08004428 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	b095      	sub	sp, #84	; 0x54
 800442c:	af06      	add	r7, sp, #24
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe63 	bl	8004100 <readPacket>
 800443a:	4603      	mov	r3, r0
 800443c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    int len = 0,
 800443e:	2300      	movs	r3, #0
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
 8004442:	2300      	movs	r3, #0
 8004444:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8004446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004448:	3b02      	subs	r3, #2
 800444a:	2b0b      	cmp	r3, #11
 800444c:	f200 80c7 	bhi.w	80045de <cycle+0x1b6>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <cycle+0x30>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	080045df 	.word	0x080045df
 800445c:	08004489 	.word	0x08004489
 8004460:	080045df 	.word	0x080045df
 8004464:	08004559 	.word	0x08004559
 8004468:	080045df 	.word	0x080045df
 800446c:	080045df 	.word	0x080045df
 8004470:	080045df 	.word	0x080045df
 8004474:	080045df 	.word	0x080045df
 8004478:	080045df 	.word	0x080045df
 800447c:	080045df 	.word	0x080045df
 8004480:	080045df 	.word	0x080045df
 8004484:	080045cb 	.word	0x080045cb
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1){
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004490:	4616      	mov	r6, r2
 8004492:	f107 0210 	add.w	r2, r7, #16
 8004496:	1d15      	adds	r5, r2, #4
 8004498:	f107 0210 	add.w	r2, r7, #16
 800449c:	1c54      	adds	r4, r2, #1
 800449e:	f107 010c 	add.w	r1, r7, #12
 80044a2:	f107 0210 	add.w	r2, r7, #16
 80044a6:	1c90      	adds	r0, r2, #2
 80044a8:	9604      	str	r6, [sp, #16]
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	330c      	adds	r3, #12
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	3308      	adds	r3, #8
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	f107 0320 	add.w	r3, r7, #32
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	462b      	mov	r3, r5
 80044c4:	4622      	mov	r2, r4
 80044c6:	f000 fcc4 	bl	8004e52 <MQTTDeserialize_publish>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d003      	beq.n	80044d8 <cycle+0xb0>
            	printf("MQTTDeserialize_publish failed\r\n");
 80044d0:	4849      	ldr	r0, [pc, #292]	; (80045f8 <cycle+0x1d0>)
 80044d2:	f008 fae3 	bl	800ca9c <puts>
            	goto exit;
 80044d6:	e085      	b.n	80045e4 <cycle+0x1bc>
            }

            msg.qos = (enum QoS)intQoS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80044de:	f107 0210 	add.w	r2, r7, #16
 80044e2:	f107 0320 	add.w	r3, r7, #32
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff feda 	bl	80042a2 <deliverMessage>
            if (msg.qos != QOS0)
 80044ee:	7c3b      	ldrb	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d071      	beq.n	80045d8 <cycle+0x1b0>
            {
                if (msg.qos == QOS1)
 80044f4:	7c3b      	ldrb	r3, [r7, #16]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10c      	bne.n	8004514 <cycle+0xec>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6918      	ldr	r0, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4619      	mov	r1, r3
 8004504:	8abb      	ldrh	r3, [r7, #20]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2300      	movs	r3, #0
 800450a:	2204      	movs	r2, #4
 800450c:	f000 fffc 	bl	8005508 <MQTTSerialize_ack>
 8004510:	6378      	str	r0, [r7, #52]	; 0x34
 8004512:	e00e      	b.n	8004532 <cycle+0x10a>
                else if (msg.qos == QOS2)
 8004514:	7c3b      	ldrb	r3, [r7, #16]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d10b      	bne.n	8004532 <cycle+0x10a>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6918      	ldr	r0, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4619      	mov	r1, r3
 8004524:	8abb      	ldrh	r3, [r7, #20]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	2205      	movs	r2, #5
 800452c:	f000 ffec 	bl	8005508 <MQTTSerialize_ack>
 8004530:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	dc03      	bgt.n	8004540 <cycle+0x118>
                    rc = FAILURE;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	633b      	str	r3, [r7, #48]	; 0x30
 800453e:	e005      	b.n	800454c <cycle+0x124>
                else
                    rc = sendPacket(c, len, timer);
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fd0a 	bl	8003f5e <sendPacket>
 800454a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d141      	bne.n	80045d8 <cycle+0x1b0>
                    goto exit; // there was a problem
 8004554:	bf00      	nop
 8004556:	e045      	b.n	80045e4 <cycle+0x1bc>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695c      	ldr	r4, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f107 020a 	add.w	r2, r7, #10
 8004564:	f107 0109 	add.w	r1, r7, #9
 8004568:	f107 0008 	add.w	r0, r7, #8
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4623      	mov	r3, r4
 8004570:	f000 fce1 	bl	8004f36 <MQTTDeserialize_ack>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <cycle+0x15a>
                rc = FAILURE;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
 8004580:	e01e      	b.n	80045c0 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6918      	ldr	r0, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4619      	mov	r1, r3
 800458c:	897b      	ldrh	r3, [r7, #10]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	2206      	movs	r2, #6
 8004594:	f000 ffb8 	bl	8005508 <MQTTSerialize_ack>
 8004598:	6378      	str	r0, [r7, #52]	; 0x34
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	2b00      	cmp	r3, #0
 800459e:	dc03      	bgt.n	80045a8 <cycle+0x180>
                rc = FAILURE;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
 80045a6:	e00b      	b.n	80045c0 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fcd6 	bl	8003f5e <sendPacket>
 80045b2:	6338      	str	r0, [r7, #48]	; 0x30
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <cycle+0x198>
                rc = FAILURE; // there was a problem
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d109      	bne.n	80045dc <cycle+0x1b4>
                goto exit; // there was a problem
 80045c8:	e00c      	b.n	80045e4 <cycle+0x1bc>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
            printf("get ping response\r\n");
 80045d0:	480a      	ldr	r0, [pc, #40]	; (80045fc <cycle+0x1d4>)
 80045d2:	f008 fa63 	bl	800ca9c <puts>
            break;
 80045d6:	e002      	b.n	80045de <cycle+0x1b6>
            break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <cycle+0x1b6>
            break;
 80045dc:	bf00      	nop
    }
    keepalive(c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fed6 	bl	8004390 <keepalive>
exit:
    if (rc == SUCCESS)
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <cycle+0x1c6>
        rc = packet_type;
 80045ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	373c      	adds	r7, #60	; 0x3c
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	0800e55c 	.word	0x0800e55c
 80045fc:	0800e57c 	.word	0x0800e57c

08004600 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc f9b0 	bl	8000978 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc f9d0 	bl	80009c6 <TimerCountdownMS>
	do
    {
        if (cycle(c, &timer) == FAILURE)
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fefb 	bl	8004428 <cycle>
 8004632:	4603      	mov	r3, r0
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d103      	bne.n	8004642 <MQTTYield+0x42>
        {
            rc = FAILURE;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	617b      	str	r3, [r7, #20]
            break;
 8004640:	e007      	b.n	8004652 <MQTTYield+0x52>
        }
	} while (!TimerIsExpired(&timer));
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc f9a8 	bl	800099c <TimerIsExpired>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0e9      	beq.n	8004626 <MQTTYield+0x26>
        
    return rc;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc f994 	bl	800099c <TimerIsExpired>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <waitfor+0x32>
            break; // we timed out
        //HAL_Delay(250);
    }
    while ((rc = cycle(c, timer)) != packet_type);  
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fed3 	bl	8004428 <cycle>
 8004682:	6178      	str	r0, [r7, #20]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1f0      	bne.n	800466e <waitfor+0x12>
 800468c:	e000      	b.n	8004690 <waitfor+0x34>
            break; // we timed out
 800468e:	bf00      	nop

    return rc;
 8004690:	697b      	ldr	r3, [r7, #20]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b09e      	sub	sp, #120	; 0x78
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295
 80046aa:	677b      	str	r3, [r7, #116]	; 0x74
    int i;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80046ac:	4a3d      	ldr	r2, [pc, #244]	; (80047a4 <MQTTConnect+0x108>)
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	4611      	mov	r1, r2
 80046b4:	2258      	movs	r2, #88	; 0x58
 80046b6:	4618      	mov	r0, r3
 80046b8:	f008 f968 	bl	800c98c <memcpy>
    int len = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15d      	bne.n	8004784 <MQTTConnect+0xe8>
		goto exit;
    
    TimerInit(&connect_timer);
 80046c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fc f953 	bl	8000978 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fc f972 	bl	80009c6 <TimerCountdownMS>

    if (options == 0)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	8b1b      	ldrh	r3, [r3, #24]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fc f96f 	bl	80009e8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0){
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6918      	ldr	r0, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	f000 fa11 	bl	8004b3c <MQTTSerialize_connect>
 800471a:	6738      	str	r0, [r7, #112]	; 0x70
 800471c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800471e:	2b00      	cmp	r3, #0
 8004720:	dd32      	ble.n	8004788 <MQTTConnect+0xec>
    	goto exit;
    }

    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
 8004722:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004726:	461a      	mov	r2, r3
 8004728:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fc17 	bl	8003f5e <sendPacket>
 8004730:	6778      	str	r0, [r7, #116]	; 0x74
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	2b00      	cmp	r3, #0
 8004736:	d129      	bne.n	800478c <MQTTConnect+0xf0>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8004738:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800473c:	461a      	mov	r2, r3
 800473e:	2102      	movs	r1, #2
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff8b 	bl	800465c <waitfor>
 8004746:	4603      	mov	r3, r0
 8004748:	2b02      	cmp	r3, #2
 800474a:	d117      	bne.n	800477c <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800474c:	23ff      	movs	r3, #255	; 0xff
 800474e:	72fb      	strb	r3, [r7, #11]
        unsigned char sessionPresent = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	72bb      	strb	r3, [r7, #10]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f107 010b 	add.w	r1, r7, #11
 8004760:	f107 000a 	add.w	r0, r7, #10
 8004764:	f000 fad8 	bl	8004d18 <MQTTDeserialize_connack>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <MQTTConnect+0xd8>
            rc = connack_rc;
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	677b      	str	r3, [r7, #116]	; 0x74
 8004772:	e00c      	b.n	800478e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	677b      	str	r3, [r7, #116]	; 0x74
 800477a:	e008      	b.n	800478e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	677b      	str	r3, [r7, #116]	; 0x74
 8004782:	e004      	b.n	800478e <MQTTConnect+0xf2>
		goto exit;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <MQTTConnect+0xf2>
    	goto exit;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800478c:	bf00      	nop
    
exit:
    if (rc == SUCCESS)
 800478e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800479a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800479c:	4618      	mov	r0, r3
 800479e:	3778      	adds	r7, #120	; 0x78
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	0800e590 	.word	0x0800e590

080047a8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
 80047a8:	b5b0      	push	{r4, r5, r7, lr}
 80047aa:	b094      	sub	sp, #80	; 0x50
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;  
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected){
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <MQTTSubscribe+0x3a>
		printf("not connnect\r\n");
 80047da:	4847      	ldr	r0, [pc, #284]	; (80048f8 <MQTTSubscribe+0x150>)
 80047dc:	f008 f95e 	bl	800ca9c <puts>
		goto exit;
 80047e0:	e084      	b.n	80048ec <MQTTSubscribe+0x144>
	}

    TimerInit(&timer);
 80047e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc f8c6 	bl	8000978 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc f8e5 	bl	80009c6 <TimerCountdownMS>
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691c      	ldr	r4, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	461d      	mov	r5, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fb90 	bl	8003f2c <getNextPacketId>
 800480c:	4603      	mov	r3, r0
 800480e:	b29a      	uxth	r2, r3
 8004810:	1dfb      	adds	r3, r7, #7
 8004812:	9302      	str	r3, [sp, #8]
 8004814:	f107 031c 	add.w	r3, r7, #28
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2301      	movs	r3, #1
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	2200      	movs	r2, #0
 8004822:	4629      	mov	r1, r5
 8004824:	4620      	mov	r0, r4
 8004826:	f000 fee3 	bl	80055f0 <MQTTSerialize_subscribe>
 800482a:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482e:	2b00      	cmp	r3, #0
 8004830:	dd59      	ble.n	80048e6 <MQTTSubscribe+0x13e>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
 8004832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004836:	461a      	mov	r2, r3
 8004838:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fb8f 	bl	8003f5e <sendPacket>
 8004840:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d150      	bne.n	80048ea <MQTTSubscribe+0x142>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
 8004848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800484c:	461a      	mov	r2, r3
 800484e:	2109      	movs	r1, #9
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff03 	bl	800465c <waitfor>
 8004856:	4603      	mov	r3, r0
 8004858:	2b09      	cmp	r3, #9
 800485a:	d140      	bne.n	80048de <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	4614      	mov	r4, r2
 8004870:	f107 0114 	add.w	r1, r7, #20
 8004874:	f107 0218 	add.w	r2, r7, #24
 8004878:	f107 0012 	add.w	r0, r7, #18
 800487c:	9401      	str	r4, [sp, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	460b      	mov	r3, r1
 8004882:	2101      	movs	r1, #1
 8004884:	f000 ff31 	bl	80056ea <MQTTDeserialize_suback>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d029      	beq.n	80048ec <MQTTSubscribe+0x144>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004898:	2300      	movs	r3, #0
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
 800489c:	e01b      	b.n	80048d6 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	3304      	adds	r3, #4
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d110      	bne.n	80048d0 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	3304      	adds	r3, #4
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	3304      	adds	r3, #4
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	609a      	str	r2, [r3, #8]
                    rc = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80048ce:	e00d      	b.n	80048ec <MQTTSubscribe+0x144>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	3301      	adds	r3, #1
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b13      	cmp	r3, #19
 80048da:	dde0      	ble.n	800489e <MQTTSubscribe+0xf6>
 80048dc:	e006      	b.n	80048ec <MQTTSubscribe+0x144>
                }
            }
        }
    }
    else 
        rc = FAILURE;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	e002      	b.n	80048ec <MQTTSubscribe+0x144>
        goto exit;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <MQTTSubscribe+0x144>
        goto exit;             // there was a problem
 80048ea:	bf00      	nop
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3740      	adds	r7, #64	; 0x40
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	0800e5e8 	.word	0x0800e5e8

080048fc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	b097      	sub	sp, #92	; 0x5c
 8004900:	af08      	add	r7, sp, #32
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicName;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61bb      	str	r3, [r7, #24]
    int len = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 809b 	beq.w	8004a62 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800492c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc f821 	bl	8000978 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7fc f840 	bl	80009c6 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d003      	beq.n	8004956 <MQTTPublish+0x5a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d106      	bne.n	8004964 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fae8 	bl	8003f2c <getNextPacketId>
 800495c:	4603      	mov	r3, r0
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	469c      	mov	ip, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	469e      	mov	lr, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	785d      	ldrb	r5, [r3, #1]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 8004986:	9206      	str	r2, [sp, #24]
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	ac02      	add	r4, sp, #8
 800498c:	f107 0318 	add.w	r3, r7, #24
 8004990:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004998:	9601      	str	r6, [sp, #4]
 800499a:	9500      	str	r5, [sp, #0]
 800499c:	4673      	mov	r3, lr
 800499e:	2200      	movs	r2, #0
 80049a0:	4661      	mov	r1, ip
 80049a2:	6838      	ldr	r0, [r7, #0]
 80049a4:	f000 fd39 	bl	800541a <MQTTSerialize_publish>
 80049a8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd5a      	ble.n	8004a66 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
 80049b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b4:	461a      	mov	r2, r3
 80049b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fad0 	bl	8003f5e <sendPacket>
 80049be:	6378      	str	r0, [r7, #52]	; 0x34
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d151      	bne.n	8004a6a <MQTTPublish+0x16e>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d122      	bne.n	8004a14 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80049ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d2:	461a      	mov	r2, r3
 80049d4:	2104      	movs	r1, #4
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fe40 	bl	800465c <waitfor>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d114      	bne.n	8004a0c <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	695c      	ldr	r4, [r3, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f107 0216 	add.w	r2, r7, #22
 80049ee:	f107 0115 	add.w	r1, r7, #21
 80049f2:	f107 0014 	add.w	r0, r7, #20
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4623      	mov	r3, r4
 80049fa:	f000 fa9c 	bl	8004f36 <MQTTDeserialize_ack>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d035      	beq.n	8004a70 <MQTTPublish+0x174>
                rc = FAILURE;
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	e031      	b.n	8004a70 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	e02d      	b.n	8004a70 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d128      	bne.n	8004a6e <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8004a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a20:	461a      	mov	r2, r3
 8004a22:	2107      	movs	r1, #7
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fe19 	bl	800465c <waitfor>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b07      	cmp	r3, #7
 8004a2e:	d114      	bne.n	8004a5a <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	695c      	ldr	r4, [r3, #20]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f107 0212 	add.w	r2, r7, #18
 8004a3c:	f107 0111 	add.w	r1, r7, #17
 8004a40:	f107 0010 	add.w	r0, r7, #16
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	4623      	mov	r3, r4
 8004a48:	f000 fa75 	bl	8004f36 <MQTTDeserialize_ack>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d00e      	beq.n	8004a70 <MQTTPublish+0x174>
                rc = FAILURE;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
 8004a58:	e00a      	b.n	8004a70 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a60:	e006      	b.n	8004a70 <MQTTPublish+0x174>
		goto exit;
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <MQTTPublish+0x174>
        goto exit;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <MQTTPublish+0x174>
    }
    
exit:
 8004a6e:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	373c      	adds	r7, #60	; 0x3c
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a7a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8004a7a:	b590      	push	{r4, r7, lr}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
	int len = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7a1b      	ldrb	r3, [r3, #8]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d102      	bne.n	8004a94 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8004a8e:	230c      	movs	r3, #12
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e005      	b.n	8004aa0 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7a1b      	ldrb	r3, [r3, #8]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d101      	bne.n	8004aa0 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8004a9c:	230a      	movs	r3, #10
 8004a9e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aa8:	f000 fc47 	bl	800533a <MQTTstrlen>
 8004aac:	4603      	mov	r3, r0
 8004aae:	3302      	adds	r3, #2
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7edb      	ldrb	r3, [r3, #27]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3324      	adds	r3, #36	; 0x24
 8004ac2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ac6:	f000 fc38 	bl	800533a <MQTTstrlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	1c9c      	adds	r4, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3330      	adds	r3, #48	; 0x30
 8004ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ad6:	f000 fc30 	bl	800533a <MQTTstrlen>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4423      	add	r3, r4
 8004ade:	3302      	adds	r3, #2
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <MQTTSerialize_connectLength+0x7c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3340      	adds	r3, #64	; 0x40
 8004afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004afe:	f000 fc1c 	bl	800533a <MQTTstrlen>
 8004b02:	4603      	mov	r3, r0
 8004b04:	3302      	adds	r3, #2
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d103      	bne.n	8004b1c <MQTTSerialize_connectLength+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	334c      	adds	r3, #76	; 0x4c
 8004b20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b24:	f000 fc09 	bl	800533a <MQTTstrlen>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff8b 	bl	8004a7a <MQTTSerialize_connectLength>
 8004b64:	6238      	str	r0, [r7, #32]
 8004b66:	6a38      	ldr	r0, [r7, #32]
 8004b68:	f000 fa9c 	bl	80050a4 <MQTTPacket_len>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4293      	cmp	r3, r2
 8004b72:	da03      	bge.n	8004b7c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004b74:	f06f 0301 	mvn.w	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8004b7a:	e0c3      	b.n	8004d04 <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8004b80:	7e3b      	ldrb	r3, [r7, #24]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f362 1307 	bfi	r3, r2, #4, #4
 8004b88:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004b8a:	7e3a      	ldrb	r2, [r7, #24]
 8004b8c:	f107 031c 	add.w	r3, r7, #28
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb15 	bl	80051c2 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	6a39      	ldr	r1, [r7, #32]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa15 	bl	8004fcc <MQTTPacket_encode>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7a1b      	ldrb	r3, [r3, #8]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d10c      	bne.n	8004bcc <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	4956      	ldr	r1, [pc, #344]	; (8004d10 <MQTTSerialize_connect+0x1d4>)
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fb40 	bl	800523e <writeCString>
		writeChar(&ptr, (char) 4);
 8004bbe:	f107 031c 	add.w	r3, r7, #28
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fafc 	bl	80051c2 <writeChar>
 8004bca:	e00b      	b.n	8004be4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8004bcc:	f107 031c 	add.w	r3, r7, #28
 8004bd0:	4950      	ldr	r1, [pc, #320]	; (8004d14 <MQTTSerialize_connect+0x1d8>)
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb33 	bl	800523e <writeCString>
		writeChar(&ptr, (char) 3);
 8004bd8:	f107 031c 	add.w	r3, r7, #28
 8004bdc:	2103      	movs	r1, #3
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 faef 	bl	80051c2 <writeChar>
	}

	flags.all = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	7e9b      	ldrb	r3, [r3, #26]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	7d3b      	ldrb	r3, [r7, #20]
 8004bf4:	f362 0341 	bfi	r3, r2, #1, #1
 8004bf8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7edb      	ldrb	r3, [r3, #27]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	7d3b      	ldrb	r3, [r7, #20]
 8004c0a:	f362 0382 	bfi	r3, r2, #2, #1
 8004c0e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8004c10:	7d3b      	ldrb	r3, [r7, #20]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	7d3b      	ldrb	r3, [r7, #20]
 8004c2a:	f362 03c4 	bfi	r3, r2, #3, #2
 8004c2e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	7d3b      	ldrb	r3, [r7, #20]
 8004c3e:	f362 1345 	bfi	r3, r2, #5, #1
 8004c42:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <MQTTSerialize_connect+0x118>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8004c54:	7d3b      	ldrb	r3, [r7, #20]
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <MQTTSerialize_connect+0x130>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8004c6c:	7d3b      	ldrb	r3, [r7, #20]
 8004c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c72:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8004c74:	7d3a      	ldrb	r2, [r7, #20]
 8004c76:	f107 031c 	add.w	r3, r7, #28
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 faa0 	bl	80051c2 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8b1b      	ldrh	r3, [r3, #24]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f107 031c 	add.w	r3, r7, #28
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 faac 	bl	80051ec <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f107 001c 	add.w	r0, r7, #28
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c9e:	f000 faed 	bl	800527c <writeMQTTString>
	if (options->willFlag)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7edb      	ldrb	r3, [r3, #27]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f107 001c 	add.w	r0, r7, #28
 8004cb0:	3324      	adds	r3, #36	; 0x24
 8004cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb4:	f000 fae2 	bl	800527c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f107 001c 	add.w	r0, r7, #28
 8004cbe:	3330      	adds	r3, #48	; 0x30
 8004cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cc2:	f000 fadb 	bl	800527c <writeMQTTString>
	}
	if (flags.bits.username)
 8004cc6:	7d3b      	ldrb	r3, [r7, #20]
 8004cc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f107 001c 	add.w	r0, r7, #28
 8004cd8:	3340      	adds	r3, #64	; 0x40
 8004cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cdc:	f000 face 	bl	800527c <writeMQTTString>
	if (flags.bits.password)
 8004ce0:	7d3b      	ldrb	r3, [r7, #20]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f107 001c 	add.w	r0, r7, #28
 8004cf2:	334c      	adds	r3, #76	; 0x4c
 8004cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cf6:	f000 fac1 	bl	800527c <writeMQTTString>

	rc = ptr - buf;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3728      	adds	r7, #40	; 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	0800e5f8 	.word	0x0800e5f8
 8004d14:	0800e600 	.word	0x0800e600

08004d18 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004d3a:	f107 0318 	add.w	r3, r7, #24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa2b 	bl	800519a <readChar>
 8004d44:	4603      	mov	r3, r0
 8004d46:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK){
 8004d48:	7f3b      	ldrb	r3, [r7, #28]
 8004d4a:	f023 030f 	bic.w	r3, r3, #15
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d12e      	bne.n	8004db2 <MQTTDeserialize_connack+0x9a>
		goto exit;
	}

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f107 0214 	add.w	r2, r7, #20
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f9eb 	bl	8005138 <MQTTPacket_decodeBuf>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	dd1b      	ble.n	8004db6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa09 	bl	800519a <readChar>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8004d8c:	7c3b      	ldrb	r3, [r7, #16]
 8004d8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8004d9a:	f107 0318 	add.w	r3, r7, #24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f9fb 	bl	800519a <readChar>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
 8004db0:	e002      	b.n	8004db8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004db6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	; 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	dc03      	bgt.n	8004dec <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004de4:	f06f 0301 	mvn.w	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004dea:	e01e      	b.n	8004e2a <MQTTSerialize_zero+0x68>
	}
	header.byte = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	7e3b      	ldrb	r3, [r7, #24]
 8004dfa:	f362 1307 	bfi	r3, r2, #4, #4
 8004dfe:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004e00:	7e3a      	ldrb	r2, [r7, #24]
 8004e02:	f107 0314 	add.w	r3, r7, #20
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f9da 	bl	80051c2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f8da 	bl	8004fcc <MQTTPacket_encode>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8004e3e:	220c      	movs	r2, #12
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ffbd 	bl	8004dc2 <MQTTSerialize_zero>
 8004e48:	4603      	mov	r3, r0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b08a      	sub	sp, #40	; 0x28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004e74:	f107 0318 	add.w	r3, r7, #24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f98e 	bl	800519a <readChar>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8004e82:	7f3b      	ldrb	r3, [r7, #28]
 8004e84:	f023 030f 	bic.w	r3, r3, #15
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	d14b      	bne.n	8004f26 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8004e8e:	7f3b      	ldrb	r3, [r7, #28]
 8004e90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8004e9c:	7f3b      	ldrb	r3, [r7, #28]
 8004e9e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8004eaa:	7f3b      	ldrb	r3, [r7, #28]
 8004eac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f107 0214 	add.w	r2, r7, #20
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f939 	bl	8005138 <MQTTPacket_decodeBuf>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004ed8:	f107 0318 	add.w	r3, r7, #24
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee2:	f000 f9f9 	bl	80052d8 <readMQTTLenString>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	db19      	blt.n	8004f2a <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dd08      	ble.n	8004f10 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8004efe:	f107 0318 	add.w	r3, r7, #24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f92e 	bl	8005164 <readInt>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	1a9a      	subs	r2, r3, r2
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	601a      	str	r2, [r3, #0]
	rc = 1;
 8004f20:	2301      	movs	r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	e002      	b.n	8004f2c <MQTTDeserialize_publish+0xda>
		goto exit;
 8004f26:	bf00      	nop
 8004f28:	e000      	b.n	8004f2c <MQTTDeserialize_publish+0xda>
exit:
 8004f2a:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b08a      	sub	sp, #40	; 0x28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004f54:	f107 0318 	add.w	r3, r7, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f91e 	bl	800519a <readChar>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8004f62:	7f3b      	ldrb	r3, [r7, #28]
 8004f64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8004f70:	7f3b      	ldrb	r3, [r7, #28]
 8004f72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f107 0214 	add.w	r2, r7, #20
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f8d6 	bl	8005138 <MQTTPacket_decodeBuf>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	dd0b      	ble.n	8004fc0 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8004fa8:	f107 0318 	add.w	r3, r7, #24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f8d9 	bl	8005164 <readInt>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbe:	e000      	b.n	8004fc2 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8004fc0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3728      	adds	r7, #40	; 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	425a      	negs	r2, r3
 8004fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fe6:	bf58      	it	pl
 8004fe8:	4253      	negpl	r3, r2
 8004fea:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da00      	bge.n	8004ff4 <MQTTPacket_encode+0x28>
 8004ff2:	337f      	adds	r3, #127	; 0x7f
 8004ff4:	11db      	asrs	r3, r3, #7
 8004ff6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	dd03      	ble.n	8005006 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005004:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	60fa      	str	r2, [r7, #12]
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	7afa      	ldrb	r2, [r7, #11]
 8005014:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	dcde      	bgt.n	8004fda <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800501c:	68fb      	ldr	r3, [r7, #12]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8005042:	f04f 33ff 	mov.w	r3, #4294967295
 8005046:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b04      	cmp	r3, #4
 8005052:	dd03      	ble.n	800505c <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	60fb      	str	r3, [r7, #12]
			goto exit;
 800505a:	e01d      	b.n	8005098 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800505c:	f107 020b 	add.w	r2, r7, #11
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2101      	movs	r1, #1
 8005064:	4610      	mov	r0, r2
 8005066:	4798      	blx	r3
 8005068:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d112      	bne.n	8005096 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	7afb      	ldrb	r3, [r7, #11]
 8005076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	441a      	add	r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	01db      	lsls	r3, r3, #7
 800508a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800508c:	7afb      	ldrb	r3, [r7, #11]
 800508e:	b25b      	sxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	dbd6      	blt.n	8005042 <MQTTPacket_decode+0x18>
exit:
 8005094:	e000      	b.n	8005098 <MQTTPacket_decode+0x6e>
			goto exit;
 8005096:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8005098:	693b      	ldr	r3, [r7, #16]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b7f      	cmp	r3, #127	; 0x7f
 80050b6:	dc03      	bgt.n	80050c0 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3301      	adds	r3, #1
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e012      	b.n	80050e6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c6:	da03      	bge.n	80050d0 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3302      	adds	r3, #2
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	e00a      	b.n	80050e6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <MQTTPacket_len+0x50>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	dc03      	bgt.n	80050e0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3303      	adds	r3, #3
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e002      	b.n	80050e6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	607b      	str	r3, [r7, #4]
	return rem_len;
 80050e6:	687b      	ldr	r3, [r7, #4]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	001ffffe 	.word	0x001ffffe

080050f8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e00a      	b.n	800511e <bufchar+0x26>
		*c = *bufptr++;
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <bufchar+0x3c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	4909      	ldr	r1, [pc, #36]	; (8005134 <bufchar+0x3c>)
 8005110:	600a      	str	r2, [r1, #0]
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	dbf0      	blt.n	8005108 <bufchar+0x10>
	return count;
 8005126:	683b      	ldr	r3, [r7, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	2000064c 	.word	0x2000064c

08005138 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8005142:	4a06      	ldr	r2, [pc, #24]	; (800515c <MQTTPacket_decodeBuf+0x24>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	4805      	ldr	r0, [pc, #20]	; (8005160 <MQTTPacket_decodeBuf+0x28>)
 800514c:	f7ff ff6d 	bl	800502a <MQTTPacket_decode>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2000064c 	.word	0x2000064c
 8005160:	080050f9 	.word	0x080050f9

08005164 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	3201      	adds	r2, #1
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	4413      	add	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
	return len;
 800518c:	68bb      	ldr	r3, [r7, #8]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
	return c;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da00      	bge.n	80051fe <writeInt+0x12>
 80051fc:	33ff      	adds	r3, #255	; 0xff
 80051fe:	121b      	asrs	r3, r3, #8
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	425a      	negs	r2, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	bf58      	it	pl
 800521e:	4253      	negpl	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8005248:	6838      	ldr	r0, [r7, #0]
 800524a:	f7fa ffd3 	bl	80001f4 <strlen>
 800524e:	4603      	mov	r3, r0
 8005250:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ffc9 	bl	80051ec <writeInt>
	memcpy(*pptr, string, len);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f007 fb92 	bl	800c98c <memcpy>
	*pptr += len;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	4638      	mov	r0, r7
 8005286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd12      	ble.n	80052b6 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ffa9 	bl	80051ec <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f007 fb72 	bl	800c98c <memcpy>
		*pptr += mqttstring.lenstring.len;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80052b4:	e00c      	b.n	80052d0 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff ffbc 	bl	800523e <writeCString>
}
 80052c6:	e003      	b.n	80052d0 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80052c8:	2100      	movs	r1, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff ff8e 	bl	80051ec <writeInt>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	dd1a      	ble.n	800532a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80052f4:	68b8      	ldr	r0, [r7, #8]
 80052f6:	f7ff ff35 	bl	8005164 <readInt>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	4413      	add	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d30c      	bcc.n	800532a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	6852      	ldr	r2, [r2, #4]
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	601a      	str	r2, [r3, #0]
			rc = 1;
 8005326:	2301      	movs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8005330:	697b      	ldr	r3, [r7, #20]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fa ff4e 	bl	80001f4 <strlen>
 8005358:	4603      	mov	r3, r0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e001      	b.n	8005362 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	617b      	str	r3, [r7, #20]
	return rc;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
		blen = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7fa ff2f 	bl	80001f4 <strlen>
 8005396:	4603      	mov	r3, r0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e005      	b.n	80053a8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	f7fa ff23 	bl	80001f4 <strlen>
 80053ae:	4603      	mov	r3, r0
 80053b0:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d10a      	bne.n	80053d0 <MQTTPacket_equals+0x64>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	461a      	mov	r2, r3
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6938      	ldr	r0, [r7, #16]
 80053c2:	f007 fba0 	bl	800cb06 <strncmp>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <MQTTPacket_equals+0x64>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <MQTTPacket_equals+0x66>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	4638      	mov	r0, r7
 80053e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80053ec:	463b      	mov	r3, r7
 80053ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053f2:	f7ff ffa2 	bl	800533a <MQTTstrlen>
 80053f6:	4603      	mov	r3, r0
 80053f8:	1c9a      	adds	r2, r3, #2
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	4413      	add	r3, r2
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd02      	ble.n	8005410 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	3302      	adds	r3, #2
 800540e:	617b      	str	r3, [r7, #20]
	return len;
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b08a      	sub	sp, #40	; 0x28
 800541e:	af02      	add	r7, sp, #8
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800543a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005444:	6838      	ldr	r0, [r7, #0]
 8005446:	f7ff ffc8 	bl	80053da <MQTTSerialize_publishLength>
 800544a:	61b8      	str	r0, [r7, #24]
 800544c:	69b8      	ldr	r0, [r7, #24]
 800544e:	f7ff fe29 	bl	80050a4 <MQTTPacket_len>
 8005452:	4602      	mov	r2, r0
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4293      	cmp	r3, r2
 8005458:	da03      	bge.n	8005462 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800545a:	f06f 0301 	mvn.w	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8005460:	e04d      	b.n	80054fe <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8005462:	7c3b      	ldrb	r3, [r7, #16]
 8005464:	2203      	movs	r2, #3
 8005466:	f362 1307 	bfi	r3, r2, #4, #4
 800546a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	7c3b      	ldrb	r3, [r7, #16]
 8005476:	f362 03c3 	bfi	r3, r2, #3, #1
 800547a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	b2da      	uxtb	r2, r3
 8005484:	7c3b      	ldrb	r3, [r7, #16]
 8005486:	f362 0342 	bfi	r3, r2, #1, #2
 800548a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800548c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	b2da      	uxtb	r2, r3
 8005496:	7c3b      	ldrb	r3, [r7, #16]
 8005498:	f362 0300 	bfi	r3, r2, #0, #1
 800549c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800549e:	7c3a      	ldrb	r2, [r7, #16]
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fe8b 	bl	80051c2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	69b9      	ldr	r1, [r7, #24]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fd8b 	bl	8004fcc <MQTTPacket_encode>
 80054b6:	4602      	mov	r2, r0
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80054be:	f107 0014 	add.w	r0, r7, #20
 80054c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c8:	f7ff fed8 	bl	800527c <writeMQTTString>

	if (qos > 0)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dd06      	ble.n	80054e0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80054d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fe86 	bl	80051ec <writeInt>

	memcpy(ptr, payload, payloadlen);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054e6:	4618      	mov	r0, r3
 80054e8:	f007 fa50 	bl	800c98c <memcpy>
	ptr += payloadlen;
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	4413      	add	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80054fe:	69fb      	ldr	r3, [r7, #28]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	460b      	mov	r3, r1
 8005518:	71fb      	strb	r3, [r7, #7]
 800551a:	4613      	mov	r3, r2
 800551c:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b03      	cmp	r3, #3
 800552e:	dc03      	bgt.n	8005538 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005530:	f06f 0301 	mvn.w	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
		goto exit;
 8005536:	e02f      	b.n	8005598 <MQTTSerialize_ack+0x90>
	}
	header.bits.type = packettype;
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	b2da      	uxtb	r2, r3
 8005540:	7e3b      	ldrb	r3, [r7, #24]
 8005542:	f362 1307 	bfi	r3, r2, #4, #4
 8005546:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8005548:	79bb      	ldrb	r3, [r7, #6]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	7e3b      	ldrb	r3, [r7, #24]
 8005552:	f362 03c3 	bfi	r3, r2, #3, #1
 8005556:	763b      	strb	r3, [r7, #24]
	header.bits.qos = 0;
 8005558:	7e3b      	ldrb	r3, [r7, #24]
 800555a:	f36f 0342 	bfc	r3, #1, #2
 800555e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8005560:	7e3a      	ldrb	r2, [r7, #24]
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fe2a 	bl	80051c2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2102      	movs	r1, #2
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fd2a 	bl	8004fcc <MQTTPacket_encode>
 8005578:	4602      	mov	r2, r0
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	4413      	add	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8005580:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005582:	f107 0314 	add.w	r3, r7, #20
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fe2f 	bl	80051ec <writeInt>
	rc = ptr - buf;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	461a      	mov	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80055ac:	2302      	movs	r3, #2
 80055ae:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e013      	b.n	80055de <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	461a      	mov	r2, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	4413      	add	r3, r2
 80055c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ca:	f7ff feb6 	bl	800533a <MQTTstrlen>
 80055ce:	4603      	mov	r3, r0
 80055d0:	3303      	adds	r3, #3
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4413      	add	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	dbe7      	blt.n	80055b6 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80055e6:	68bb      	ldr	r3, [r7, #8]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	4611      	mov	r1, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	460b      	mov	r3, r1
 8005600:	71fb      	strb	r3, [r7, #7]
 8005602:	4613      	mov	r3, r2
 8005604:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800561a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800561c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561e:	f7ff ffc0 	bl	80055a2 <MQTTSerialize_subscribeLength>
 8005622:	61f8      	str	r0, [r7, #28]
 8005624:	69f8      	ldr	r0, [r7, #28]
 8005626:	f7ff fd3d 	bl	80050a4 <MQTTPacket_len>
 800562a:	4602      	mov	r2, r0
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4293      	cmp	r3, r2
 8005630:	da03      	bge.n	800563a <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005632:	f06f 0301 	mvn.w	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8005638:	e052      	b.n	80056e0 <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800563e:	7d3b      	ldrb	r3, [r7, #20]
 8005640:	2208      	movs	r2, #8
 8005642:	f362 1307 	bfi	r3, r2, #4, #4
 8005646:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	7d3b      	ldrb	r3, [r7, #20]
 8005652:	f362 03c3 	bfi	r3, r2, #3, #1
 8005656:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8005658:	7d3b      	ldrb	r3, [r7, #20]
 800565a:	2201      	movs	r2, #1
 800565c:	f362 0342 	bfi	r3, r2, #1, #2
 8005660:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8005662:	7d3a      	ldrb	r2, [r7, #20]
 8005664:	f107 0318 	add.w	r3, r7, #24
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fda9 	bl	80051c2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	69f9      	ldr	r1, [r7, #28]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fca9 	bl	8004fcc <MQTTPacket_encode>
 800567a:	4602      	mov	r2, r0
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	4413      	add	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8005682:	88ba      	ldrh	r2, [r7, #4]
 8005684:	f107 0318 	add.w	r3, r7, #24
 8005688:	4611      	mov	r1, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fdae 	bl	80051ec <writeInt>

	for (i = 0; i < count; ++i)
 8005690:	2300      	movs	r3, #0
 8005692:	623b      	str	r3, [r7, #32]
 8005694:	e01b      	b.n	80056ce <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	4413      	add	r3, r2
 80056a6:	f107 0018 	add.w	r0, r7, #24
 80056aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ac:	f7ff fde6 	bl	800527c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b6:	4413      	add	r3, r2
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fd7d 	bl	80051c2 <writeChar>
	for (i = 0; i < count; ++i)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	3301      	adds	r3, #1
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	429a      	cmp	r2, r3
 80056d4:	dbdf      	blt.n	8005696 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	461a      	mov	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08a      	sub	sp, #40	; 0x28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005708:	f107 0318 	add.w	r3, r7, #24
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fd44 	bl	800519a <readChar>
 8005712:	4603      	mov	r3, r0
 8005714:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8005716:	7f3b      	ldrb	r3, [r7, #28]
 8005718:	f023 030f 	bic.w	r3, r3, #15
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b90      	cmp	r3, #144	; 0x90
 8005720:	d142      	bne.n	80057a8 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f107 0214 	add.w	r2, r7, #20
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fd04 	bl	8005138 <MQTTPacket_decodeBuf>
 8005730:	6278      	str	r0, [r7, #36]	; 0x24
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	4413      	add	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	2b01      	cmp	r3, #1
 800574a:	dd2f      	ble.n	80057ac <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800574c:	f107 0318 	add.w	r3, r7, #24
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fd07 	bl	8005164 <readInt>
 8005756:	4603      	mov	r3, r0
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8005764:	e019      	b.n	800579a <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	da03      	bge.n	8005778 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8005776:	e01a      	b.n	80057ae <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8005778:	f107 0318 	add.w	r3, r7, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fd0c 	bl	800519a <readChar>
 8005782:	4603      	mov	r3, r0
 8005784:	4618      	mov	r0, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6011      	str	r1, [r2, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	4413      	add	r3, r2
 8005796:	4602      	mov	r2, r0
 8005798:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d8e1      	bhi.n	8005766 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80057a2:	2301      	movs	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
 80057a6:	e002      	b.n	80057ae <MQTTDeserialize_suback+0xc4>
		goto exit;
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <MQTTDeserialize_suback+0xc4>
		goto exit;
 80057ac:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	; 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057be:	e003      	b.n	80057c8 <LoopCopyDataInit>

080057c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057c6:	3104      	adds	r1, #4

080057c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057c8:	480b      	ldr	r0, [pc, #44]	; (80057f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057d0:	d3f6      	bcc.n	80057c0 <CopyDataInit>
  ldr  r2, =_sbss
 80057d2:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057d4:	e002      	b.n	80057dc <LoopFillZerobss>

080057d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057d8:	f842 3b04 	str.w	r3, [r2], #4

080057dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057e0:	d3f9      	bcc.n	80057d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057e2:	f7fe fb7b 	bl	8003edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057e6:	f007 f8ad 	bl	800c944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ea:	f7fc fa25 	bl	8001c38 <main>
  bx  lr    
 80057ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057f4:	0800e814 	.word	0x0800e814
  ldr  r0, =_sdata
 80057f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057fc:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8005800:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8005804:	20005168 	.word	0x20005168

08005808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005808:	e7fe      	b.n	8005808 <ADC_IRQHandler>
	...

0800580c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005810:	4b0e      	ldr	r3, [pc, #56]	; (800584c <HAL_Init+0x40>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <HAL_Init+0x40>)
 8005816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800581a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_Init+0x40>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0a      	ldr	r2, [pc, #40]	; (800584c <HAL_Init+0x40>)
 8005822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <HAL_Init+0x40>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a07      	ldr	r2, [pc, #28]	; (800584c <HAL_Init+0x40>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005834:	2003      	movs	r0, #3
 8005836:	f000 f904 	bl	8005a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800583a:	2000      	movs	r0, #0
 800583c:	f7fe f90a 	bl	8003a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005840:	f7fd fde0 	bl	8003404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023c00 	.word	0x40023c00

08005850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_IncTick+0x20>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_IncTick+0x24>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4413      	add	r3, r2
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <HAL_IncTick+0x24>)
 8005862:	6013      	str	r3, [r2, #0]
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	2000006c 	.word	0x2000006c
 8005874:	20005160 	.word	0x20005160

08005878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  return uwTick;
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <HAL_GetTick+0x14>)
 800587e:	681b      	ldr	r3, [r3, #0]
}
 8005880:	4618      	mov	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20005160 	.word	0x20005160

08005890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7ff ffee 	bl	8005878 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d005      	beq.n	80058b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_Delay+0x40>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058b6:	bf00      	nop
 80058b8:	f7ff ffde 	bl	8005878 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d8f7      	bhi.n	80058b8 <HAL_Delay+0x28>
  {
  }
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000006c 	.word	0x2000006c

080058d4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <HAL_GetHalVersion+0x10>)
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	01070800 	.word	0x01070800

080058e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <__NVIC_SetPriorityGrouping+0x44>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005904:	4013      	ands	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800591a:	4a04      	ldr	r2, [pc, #16]	; (800592c <__NVIC_SetPriorityGrouping+0x44>)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	60d3      	str	r3, [r2, #12]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	e000ed00 	.word	0xe000ed00

08005930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__NVIC_GetPriorityGrouping+0x18>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f003 0307 	and.w	r3, r3, #7
}
 800593e:	4618      	mov	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	db0b      	blt.n	8005976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <__NVIC_EnableIRQ+0x38>)
 8005966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2001      	movs	r0, #1
 800596e:	fa00 f202 	lsl.w	r2, r0, r2
 8005972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	e000e100 	.word	0xe000e100

08005988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db0a      	blt.n	80059b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	490c      	ldr	r1, [pc, #48]	; (80059d4 <__NVIC_SetPriority+0x4c>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	440b      	add	r3, r1
 80059ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059b0:	e00a      	b.n	80059c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <__NVIC_SetPriority+0x50>)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3b04      	subs	r3, #4
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	761a      	strb	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	e000e100 	.word	0xe000e100
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f1c3 0307 	rsb	r3, r3, #7
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	bf28      	it	cs
 80059fa:	2304      	movcs	r3, #4
 80059fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3304      	adds	r3, #4
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d902      	bls.n	8005a0c <NVIC_EncodePriority+0x30>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3b03      	subs	r3, #3
 8005a0a:	e000      	b.n	8005a0e <NVIC_EncodePriority+0x32>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	401a      	ands	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a24:	f04f 31ff 	mov.w	r1, #4294967295
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	43d9      	mvns	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a34:	4313      	orrs	r3, r2
         );
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff4c 	bl	80058e8 <__NVIC_SetPriorityGrouping>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a6a:	f7ff ff61 	bl	8005930 <__NVIC_GetPriorityGrouping>
 8005a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f7ff ffb1 	bl	80059dc <NVIC_EncodePriority>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ff80 	bl	8005988 <__NVIC_SetPriority>
}
 8005a88:	bf00      	nop
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ff54 	bl	800594c <__NVIC_EnableIRQ>
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005aba:	f7ff fedd 	bl	8005878 <HAL_GetTick>
 8005abe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d008      	beq.n	8005ade <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e052      	b.n	8005b84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0216 	bic.w	r2, r2, #22
 8005aec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_DMA_Abort+0x62>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0208 	bic.w	r2, r2, #8
 8005b1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b2e:	e013      	b.n	8005b58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b30:	f7ff fea2 	bl	8005878 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d90c      	bls.n	8005b58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e015      	b.n	8005b84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e4      	bne.n	8005b30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6a:	223f      	movs	r2, #63	; 0x3f
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e00c      	b.n	8005bc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2205      	movs	r2, #5
 8005bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bde:	b2db      	uxtb	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e159      	b.n	8005ebc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c08:	2201      	movs	r2, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	f040 8148 	bne.w	8005eb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d00b      	beq.n	8005c46 <HAL_GPIO_Init+0x5a>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d007      	beq.n	8005c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c3a:	2b11      	cmp	r3, #17
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b12      	cmp	r3, #18
 8005c44:	d130      	bne.n	8005ca8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	2203      	movs	r2, #3
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 0201 	and.w	r2, r3, #1
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0xfc>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b12      	cmp	r3, #18
 8005ce6:	d123      	bne.n	8005d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	08da      	lsrs	r2, r3, #3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3208      	adds	r2, #8
 8005cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	220f      	movs	r2, #15
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	08da      	lsrs	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3208      	adds	r2, #8
 8005d2a:	69b9      	ldr	r1, [r7, #24]
 8005d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4013      	ands	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0203 	and.w	r2, r3, #3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80a2 	beq.w	8005eb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b56      	ldr	r3, [pc, #344]	; (8005ed0 <HAL_GPIO_Init+0x2e4>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	4a55      	ldr	r2, [pc, #340]	; (8005ed0 <HAL_GPIO_Init+0x2e4>)
 8005d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d80:	6453      	str	r3, [r2, #68]	; 0x44
 8005d82:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <HAL_GPIO_Init+0x2e4>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d8e:	4a51      	ldr	r2, [pc, #324]	; (8005ed4 <HAL_GPIO_Init+0x2e8>)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	089b      	lsrs	r3, r3, #2
 8005d94:	3302      	adds	r3, #2
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a48      	ldr	r2, [pc, #288]	; (8005ed8 <HAL_GPIO_Init+0x2ec>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_Init+0x202>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a47      	ldr	r2, [pc, #284]	; (8005edc <HAL_GPIO_Init+0x2f0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_GPIO_Init+0x1fe>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a46      	ldr	r2, [pc, #280]	; (8005ee0 <HAL_GPIO_Init+0x2f4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00d      	beq.n	8005de6 <HAL_GPIO_Init+0x1fa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a45      	ldr	r2, [pc, #276]	; (8005ee4 <HAL_GPIO_Init+0x2f8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_GPIO_Init+0x1f6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a44      	ldr	r2, [pc, #272]	; (8005ee8 <HAL_GPIO_Init+0x2fc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_Init+0x1f2>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	e008      	b.n	8005df0 <HAL_GPIO_Init+0x204>
 8005dde:	2307      	movs	r3, #7
 8005de0:	e006      	b.n	8005df0 <HAL_GPIO_Init+0x204>
 8005de2:	2303      	movs	r3, #3
 8005de4:	e004      	b.n	8005df0 <HAL_GPIO_Init+0x204>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e002      	b.n	8005df0 <HAL_GPIO_Init+0x204>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_GPIO_Init+0x204>
 8005dee:	2300      	movs	r3, #0
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	f002 0203 	and.w	r2, r2, #3
 8005df6:	0092      	lsls	r2, r2, #2
 8005df8:	4093      	lsls	r3, r2
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e00:	4934      	ldr	r1, [pc, #208]	; (8005ed4 <HAL_GPIO_Init+0x2e8>)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	3302      	adds	r3, #2
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e0e:	4b37      	ldr	r3, [pc, #220]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e32:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e38:	4b2c      	ldr	r3, [pc, #176]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5c:	4a23      	ldr	r2, [pc, #140]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e62:	4b22      	ldr	r3, [pc, #136]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e86:	4a19      	ldr	r2, [pc, #100]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e8c:	4b17      	ldr	r3, [pc, #92]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005eb0:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <HAL_GPIO_Init+0x300>)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	f67f aea2 	bls.w	8005c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3724      	adds	r7, #36	; 0x24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40020000 	.word	0x40020000
 8005edc:	40020400 	.word	0x40020400
 8005ee0:	40020800 	.word	0x40020800
 8005ee4:	40020c00 	.word	0x40020c00
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40013c00 	.word	0x40013c00

08005ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
 8005efc:	4613      	mov	r3, r2
 8005efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f00:	787b      	ldrb	r3, [r7, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f0c:	e003      	b.n	8005f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	041a      	lsls	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	619a      	str	r2, [r3, #24]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e11f      	b.n	8006176 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fd fa86 	bl	800345c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f88:	f002 ff7c 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4a7b      	ldr	r2, [pc, #492]	; (8006180 <HAL_I2C_Init+0x25c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d807      	bhi.n	8005fa8 <HAL_I2C_Init+0x84>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a7a      	ldr	r2, [pc, #488]	; (8006184 <HAL_I2C_Init+0x260>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bf94      	ite	ls
 8005fa0:	2301      	movls	r3, #1
 8005fa2:	2300      	movhi	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e006      	b.n	8005fb6 <HAL_I2C_Init+0x92>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a77      	ldr	r2, [pc, #476]	; (8006188 <HAL_I2C_Init+0x264>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	bf94      	ite	ls
 8005fb0:	2301      	movls	r3, #1
 8005fb2:	2300      	movhi	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0db      	b.n	8006176 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a72      	ldr	r2, [pc, #456]	; (800618c <HAL_I2C_Init+0x268>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	0c9b      	lsrs	r3, r3, #18
 8005fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	4a64      	ldr	r2, [pc, #400]	; (8006180 <HAL_I2C_Init+0x25c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d802      	bhi.n	8005ff8 <HAL_I2C_Init+0xd4>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	e009      	b.n	800600c <HAL_I2C_Init+0xe8>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	4a63      	ldr	r2, [pc, #396]	; (8006190 <HAL_I2C_Init+0x26c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	099b      	lsrs	r3, r3, #6
 800600a:	3301      	adds	r3, #1
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	430b      	orrs	r3, r1
 8006012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800601e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4956      	ldr	r1, [pc, #344]	; (8006180 <HAL_I2C_Init+0x25c>)
 8006028:	428b      	cmp	r3, r1
 800602a:	d80d      	bhi.n	8006048 <HAL_I2C_Init+0x124>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1e59      	subs	r1, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	fbb1 f3f3 	udiv	r3, r1, r3
 800603a:	3301      	adds	r3, #1
 800603c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006040:	2b04      	cmp	r3, #4
 8006042:	bf38      	it	cc
 8006044:	2304      	movcc	r3, #4
 8006046:	e04f      	b.n	80060e8 <HAL_I2C_Init+0x1c4>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d111      	bne.n	8006074 <HAL_I2C_Init+0x150>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1e58      	subs	r0, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	440b      	add	r3, r1
 800605e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006062:	3301      	adds	r3, #1
 8006064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e012      	b.n	800609a <HAL_I2C_Init+0x176>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1e58      	subs	r0, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	0099      	lsls	r1, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	fbb0 f3f3 	udiv	r3, r0, r3
 800608a:	3301      	adds	r3, #1
 800608c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_Init+0x17e>
 800609e:	2301      	movs	r3, #1
 80060a0:	e022      	b.n	80060e8 <HAL_I2C_Init+0x1c4>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10e      	bne.n	80060c8 <HAL_I2C_Init+0x1a4>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1e58      	subs	r0, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6859      	ldr	r1, [r3, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	440b      	add	r3, r1
 80060b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060bc:	3301      	adds	r3, #1
 80060be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c6:	e00f      	b.n	80060e8 <HAL_I2C_Init+0x1c4>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1e58      	subs	r0, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	0099      	lsls	r1, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	fbb0 f3f3 	udiv	r3, r0, r3
 80060de:	3301      	adds	r3, #1
 80060e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	6809      	ldr	r1, [r1, #0]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69da      	ldr	r2, [r3, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6911      	ldr	r1, [r2, #16]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68d2      	ldr	r2, [r2, #12]
 8006122:	4311      	orrs	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	430b      	orrs	r3, r1
 800612a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	000186a0 	.word	0x000186a0
 8006184:	001e847f 	.word	0x001e847f
 8006188:	003d08ff 	.word	0x003d08ff
 800618c:	431bde83 	.word	0x431bde83
 8006190:	10624dd3 	.word	0x10624dd3

08006194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	460b      	mov	r3, r1
 80061a2:	817b      	strh	r3, [r7, #10]
 80061a4:	4613      	mov	r3, r2
 80061a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061a8:	f7ff fb66 	bl	8005878 <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	f040 80e3 	bne.w	8006382 <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2319      	movs	r3, #25
 80061c2:	2201      	movs	r2, #1
 80061c4:	4971      	ldr	r1, [pc, #452]	; (800638c <HAL_I2C_Master_Transmit+0x1f8>)
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f002 f84f 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_I2C_Master_Transmit+0x48>
    {
    	printf("timeout flag\r\n");
 80061d2:	486f      	ldr	r0, [pc, #444]	; (8006390 <HAL_I2C_Master_Transmit+0x1fc>)
 80061d4:	f006 fc62 	bl	800ca9c <puts>
      return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
 80061da:	e0d3      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Master_Transmit+0x56>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e0cc      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d007      	beq.n	8006210 <HAL_I2C_Master_Transmit+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800621e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2221      	movs	r2, #33	; 0x21
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2210      	movs	r2, #16
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	893a      	ldrh	r2, [r7, #8]
 8006240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a51      	ldr	r2, [pc, #324]	; (8006394 <HAL_I2C_Master_Transmit+0x200>)
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006252:	8979      	ldrh	r1, [r7, #10]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a3a      	ldr	r2, [r7, #32]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f001 fe39 	bl	8007ed0 <I2C_MasterRequestWrite>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_I2C_Master_Transmit+0xd4>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e08d      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800627e:	e066      	b.n	800634e <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	6a39      	ldr	r1, [r7, #32]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f002 f8c6 	bl	8008416 <I2C_WaitOnTXEFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <HAL_I2C_Master_Transmit+0x118>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	2b04      	cmp	r3, #4
 8006296:	d107      	bne.n	80062a8 <HAL_I2C_Master_Transmit+0x114>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e06b      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d11b      	bne.n	8006322 <HAL_I2C_Master_Transmit+0x18e>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d017      	beq.n	8006322 <HAL_I2C_Master_Transmit+0x18e>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f002 f8b6 	bl	8008498 <I2C_WaitOnBTFFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <HAL_I2C_Master_Transmit+0x1ba>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	2b04      	cmp	r3, #4
 8006338:	d107      	bne.n	800634a <HAL_I2C_Master_Transmit+0x1b6>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e01a      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
    while (hi2c->XferSize > 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d194      	bne.n	8006280 <HAL_I2C_Master_Transmit+0xec>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	00100002 	.word	0x00100002
 8006390:	0800e608 	.word	0x0800e608
 8006394:	ffff0000 	.word	0xffff0000

08006398 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08c      	sub	sp, #48	; 0x30
 800639c:	af02      	add	r7, sp, #8
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	461a      	mov	r2, r3
 80063a4:	460b      	mov	r3, r1
 80063a6:	817b      	strh	r3, [r7, #10]
 80063a8:	4613      	mov	r3, r2
 80063aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ac:	f7ff fa64 	bl	8005878 <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	f040 820b 	bne.w	80067d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2319      	movs	r3, #25
 80063c6:	2201      	movs	r2, #1
 80063c8:	497c      	ldr	r1, [pc, #496]	; (80065bc <HAL_I2C_Master_Receive+0x224>)
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f001 ff4d 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	e1fe      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_I2C_Master_Receive+0x50>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e1f7      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d007      	beq.n	800640e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2222      	movs	r2, #34	; 0x22
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2210      	movs	r2, #16
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	893a      	ldrh	r2, [r7, #8]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a5c      	ldr	r2, [pc, #368]	; (80065c0 <HAL_I2C_Master_Receive+0x228>)
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006450:	8979      	ldrh	r1, [r7, #10]
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f001 fdbc 	bl	8007fd4 <I2C_MasterRequestRead>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e1b8      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d113      	bne.n	8006496 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e18c      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11b      	bne.n	80064d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e16c      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d11b      	bne.n	8006516 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	e14c      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800653c:	e138      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006542:	2b03      	cmp	r3, #3
 8006544:	f200 80f1 	bhi.w	800672a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b01      	cmp	r3, #1
 800654e:	d123      	bne.n	8006598 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 ffe0 	bl	800851a <I2C_WaitOnRXNEFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e139      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006596:	e10b      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659c:	2b02      	cmp	r3, #2
 800659e:	d14e      	bne.n	800663e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	2200      	movs	r2, #0
 80065a8:	4906      	ldr	r1, [pc, #24]	; (80065c4 <HAL_I2C_Master_Receive+0x22c>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f001 fe5d 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e10e      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
 80065ba:	bf00      	nop
 80065bc:	00100002 	.word	0x00100002
 80065c0:	ffff0000 	.word	0xffff0000
 80065c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800663c:	e0b8      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	2200      	movs	r2, #0
 8006646:	4966      	ldr	r1, [pc, #408]	; (80067e0 <HAL_I2C_Master_Receive+0x448>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f001 fe0e 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0bf      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2200      	movs	r2, #0
 80066a2:	494f      	ldr	r1, [pc, #316]	; (80067e0 <HAL_I2C_Master_Receive+0x448>)
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 fde0 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e091      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006728:	e042      	b.n	80067b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f001 fef3 	bl	800851a <I2C_WaitOnRXNEFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e04c      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675a:	3b01      	subs	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b04      	cmp	r3, #4
 800677c:	d118      	bne.n	80067b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f47f aec2 	bne.w	800653e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3728      	adds	r7, #40	; 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	00010004 	.word	0x00010004

080067e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006804:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d003      	beq.n	800681c <HAL_I2C_EV_IRQHandler+0x38>
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	f040 80b6 	bne.w	8006988 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_I2C_EV_IRQHandler+0x6e>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800683c:	d003      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x62>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006844:	d101      	bne.n	800684a <HAL_I2C_EV_IRQHandler+0x66>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x68>
 800684a:	2300      	movs	r3, #0
 800684c:	2b01      	cmp	r3, #1
 800684e:	f000 8127 	beq.w	8006aa0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x92>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	0a5b      	lsrs	r3, r3, #9
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fedb 	bl	8008624 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fd1c 	bl	80072ac <I2C_Master_SB>
 8006874:	e087      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	08db      	lsrs	r3, r3, #3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_I2C_EV_IRQHandler+0xb2>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	0a5b      	lsrs	r3, r3, #9
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fd92 	bl	80073b8 <I2C_Master_ADD10>
 8006894:	e077      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	0a5b      	lsrs	r3, r3, #9
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fdac 	bl	800740c <I2C_Master_ADDR>
 80068b4:	e067      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d030      	beq.n	8006924 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d0:	f000 80e8 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00f      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	0a9b      	lsrs	r3, r3, #10
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f9e8 	bl	8006cce <I2C_MasterTransmit_TXE>
 80068fe:	e042      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	089b      	lsrs	r3, r3, #2
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80cb 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	0a5b      	lsrs	r3, r3, #9
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80c4 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa72 	bl	8006e06 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006922:	e0bf      	b.n	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800692e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006932:	f000 80b7 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	099b      	lsrs	r3, r3, #6
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00f      	beq.n	8006962 <HAL_I2C_EV_IRQHandler+0x17e>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	0a9b      	lsrs	r3, r3, #10
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_I2C_EV_IRQHandler+0x17e>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb3a 	bl	8006fd4 <I2C_MasterReceive_RXNE>
 8006960:	e011      	b.n	8006986 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	089b      	lsrs	r3, r3, #2
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 809a 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8093 	beq.w	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fbaa 	bl	80070d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006984:	e08e      	b.n	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8006986:	e08d      	b.n	8006aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e007      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <HAL_I2C_EV_IRQHandler+0x1f8>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	0a5b      	lsrs	r3, r3, #9
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069d2:	69b9      	ldr	r1, [r7, #24]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 ff68 	bl	80078aa <I2C_Slave_ADDR>
 80069da:	e066      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_I2C_EV_IRQHandler+0x218>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	0a5b      	lsrs	r3, r3, #9
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 ff9d 	bl	8007934 <I2C_Slave_STOPF>
 80069fa:	e056      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2b21      	cmp	r3, #33	; 0x21
 8006a00:	d002      	beq.n	8006a08 <HAL_I2C_EV_IRQHandler+0x224>
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	2b29      	cmp	r3, #41	; 0x29
 8006a06:	d125      	bne.n	8006a54 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00f      	beq.n	8006a34 <HAL_I2C_EV_IRQHandler+0x250>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	0a9b      	lsrs	r3, r3, #10
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <HAL_I2C_EV_IRQHandler+0x250>
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fe7e 	bl	800772e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a32:	e039      	b.n	8006aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d033      	beq.n	8006aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	0a5b      	lsrs	r3, r3, #9
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02d      	beq.n	8006aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 feab 	bl	80077a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a52:	e029      	b.n	8006aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00f      	beq.n	8006a80 <HAL_I2C_EV_IRQHandler+0x29c>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	0a9b      	lsrs	r3, r3, #10
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_I2C_EV_IRQHandler+0x29c>
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 feb6 	bl	80077ea <I2C_SlaveReceive_RXNE>
 8006a7e:	e014      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	089b      	lsrs	r3, r3, #2
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	0a5b      	lsrs	r3, r3, #9
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fee4 	bl	8007866 <I2C_SlaveReceive_BTF>
 8006a9e:	e004      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8006aa0:	bf00      	nop
 8006aa2:	e002      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa4:	bf00      	nop
 8006aa6:	e000      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006aa8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ad2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <HAL_I2C_ER_IRQHandler+0x4e>
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006afc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	0a5b      	lsrs	r3, r3, #9
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <HAL_I2C_ER_IRQHandler+0x78>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006b26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	0a9b      	lsrs	r3, r3, #10
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03f      	beq.n	8006bb4 <HAL_I2C_ER_IRQHandler+0x104>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d039      	beq.n	8006bb4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006b40:	7efb      	ldrb	r3, [r7, #27]
 8006b42:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b52:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b5a:	7ebb      	ldrb	r3, [r7, #26]
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d112      	bne.n	8006b86 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b66:	7cfb      	ldrb	r3, [r7, #19]
 8006b68:	2b21      	cmp	r3, #33	; 0x21
 8006b6a:	d008      	beq.n	8006b7e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	2b29      	cmp	r3, #41	; 0x29
 8006b70:	d005      	beq.n	8006b7e <HAL_I2C_ER_IRQHandler+0xce>
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	2b28      	cmp	r3, #40	; 0x28
 8006b76:	d106      	bne.n	8006b86 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b21      	cmp	r3, #33	; 0x21
 8006b7c:	d103      	bne.n	8006b86 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f808 	bl	8007b94 <I2C_Slave_AF>
 8006b84:	e016      	b.n	8006bb4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b8e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	f043 0304 	orr.w	r3, r3, #4
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b98:	7efb      	ldrb	r3, [r7, #27]
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d002      	beq.n	8006ba4 <HAL_I2C_ER_IRQHandler+0xf4>
 8006b9e:	7efb      	ldrb	r3, [r7, #27]
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d107      	bne.n	8006bb4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	0adb      	lsrs	r3, r3, #11
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <HAL_I2C_ER_IRQHandler+0x12e>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	f043 0308 	orr.w	r3, r3, #8
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006bdc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f83f 	bl	8007c74 <I2C_ITError>
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3728      	adds	r7, #40	; 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d150      	bne.n	8006d96 <I2C_MasterTransmit_TXE+0xc8>
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b21      	cmp	r3, #33	; 0x21
 8006cf8:	d14d      	bne.n	8006d96 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d01d      	beq.n	8006d3c <I2C_MasterTransmit_TXE+0x6e>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d01a      	beq.n	8006d3c <I2C_MasterTransmit_TXE+0x6e>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d0c:	d016      	beq.n	8006d3c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d1c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2211      	movs	r2, #17
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff62 	bl	8006bfe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d3a:	e060      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d4a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d107      	bne.n	8006d86 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff ff7d 	bl	8006c7e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d84:	e03b      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ff35 	bl	8006bfe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d94:	e033      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	2b21      	cmp	r3, #33	; 0x21
 8006d9a:	d005      	beq.n	8006da8 <I2C_MasterTransmit_TXE+0xda>
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d12d      	bne.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b22      	cmp	r3, #34	; 0x22
 8006da6:	d12a      	bne.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006dc2:	e01c      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d103      	bne.n	8006dd8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f898 	bl	8006f06 <I2C_MemoryTransmit_TXE_BTF>
}
 8006dd6:	e012      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dfc:	e7ff      	b.n	8006dfe <I2C_MasterTransmit_TXE+0x130>
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b21      	cmp	r3, #33	; 0x21
 8006e1e:	d165      	bne.n	8006eec <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d012      	beq.n	8006e50 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e4e:	e056      	b.n	8006efe <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d01d      	beq.n	8006e92 <I2C_MasterTransmit_BTF+0x8c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d01a      	beq.n	8006e92 <I2C_MasterTransmit_BTF+0x8c>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e62:	d016      	beq.n	8006e92 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e72:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2211      	movs	r2, #17
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff feb7 	bl	8006bfe <HAL_I2C_MasterTxCpltCallback>
}
 8006e90:	e035      	b.n	8006efe <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ea0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d107      	bne.n	8006edc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fed2 	bl	8006c7e <HAL_I2C_MemTxCpltCallback>
}
 8006eda:	e010      	b.n	8006efe <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff fe8a 	bl	8006bfe <HAL_I2C_MasterTxCpltCallback>
}
 8006eea:	e008      	b.n	8006efe <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d102      	bne.n	8006efe <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f804 	bl	8006f06 <I2C_MemoryTransmit_TXE_BTF>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11d      	bne.n	8006f52 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10b      	bne.n	8006f36 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006f34:	e048      	b.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	121b      	asrs	r3, r3, #8
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f50:	e03a      	b.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10b      	bne.n	8006f72 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f70:	e02a      	b.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d126      	bne.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b22      	cmp	r3, #34	; 0x22
 8006f84:	d108      	bne.n	8006f98 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f94:	601a      	str	r2, [r3, #0]
}
 8006f96:	e017      	b.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b21      	cmp	r3, #33	; 0x21
 8006fa2:	d111      	bne.n	8006fc8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b22      	cmp	r3, #34	; 0x22
 8006fe6:	d173      	bne.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d920      	bls.n	8007038 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d154      	bne.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007034:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007036:	e04b      	b.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	2b02      	cmp	r3, #2
 800703e:	d047      	beq.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d002      	beq.n	800704c <I2C_MasterReceive_RXNE+0x78>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d141      	bne.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800706a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d10a      	bne.n	80070bc <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fdec 	bl	8006c92 <HAL_I2C_MemRxCpltCallback>
}
 80070ba:	e009      	b.n	80070d0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2212      	movs	r2, #18
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fda1 	bl	8006c12 <HAL_I2C_MasterRxCpltCallback>
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d11b      	bne.n	8007128 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007126:	e0bd      	b.n	80072a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d129      	bne.n	8007186 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007140:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b04      	cmp	r3, #4
 8007146:	d00a      	beq.n	800715e <I2C_MasterReceive_BTF+0x86>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d007      	beq.n	800715e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007184:	e08e      	b.n	80072a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d176      	bne.n	800727e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d002      	beq.n	800719c <I2C_MasterReceive_BTF+0xc4>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b10      	cmp	r3, #16
 800719a:	d108      	bne.n	80071ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e019      	b.n	80071e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d002      	beq.n	80071ba <I2C_MasterReceive_BTF+0xe2>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d108      	bne.n	80071cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e00a      	b.n	80071e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d007      	beq.n	80071e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fe:	b29b      	uxth	r3, r3
 8007200:	3b01      	subs	r3, #1
 8007202:	b29a      	uxth	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800723c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d10a      	bne.n	8007268 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fd16 	bl	8006c92 <HAL_I2C_MemRxCpltCallback>
}
 8007266:	e01d      	b.n	80072a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2212      	movs	r2, #18
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fccb 	bl	8006c12 <HAL_I2C_MasterRxCpltCallback>
}
 800727c:	e012      	b.n	80072a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	d117      	bne.n	80072f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80072da:	e067      	b.n	80073ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	611a      	str	r2, [r3, #16]
}
 80072ee:	e05d      	b.n	80073ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f8:	d133      	bne.n	8007362 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b21      	cmp	r3, #33	; 0x21
 8007304:	d109      	bne.n	800731a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007316:	611a      	str	r2, [r3, #16]
 8007318:	e008      	b.n	800732c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	b2da      	uxtb	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <I2C_Master_SB+0x92>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d032      	beq.n	80073ac <I2C_Master_SB+0x100>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d02d      	beq.n	80073ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735e:	605a      	str	r2, [r3, #4]
}
 8007360:	e024      	b.n	80073ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10e      	bne.n	8007388 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	b29b      	uxth	r3, r3
 8007370:	11db      	asrs	r3, r3, #7
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f063 030f 	orn	r3, r3, #15
 800737e:	b2da      	uxtb	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	611a      	str	r2, [r3, #16]
}
 8007386:	e011      	b.n	80073ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10d      	bne.n	80073ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007394:	b29b      	uxth	r3, r3
 8007396:	11db      	asrs	r3, r3, #7
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0306 	and.w	r3, r3, #6
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f063 030e 	orn	r3, r3, #14
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	611a      	str	r2, [r3, #16]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <I2C_Master_ADD10+0x24>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <I2C_Master_ADD10+0x38>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fe:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800740c:	b480      	push	{r7}
 800740e:	b091      	sub	sp, #68	; 0x44
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800741a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b22      	cmp	r3, #34	; 0x22
 8007434:	f040 8169 	bne.w	800770a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10f      	bne.n	8007460 <I2C_Master_ADDR+0x54>
 8007440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d10b      	bne.n	8007460 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007448:	2300      	movs	r3, #0
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	633b      	str	r3, [r7, #48]	; 0x30
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	633b      	str	r3, [r7, #48]	; 0x30
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	e160      	b.n	8007722 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11d      	bne.n	80074a4 <I2C_Master_ADDR+0x98>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007470:	d118      	bne.n	80074a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007496:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	651a      	str	r2, [r3, #80]	; 0x50
 80074a2:	e13e      	b.n	8007722 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d113      	bne.n	80074d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ae:	2300      	movs	r3, #0
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e115      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	f040 808a 	bne.w	80075f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e8:	d137      	bne.n	800755a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007508:	d113      	bne.n	8007532 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007518:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751a:	2300      	movs	r3, #0
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	e0e7      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007532:	2300      	movs	r3, #0
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	623b      	str	r3, [r7, #32]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	623b      	str	r3, [r7, #32]
 8007546:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	e0d3      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2b08      	cmp	r3, #8
 800755e:	d02e      	beq.n	80075be <I2C_Master_ADDR+0x1b2>
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b20      	cmp	r3, #32
 8007564:	d02b      	beq.n	80075be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007568:	2b12      	cmp	r3, #18
 800756a:	d102      	bne.n	8007572 <I2C_Master_ADDR+0x166>
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	2b01      	cmp	r3, #1
 8007570:	d125      	bne.n	80075be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2b04      	cmp	r3, #4
 8007576:	d00e      	beq.n	8007596 <I2C_Master_ADDR+0x18a>
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	2b02      	cmp	r3, #2
 800757c:	d00b      	beq.n	8007596 <I2C_Master_ADDR+0x18a>
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	2b10      	cmp	r3, #16
 8007582:	d008      	beq.n	8007596 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e007      	b.n	80075a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	e0a1      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ce:	2300      	movs	r3, #0
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e085      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d14d      	bne.n	800769c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b04      	cmp	r3, #4
 8007604:	d016      	beq.n	8007634 <I2C_Master_ADDR+0x228>
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	2b02      	cmp	r3, #2
 800760a:	d013      	beq.n	8007634 <I2C_Master_ADDR+0x228>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	2b10      	cmp	r3, #16
 8007610:	d010      	beq.n	8007634 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007620:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e007      	b.n	8007644 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007642:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	d117      	bne.n	8007684 <I2C_Master_ADDR+0x278>
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800765a:	d00b      	beq.n	8007674 <I2C_Master_ADDR+0x268>
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2b01      	cmp	r3, #1
 8007660:	d008      	beq.n	8007674 <I2C_Master_ADDR+0x268>
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	2b08      	cmp	r3, #8
 8007666:	d005      	beq.n	8007674 <I2C_Master_ADDR+0x268>
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	2b10      	cmp	r3, #16
 800766c:	d002      	beq.n	8007674 <I2C_Master_ADDR+0x268>
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	2b20      	cmp	r3, #32
 8007672:	d107      	bne.n	8007684 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007682:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	e032      	b.n	8007702 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ba:	d117      	bne.n	80076ec <I2C_Master_ADDR+0x2e0>
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076c2:	d00b      	beq.n	80076dc <I2C_Master_ADDR+0x2d0>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d008      	beq.n	80076dc <I2C_Master_ADDR+0x2d0>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d005      	beq.n	80076dc <I2C_Master_ADDR+0x2d0>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d002      	beq.n	80076dc <I2C_Master_ADDR+0x2d0>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d107      	bne.n	80076ec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007708:	e00b      	b.n	8007722 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	e7ff      	b.n	8007722 <I2C_Master_ADDR+0x316>
 8007722:	bf00      	nop
 8007724:	3744      	adds	r7, #68	; 0x44
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d02b      	beq.n	80077a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	781a      	ldrb	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d114      	bne.n	80077a0 <I2C_SlaveTransmit_TXE+0x72>
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b29      	cmp	r3, #41	; 0x29
 800777a:	d111      	bne.n	80077a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2221      	movs	r2, #33	; 0x21
 8007790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2228      	movs	r2, #40	; 0x28
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fa43 	bl	8006c26 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d011      	beq.n	80077de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02c      	beq.n	800785e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d114      	bne.n	800785e <I2C_SlaveReceive_RXNE+0x74>
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b2a      	cmp	r3, #42	; 0x2a
 8007838:	d111      	bne.n	800785e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007848:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2222      	movs	r2, #34	; 0x22
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2228      	movs	r2, #40	; 0x28
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff f9ee 	bl	8006c3a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d012      	beq.n	800789e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078c4:	2b28      	cmp	r3, #40	; 0x28
 80078c6:	d127      	bne.n	8007918 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	089b      	lsrs	r3, r3, #2
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	09db      	lsrs	r3, r3, #7
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	81bb      	strh	r3, [r7, #12]
 80078fa:	e002      	b.n	8007902 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800790a:	89ba      	ldrh	r2, [r7, #12]
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff f99c 	bl	8006c4e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007916:	e008      	b.n	800792a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0202 	mvn.w	r2, #2
 8007920:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007942:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007952:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007980:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007990:	d172      	bne.n	8007a78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b22      	cmp	r3, #34	; 0x22
 8007996:	d002      	beq.n	800799e <I2C_Slave_STOPF+0x6a>
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b2a      	cmp	r3, #42	; 0x2a
 800799c:	d135      	bne.n	8007a0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f043 0204 	orr.w	r2, r3, #4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe f8fa 	bl	8005bd0 <HAL_DMA_GetState>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d049      	beq.n	8007a76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	4a69      	ldr	r2, [pc, #420]	; (8007b8c <I2C_Slave_STOPF+0x258>)
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f8cc 	bl	8005b8c <HAL_DMA_Abort_IT>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03d      	beq.n	8007a76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a08:	e035      	b.n	8007a76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f043 0204 	orr.w	r2, r3, #4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe f8c4 	bl	8005bd0 <HAL_DMA_GetState>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d014      	beq.n	8007a78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	4a4e      	ldr	r2, [pc, #312]	; (8007b8c <I2C_Slave_STOPF+0x258>)
 8007a54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe f896 	bl	8005b8c <HAL_DMA_Abort_IT>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	e000      	b.n	8007a78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03e      	beq.n	8007b00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d112      	bne.n	8007ab6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac0:	2b40      	cmp	r3, #64	; 0x40
 8007ac2:	d112      	bne.n	8007aea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	f043 0204 	orr.w	r2, r3, #4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8b3 	bl	8007c74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b0e:	e039      	b.n	8007b84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	2b2a      	cmp	r3, #42	; 0x2a
 8007b14:	d109      	bne.n	8007b2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2228      	movs	r2, #40	; 0x28
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff f888 	bl	8006c3a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b28      	cmp	r3, #40	; 0x28
 8007b34:	d111      	bne.n	8007b5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <I2C_Slave_STOPF+0x25c>)
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f889 	bl	8006c6a <HAL_I2C_ListenCpltCallback>
}
 8007b58:	e014      	b.n	8007b84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	2b22      	cmp	r3, #34	; 0x22
 8007b60:	d002      	beq.n	8007b68 <I2C_Slave_STOPF+0x234>
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b22      	cmp	r3, #34	; 0x22
 8007b66:	d10d      	bne.n	8007b84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff f85b 	bl	8006c3a <HAL_I2C_SlaveRxCpltCallback>
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	0800816d 	.word	0x0800816d
 8007b90:	ffff0000 	.word	0xffff0000

08007b94 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d002      	beq.n	8007bb6 <I2C_Slave_AF+0x22>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d129      	bne.n	8007c0a <I2C_Slave_AF+0x76>
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b28      	cmp	r3, #40	; 0x28
 8007bba:	d126      	bne.n	8007c0a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a2c      	ldr	r2, [pc, #176]	; (8007c70 <I2C_Slave_AF+0xdc>)
 8007bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bd0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bda:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff f831 	bl	8006c6a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007c08:	e02e      	b.n	8007c68 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b21      	cmp	r3, #33	; 0x21
 8007c0e:	d126      	bne.n	8007c5e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <I2C_Slave_AF+0xdc>)
 8007c14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2221      	movs	r2, #33	; 0x21
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c44:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c54:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fe ffe5 	bl	8006c26 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c5c:	e004      	b.n	8007c68 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c66:	615a      	str	r2, [r3, #20]
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	ffff0000 	.word	0xffff0000

08007c74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b10      	cmp	r3, #16
 8007c8e:	d10a      	bne.n	8007ca6 <I2C_ITError+0x32>
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b22      	cmp	r3, #34	; 0x22
 8007c94:	d107      	bne.n	8007ca6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cac:	2b28      	cmp	r3, #40	; 0x28
 8007cae:	d107      	bne.n	8007cc0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2228      	movs	r2, #40	; 0x28
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007cbe:	e015      	b.n	8007cec <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cce:	d006      	beq.n	8007cde <I2C_ITError+0x6a>
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b60      	cmp	r3, #96	; 0x60
 8007cd4:	d003      	beq.n	8007cde <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfa:	d162      	bne.n	8007dc2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d020      	beq.n	8007d5c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	4a6a      	ldr	r2, [pc, #424]	; (8007ec8 <I2C_ITError+0x254>)
 8007d20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fd ff30 	bl	8005b8c <HAL_DMA_Abort_IT>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8089 	beq.w	8007e46 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d56:	4610      	mov	r0, r2
 8007d58:	4798      	blx	r3
 8007d5a:	e074      	b.n	8007e46 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	4a59      	ldr	r2, [pc, #356]	; (8007ec8 <I2C_ITError+0x254>)
 8007d62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd ff0f 	bl	8005b8c <HAL_DMA_Abort_IT>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d068      	beq.n	8007e46 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b40      	cmp	r3, #64	; 0x40
 8007d80:	d10b      	bne.n	8007d9a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	e041      	b.n	8007e46 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b60      	cmp	r3, #96	; 0x60
 8007dcc:	d125      	bne.n	8007e1a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d10b      	bne.n	8007e02 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fe ff51 	bl	8006cba <HAL_I2C_AbortCpltCallback>
 8007e18:	e015      	b.n	8007e46 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d10b      	bne.n	8007e40 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fe ff30 	bl	8006ca6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10e      	bne.n	8007e74 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d113      	bne.n	8007ec0 <I2C_ITError+0x24c>
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b28      	cmp	r3, #40	; 0x28
 8007e9c:	d110      	bne.n	8007ec0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <I2C_ITError+0x258>)
 8007ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fe fed5 	bl	8006c6a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0800816d 	.word	0x0800816d
 8007ecc:	ffff0000 	.word	0xffff0000

08007ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	460b      	mov	r3, r1
 8007ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d006      	beq.n	8007efa <I2C_MasterRequestWrite+0x2a>
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d003      	beq.n	8007efa <I2C_MasterRequestWrite+0x2a>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ef8:	d108      	bne.n	8007f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e00b      	b.n	8007f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	2b12      	cmp	r3, #18
 8007f12:	d107      	bne.n	8007f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f99a 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e035      	b.n	8007fc2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f5e:	d108      	bne.n	8007f72 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f60:	897b      	ldrh	r3, [r7, #10]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f6e:	611a      	str	r2, [r3, #16]
 8007f70:	e01b      	b.n	8007faa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f72:	897b      	ldrh	r3, [r7, #10]
 8007f74:	11db      	asrs	r3, r3, #7
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0306 	and.w	r3, r3, #6
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f063 030f 	orn	r3, r3, #15
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	490f      	ldr	r1, [pc, #60]	; (8007fcc <I2C_MasterRequestWrite+0xfc>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f9c1 	bl	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e010      	b.n	8007fc2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007fa0:	897b      	ldrh	r3, [r7, #10]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4908      	ldr	r1, [pc, #32]	; (8007fd0 <I2C_MasterRequestWrite+0x100>)
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f9b1 	bl	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	00010008 	.word	0x00010008
 8007fd0:	00010002 	.word	0x00010002

08007fd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d006      	beq.n	800800e <I2C_MasterRequestRead+0x3a>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d003      	beq.n	800800e <I2C_MasterRequestRead+0x3a>
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800800c:	d108      	bne.n	8008020 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e00b      	b.n	8008038 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	2b11      	cmp	r3, #17
 8008026:	d107      	bne.n	8008038 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f910 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e078      	b.n	800815c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008072:	d108      	bne.n	8008086 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008074:	897b      	ldrh	r3, [r7, #10]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	611a      	str	r2, [r3, #16]
 8008084:	e05e      	b.n	8008144 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	11db      	asrs	r3, r3, #7
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0306 	and.w	r3, r3, #6
 8008090:	b2db      	uxtb	r3, r3
 8008092:	f063 030f 	orn	r3, r3, #15
 8008096:	b2da      	uxtb	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4930      	ldr	r1, [pc, #192]	; (8008164 <I2C_MasterRequestRead+0x190>)
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f937 	bl	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e053      	b.n	800815c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080b4:	897b      	ldrh	r3, [r7, #10]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	4929      	ldr	r1, [pc, #164]	; (8008168 <I2C_MasterRequestRead+0x194>)
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f927 	bl	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e043      	b.n	800815c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080f8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f8af 	bl	800826a <I2C_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008126:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e017      	b.n	800815c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800812c:	897b      	ldrh	r3, [r7, #10]
 800812e:	11db      	asrs	r3, r3, #7
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0306 	and.w	r3, r3, #6
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f063 030e 	orn	r3, r3, #14
 800813c:	b2da      	uxtb	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <I2C_MasterRequestRead+0x194>)
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f8e4 	bl	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	00010008 	.word	0x00010008
 8008168:	00010002 	.word	0x00010002

0800816c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008180:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	2200      	movs	r2, #0
 8008190:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	2200      	movs	r2, #0
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c4:	2200      	movs	r2, #0
 80081c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	2200      	movs	r2, #0
 80081d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d10e      	bne.n	8008212 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7fe fd55 	bl	8006cba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008210:	e027      	b.n	8008262 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008218:	2b28      	cmp	r3, #40	; 0x28
 800821a:	d117      	bne.n	800824c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800823a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2228      	movs	r2, #40	; 0x28
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800824a:	e007      	b.n	800825c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7fe fd22 	bl	8006ca6 <HAL_I2C_ErrorCallback>
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800827a:	e025      	b.n	80082c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d021      	beq.n	80082c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008284:	f7fd faf8 	bl	8005878 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <I2C_WaitOnFlagUntilTimeout+0x30>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d116      	bne.n	80082c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e023      	b.n	8008310 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d10d      	bne.n	80082ee <I2C_WaitOnFlagUntilTimeout+0x84>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	43da      	mvns	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4013      	ands	r3, r2
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bf0c      	ite	eq
 80082e4:	2301      	moveq	r3, #1
 80082e6:	2300      	movne	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	e00c      	b.n	8008308 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	43da      	mvns	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	d0b6      	beq.n	800827c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008326:	e051      	b.n	80083cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008336:	d123      	bne.n	8008380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008346:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	f043 0204 	orr.w	r2, r3, #4
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e046      	b.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d021      	beq.n	80083cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008388:	f7fd fa76 	bl	8005878 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d116      	bne.n	80083cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e020      	b.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	0c1b      	lsrs	r3, r3, #16
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d10c      	bne.n	80083f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	43da      	mvns	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4013      	ands	r3, r2
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e00b      	b.n	8008408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	43da      	mvns	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4013      	ands	r3, r2
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bf14      	ite	ne
 8008402:	2301      	movne	r3, #1
 8008404:	2300      	moveq	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d18d      	bne.n	8008328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008422:	e02d      	b.n	8008480 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f8ce 	bl	80085c6 <I2C_IsAcknowledgeFailed>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e02d      	b.n	8008490 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d021      	beq.n	8008480 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843c:	f7fd fa1c 	bl	8005878 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d116      	bne.n	8008480 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	f043 0220 	orr.w	r2, r3, #32
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e007      	b.n	8008490 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b80      	cmp	r3, #128	; 0x80
 800848c:	d1ca      	bne.n	8008424 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084a4:	e02d      	b.n	8008502 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f88d 	bl	80085c6 <I2C_IsAcknowledgeFailed>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e02d      	b.n	8008512 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084bc:	d021      	beq.n	8008502 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084be:	f7fd f9db 	bl	8005878 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d116      	bne.n	8008502 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	f043 0220 	orr.w	r2, r3, #32
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e007      	b.n	8008512 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b04      	cmp	r3, #4
 800850e:	d1ca      	bne.n	80084a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008526:	e042      	b.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b10      	cmp	r3, #16
 8008534:	d119      	bne.n	800856a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f06f 0210 	mvn.w	r2, #16
 800853e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e029      	b.n	80085be <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856a:	f7fd f985 	bl	8005878 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d116      	bne.n	80085ae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e007      	b.n	80085be <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d1b5      	bne.n	8008528 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085dc:	d11b      	bne.n	8008616 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f043 0204 	orr.w	r2, r3, #4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008634:	d103      	bne.n	800863e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800863c:	e007      	b.n	800864e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008642:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008646:	d102      	bne.n	800864e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2208      	movs	r2, #8
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e25b      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d075      	beq.n	8008766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800867a:	4ba3      	ldr	r3, [pc, #652]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b04      	cmp	r3, #4
 8008684:	d00c      	beq.n	80086a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008686:	4ba0      	ldr	r3, [pc, #640]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800868e:	2b08      	cmp	r3, #8
 8008690:	d112      	bne.n	80086b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008692:	4b9d      	ldr	r3, [pc, #628]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800869e:	d10b      	bne.n	80086b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a0:	4b99      	ldr	r3, [pc, #612]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05b      	beq.n	8008764 <HAL_RCC_OscConfig+0x108>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d157      	bne.n	8008764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e236      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c0:	d106      	bne.n	80086d0 <HAL_RCC_OscConfig+0x74>
 80086c2:	4b91      	ldr	r3, [pc, #580]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a90      	ldr	r2, [pc, #576]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e01d      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x98>
 80086da:	4b8b      	ldr	r3, [pc, #556]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a8a      	ldr	r2, [pc, #552]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	4b88      	ldr	r3, [pc, #544]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a87      	ldr	r2, [pc, #540]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086f4:	4b84      	ldr	r3, [pc, #528]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a83      	ldr	r2, [pc, #524]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4b81      	ldr	r3, [pc, #516]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a80      	ldr	r2, [pc, #512]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800870a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008714:	f7fd f8b0 	bl	8005878 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800871c:	f7fd f8ac 	bl	8005878 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b64      	cmp	r3, #100	; 0x64
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e1fb      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800872e:	4b76      	ldr	r3, [pc, #472]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0xc0>
 800873a:	e014      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873c:	f7fd f89c 	bl	8005878 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008744:	f7fd f898 	bl	8005878 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e1e7      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008756:	4b6c      	ldr	r3, [pc, #432]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0xe8>
 8008762:	e000      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d063      	beq.n	800883a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008772:	4b65      	ldr	r3, [pc, #404]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 030c 	and.w	r3, r3, #12
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800877e:	4b62      	ldr	r3, [pc, #392]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008786:	2b08      	cmp	r3, #8
 8008788:	d11c      	bne.n	80087c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800878a:	4b5f      	ldr	r3, [pc, #380]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d116      	bne.n	80087c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008796:	4b5c      	ldr	r3, [pc, #368]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <HAL_RCC_OscConfig+0x152>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d001      	beq.n	80087ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e1bb      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b56      	ldr	r3, [pc, #344]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4952      	ldr	r1, [pc, #328]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087c2:	e03a      	b.n	800883a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d020      	beq.n	800880e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087cc:	4b4f      	ldr	r3, [pc, #316]	; (800890c <HAL_RCC_OscConfig+0x2b0>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d2:	f7fd f851 	bl	8005878 <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087da:	f7fd f84d 	bl	8005878 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e19c      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ec:	4b46      	ldr	r3, [pc, #280]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0f0      	beq.n	80087da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f8:	4b43      	ldr	r3, [pc, #268]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4940      	ldr	r1, [pc, #256]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]
 800880c:	e015      	b.n	800883a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800880e:	4b3f      	ldr	r3, [pc, #252]	; (800890c <HAL_RCC_OscConfig+0x2b0>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fd f830 	bl	8005878 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800881c:	f7fd f82c 	bl	8005878 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e17b      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d030      	beq.n	80088a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d016      	beq.n	800887c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800884e:	4b30      	ldr	r3, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x2b4>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008854:	f7fd f810 	bl	8005878 <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800885c:	f7fd f80c 	bl	8005878 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e15b      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800886e:	4b26      	ldr	r3, [pc, #152]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x200>
 800887a:	e015      	b.n	80088a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800887c:	4b24      	ldr	r3, [pc, #144]	; (8008910 <HAL_RCC_OscConfig+0x2b4>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008882:	f7fc fff9 	bl	8005878 <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800888a:	f7fc fff5 	bl	8005878 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e144      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800889c:	4b1a      	ldr	r3, [pc, #104]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800889e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80a0 	beq.w	80089f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a0e      	ldr	r2, [pc, #56]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d121      	bne.n	8008936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088f2:	4b08      	ldr	r3, [pc, #32]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a07      	ldr	r2, [pc, #28]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088fe:	f7fc ffbb 	bl	8005878 <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008904:	e011      	b.n	800892a <HAL_RCC_OscConfig+0x2ce>
 8008906:	bf00      	nop
 8008908:	40023800 	.word	0x40023800
 800890c:	42470000 	.word	0x42470000
 8008910:	42470e80 	.word	0x42470e80
 8008914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fc ffae 	bl	8005878 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e0fd      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892a:	4b81      	ldr	r3, [pc, #516]	; (8008b30 <HAL_RCC_OscConfig+0x4d4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f0      	beq.n	8008918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d106      	bne.n	800894c <HAL_RCC_OscConfig+0x2f0>
 800893e:	4b7d      	ldr	r3, [pc, #500]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008942:	4a7c      	ldr	r2, [pc, #496]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6713      	str	r3, [r2, #112]	; 0x70
 800894a:	e01c      	b.n	8008986 <HAL_RCC_OscConfig+0x32a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b05      	cmp	r3, #5
 8008952:	d10c      	bne.n	800896e <HAL_RCC_OscConfig+0x312>
 8008954:	4b77      	ldr	r3, [pc, #476]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	4a76      	ldr	r2, [pc, #472]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 800895a:	f043 0304 	orr.w	r3, r3, #4
 800895e:	6713      	str	r3, [r2, #112]	; 0x70
 8008960:	4b74      	ldr	r3, [pc, #464]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	4a73      	ldr	r2, [pc, #460]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	6713      	str	r3, [r2, #112]	; 0x70
 800896c:	e00b      	b.n	8008986 <HAL_RCC_OscConfig+0x32a>
 800896e:	4b71      	ldr	r3, [pc, #452]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	4a70      	ldr	r2, [pc, #448]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	6713      	str	r3, [r2, #112]	; 0x70
 800897a:	4b6e      	ldr	r3, [pc, #440]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	4a6d      	ldr	r2, [pc, #436]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008980:	f023 0304 	bic.w	r3, r3, #4
 8008984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d015      	beq.n	80089ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898e:	f7fc ff73 	bl	8005878 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008994:	e00a      	b.n	80089ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008996:	f7fc ff6f 	bl	8005878 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e0bc      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ac:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0ee      	beq.n	8008996 <HAL_RCC_OscConfig+0x33a>
 80089b8:	e014      	b.n	80089e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ba:	f7fc ff5d 	bl	8005878 <HAL_GetTick>
 80089be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089c0:	e00a      	b.n	80089d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089c2:	f7fc ff59 	bl	8005878 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e0a6      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d8:	4b56      	ldr	r3, [pc, #344]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 80089da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1ee      	bne.n	80089c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d105      	bne.n	80089f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089ea:	4b52      	ldr	r3, [pc, #328]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	4a51      	ldr	r2, [pc, #324]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 80089f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8092 	beq.w	8008b24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a00:	4b4c      	ldr	r3, [pc, #304]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 030c 	and.w	r3, r3, #12
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d05c      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d141      	bne.n	8008a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a14:	4b48      	ldr	r3, [pc, #288]	; (8008b38 <HAL_RCC_OscConfig+0x4dc>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7fc ff2d 	bl	8005878 <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a22:	f7fc ff29 	bl	8005878 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e078      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a34:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	019b      	lsls	r3, r3, #6
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	4933      	ldr	r1, [pc, #204]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6a:	4b33      	ldr	r3, [pc, #204]	; (8008b38 <HAL_RCC_OscConfig+0x4dc>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a70:	f7fc ff02 	bl	8005878 <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a78:	f7fc fefe 	bl	8005878 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e04d      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a8a:	4b2a      	ldr	r3, [pc, #168]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0x41c>
 8008a96:	e045      	b.n	8008b24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a98:	4b27      	ldr	r3, [pc, #156]	; (8008b38 <HAL_RCC_OscConfig+0x4dc>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9e:	f7fc feeb 	bl	8005878 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa6:	f7fc fee7 	bl	8005878 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e036      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f0      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x44a>
 8008ac4:	e02e      	b.n	8008b24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e029      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ad2:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <HAL_RCC_OscConfig+0x4d8>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d11c      	bne.n	8008b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d115      	bne.n	8008b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008afa:	4013      	ands	r3, r2
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d10d      	bne.n	8008b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d106      	bne.n	8008b20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	40007000 	.word	0x40007000
 8008b34:	40023800 	.word	0x40023800
 8008b38:	42470060 	.word	0x42470060

08008b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0cc      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b50:	4b68      	ldr	r3, [pc, #416]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d90c      	bls.n	8008b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b5e:	4b65      	ldr	r3, [pc, #404]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b66:	4b63      	ldr	r3, [pc, #396]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d001      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e0b8      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d020      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b90:	4b59      	ldr	r3, [pc, #356]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4a58      	ldr	r2, [pc, #352]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ba8:	4b53      	ldr	r3, [pc, #332]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	4a52      	ldr	r2, [pc, #328]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bb4:	4b50      	ldr	r3, [pc, #320]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	494d      	ldr	r1, [pc, #308]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d044      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d107      	bne.n	8008bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bda:	4b47      	ldr	r3, [pc, #284]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d119      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e07f      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d107      	bne.n	8008c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfa:	4b3f      	ldr	r3, [pc, #252]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e06f      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c0a:	4b3b      	ldr	r3, [pc, #236]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e067      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c1a:	4b37      	ldr	r3, [pc, #220]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 0203 	bic.w	r2, r3, #3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4934      	ldr	r1, [pc, #208]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c2c:	f7fc fe24 	bl	8005878 <HAL_GetTick>
 8008c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c32:	e00a      	b.n	8008c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c34:	f7fc fe20 	bl	8005878 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e04f      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4a:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 020c 	and.w	r2, r3, #12
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d1eb      	bne.n	8008c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c5c:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d20c      	bcs.n	8008c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6a:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c72:	4b20      	ldr	r3, [pc, #128]	; (8008cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d001      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e032      	b.n	8008cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4916      	ldr	r1, [pc, #88]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	490e      	ldr	r1, [pc, #56]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cc2:	f000 f821 	bl	8008d08 <HAL_RCC_GetSysClockFreq>
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	091b      	lsrs	r3, r3, #4
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	4a0a      	ldr	r2, [pc, #40]	; (8008cfc <HAL_RCC_ClockConfig+0x1c0>)
 8008cd4:	5cd3      	ldrb	r3, [r2, r3]
 8008cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <HAL_RCC_ClockConfig+0x1c8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fa feb6 	bl	8003a54 <HAL_InitTick>

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	40023c00 	.word	0x40023c00
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	0800e648 	.word	0x0800e648
 8008d00:	20000064 	.word	0x20000064
 8008d04:	20000068 	.word	0x20000068

08008d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	2300      	movs	r3, #0
 8008d18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d1e:	4b50      	ldr	r3, [pc, #320]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d007      	beq.n	8008d3a <HAL_RCC_GetSysClockFreq+0x32>
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	d008      	beq.n	8008d40 <HAL_RCC_GetSysClockFreq+0x38>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 808d 	bne.w	8008e4e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d34:	4b4b      	ldr	r3, [pc, #300]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008d36:	60bb      	str	r3, [r7, #8]
       break;
 8008d38:	e08c      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d3a:	4b4b      	ldr	r3, [pc, #300]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d3c:	60bb      	str	r3, [r7, #8]
      break;
 8008d3e:	e089      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d40:	4b47      	ldr	r3, [pc, #284]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d4a:	4b45      	ldr	r3, [pc, #276]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d023      	beq.n	8008d9e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d56:	4b42      	ldr	r3, [pc, #264]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	099b      	lsrs	r3, r3, #6
 8008d5c:	f04f 0400 	mov.w	r4, #0
 8008d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	ea03 0501 	and.w	r5, r3, r1
 8008d6c:	ea04 0602 	and.w	r6, r4, r2
 8008d70:	4a3d      	ldr	r2, [pc, #244]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d72:	fb02 f106 	mul.w	r1, r2, r6
 8008d76:	2200      	movs	r2, #0
 8008d78:	fb02 f205 	mul.w	r2, r2, r5
 8008d7c:	440a      	add	r2, r1
 8008d7e:	493a      	ldr	r1, [pc, #232]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d80:	fba5 0101 	umull	r0, r1, r5, r1
 8008d84:	1853      	adds	r3, r2, r1
 8008d86:	4619      	mov	r1, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f04f 0400 	mov.w	r4, #0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4623      	mov	r3, r4
 8008d92:	f7f7 fc71 	bl	8000678 <__aeabi_uldivmod>
 8008d96:	4603      	mov	r3, r0
 8008d98:	460c      	mov	r4, r1
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	e049      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d9e:	4b30      	ldr	r3, [pc, #192]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	099b      	lsrs	r3, r3, #6
 8008da4:	f04f 0400 	mov.w	r4, #0
 8008da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	ea03 0501 	and.w	r5, r3, r1
 8008db4:	ea04 0602 	and.w	r6, r4, r2
 8008db8:	4629      	mov	r1, r5
 8008dba:	4632      	mov	r2, r6
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	f04f 0400 	mov.w	r4, #0
 8008dc4:	0154      	lsls	r4, r2, #5
 8008dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008dca:	014b      	lsls	r3, r1, #5
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4622      	mov	r2, r4
 8008dd0:	1b49      	subs	r1, r1, r5
 8008dd2:	eb62 0206 	sbc.w	r2, r2, r6
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	f04f 0400 	mov.w	r4, #0
 8008dde:	0194      	lsls	r4, r2, #6
 8008de0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008de4:	018b      	lsls	r3, r1, #6
 8008de6:	1a5b      	subs	r3, r3, r1
 8008de8:	eb64 0402 	sbc.w	r4, r4, r2
 8008dec:	f04f 0100 	mov.w	r1, #0
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	00e2      	lsls	r2, r4, #3
 8008df6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008dfa:	00d9      	lsls	r1, r3, #3
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4614      	mov	r4, r2
 8008e00:	195b      	adds	r3, r3, r5
 8008e02:	eb44 0406 	adc.w	r4, r4, r6
 8008e06:	f04f 0100 	mov.w	r1, #0
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	02a2      	lsls	r2, r4, #10
 8008e10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008e14:	0299      	lsls	r1, r3, #10
 8008e16:	460b      	mov	r3, r1
 8008e18:	4614      	mov	r4, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f04f 0400 	mov.w	r4, #0
 8008e24:	461a      	mov	r2, r3
 8008e26:	4623      	mov	r3, r4
 8008e28:	f7f7 fc26 	bl	8000678 <__aeabi_uldivmod>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e32:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4a:	60bb      	str	r3, [r7, #8]
      break;
 8008e4c:	e002      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e4e:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008e50:	60bb      	str	r3, [r7, #8]
      break;
 8008e52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e54:	68bb      	ldr	r3, [r7, #8]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023800 	.word	0x40023800
 8008e64:	00f42400 	.word	0x00f42400
 8008e68:	017d7840 	.word	0x017d7840

08008e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000064 	.word	0x20000064

08008e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e88:	f7ff fff0 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008e8c:	4601      	mov	r1, r0
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	0a9b      	lsrs	r3, r3, #10
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	4a03      	ldr	r2, [pc, #12]	; (8008ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e9a:	5cd3      	ldrb	r3, [r2, r3]
 8008e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	0800e658 	.word	0x0800e658

08008eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eb0:	f7ff ffdc 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	0b5b      	lsrs	r3, r3, #13
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	4a03      	ldr	r2, [pc, #12]	; (8008ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec2:	5cd3      	ldrb	r3, [r2, r3]
 8008ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	0800e658 	.word	0x0800e658

08008ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220f      	movs	r2, #15
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ee4:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 0203 	and.w	r2, r3, #3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008efc:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f08:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	08db      	lsrs	r3, r3, #3
 8008f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <HAL_RCC_GetClockConfig+0x60>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 020f 	and.w	r2, r3, #15
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	601a      	str	r2, [r3, #0]
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40023800 	.word	0x40023800
 8008f34:	40023c00 	.word	0x40023c00

08008f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e056      	b.n	8008ff8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fa fb17 	bl	8003598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	ea42 0103 	orr.w	r1, r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	0c1b      	lsrs	r3, r3, #16
 8008fc8:	f003 0104 	and.w	r1, r3, #4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e01d      	b.n	800904e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fa fb72 	bl	8003710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f000 fcb0 	bl	80099a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d007      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e01d      	b.n	80090ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d106      	bne.n	80090ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f815 	bl	80090f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f000 fc61 	bl	80099a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e01d      	b.n	8009156 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f815 	bl	800915e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f000 fc2c 	bl	80099a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b0c      	cmp	r3, #12
 8009182:	d841      	bhi.n	8009208 <HAL_TIM_IC_Start_IT+0x94>
 8009184:	a201      	add	r2, pc, #4	; (adr r2, 800918c <HAL_TIM_IC_Start_IT+0x18>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091c1 	.word	0x080091c1
 8009190:	08009209 	.word	0x08009209
 8009194:	08009209 	.word	0x08009209
 8009198:	08009209 	.word	0x08009209
 800919c:	080091d3 	.word	0x080091d3
 80091a0:	08009209 	.word	0x08009209
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009209 	.word	0x08009209
 80091ac:	080091e5 	.word	0x080091e5
 80091b0:	08009209 	.word	0x08009209
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009209 	.word	0x08009209
 80091bc:	080091f7 	.word	0x080091f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0202 	orr.w	r2, r2, #2
 80091ce:	60da      	str	r2, [r3, #12]
      break;
 80091d0:	e01b      	b.n	800920a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0204 	orr.w	r2, r2, #4
 80091e0:	60da      	str	r2, [r3, #12]
      break;
 80091e2:	e012      	b.n	800920a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0208 	orr.w	r2, r2, #8
 80091f2:	60da      	str	r2, [r3, #12]
      break;
 80091f4:	e009      	b.n	800920a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0210 	orr.w	r2, r2, #16
 8009204:	60da      	str	r2, [r3, #12]
      break;
 8009206:	e000      	b.n	800920a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8009208:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2201      	movs	r2, #1
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 ff8a 	bl	800a12c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b06      	cmp	r3, #6
 8009228:	d007      	beq.n	800923a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b0c      	cmp	r3, #12
 8009252:	d841      	bhi.n	80092d8 <HAL_TIM_IC_Stop_IT+0x94>
 8009254:	a201      	add	r2, pc, #4	; (adr r2, 800925c <HAL_TIM_IC_Stop_IT+0x18>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009291 	.word	0x08009291
 8009260:	080092d9 	.word	0x080092d9
 8009264:	080092d9 	.word	0x080092d9
 8009268:	080092d9 	.word	0x080092d9
 800926c:	080092a3 	.word	0x080092a3
 8009270:	080092d9 	.word	0x080092d9
 8009274:	080092d9 	.word	0x080092d9
 8009278:	080092d9 	.word	0x080092d9
 800927c:	080092b5 	.word	0x080092b5
 8009280:	080092d9 	.word	0x080092d9
 8009284:	080092d9 	.word	0x080092d9
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092c7 	.word	0x080092c7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0202 	bic.w	r2, r2, #2
 800929e:	60da      	str	r2, [r3, #12]
      break;
 80092a0:	e01b      	b.n	80092da <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0204 	bic.w	r2, r2, #4
 80092b0:	60da      	str	r2, [r3, #12]
      break;
 80092b2:	e012      	b.n	80092da <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0208 	bic.w	r2, r2, #8
 80092c2:	60da      	str	r2, [r3, #12]
      break;
 80092c4:	e009      	b.n	80092da <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0210 	bic.w	r2, r2, #16
 80092d4:	60da      	str	r2, [r3, #12]
      break;
 80092d6:	e000      	b.n	80092da <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80092d8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2200      	movs	r2, #0
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ff22 	bl	800a12c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6a1a      	ldr	r2, [r3, #32]
 80092ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10f      	bne.n	8009318 <HAL_TIM_IC_Stop_IT+0xd4>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a1a      	ldr	r2, [r3, #32]
 80092fe:	f240 4344 	movw	r3, #1092	; 0x444
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d107      	bne.n	8009318 <HAL_TIM_IC_Stop_IT+0xd4>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0201 	bic.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop

08009324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b02      	cmp	r3, #2
 8009338:	d122      	bne.n	8009380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b02      	cmp	r3, #2
 8009346:	d11b      	bne.n	8009380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0202 	mvn.w	r2, #2
 8009350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f9 f920 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 800936c:	e005      	b.n	800937a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 faf9 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fb00 	bl	800997a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b04      	cmp	r3, #4
 800938c:	d122      	bne.n	80093d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d11b      	bne.n	80093d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0204 	mvn.w	r2, #4
 80093a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7f9 f8f6 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 80093c0:	e005      	b.n	80093ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 facf 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fad6 	bl	800997a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d122      	bne.n	8009428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0308 	and.w	r3, r3, #8
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d11b      	bne.n	8009428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0208 	mvn.w	r2, #8
 80093f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2204      	movs	r2, #4
 80093fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f9 f8cc 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8009414:	e005      	b.n	8009422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 faa5 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 faac 	bl	800997a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b10      	cmp	r3, #16
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b10      	cmp	r3, #16
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0210 	mvn.w	r2, #16
 800944c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2208      	movs	r2, #8
 8009452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f9 f8a2 	bl	80025ac <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa7b 	bl	8009966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa82 	bl	800997a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b01      	cmp	r3, #1
 8009488:	d10e      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b01      	cmp	r3, #1
 8009496:	d107      	bne.n	80094a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0201 	mvn.w	r2, #1
 80094a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7f9 f974 	bl	8002790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d10e      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b80      	cmp	r3, #128	; 0x80
 80094c2:	d107      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff1c 	bl	800a30c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b40      	cmp	r3, #64	; 0x40
 80094e0:	d10e      	bne.n	8009500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d107      	bne.n	8009500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa47 	bl	800998e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b20      	cmp	r3, #32
 800950c:	d10e      	bne.n	800952c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b20      	cmp	r3, #32
 800951a:	d107      	bne.n	800952c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0220 	mvn.w	r2, #32
 8009524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fee6 	bl	800a2f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_TIM_IC_ConfigChannel+0x1a>
 800954a:	2302      	movs	r3, #2
 800954c:	e08a      	b.n	8009664 <HAL_TIM_IC_ConfigChannel+0x130>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2202      	movs	r2, #2
 800955a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6819      	ldr	r1, [r3, #0]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f000 fc22 	bl	8009dbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 020c 	bic.w	r2, r2, #12
 8009586:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6999      	ldr	r1, [r3, #24]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	619a      	str	r2, [r3, #24]
 800959a:	e05a      	b.n	8009652 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d11c      	bne.n	80095dc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f000 fc9a 	bl	8009eea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80095c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6999      	ldr	r1, [r3, #24]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	021a      	lsls	r2, r3, #8
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	619a      	str	r2, [r3, #24]
 80095da:	e03a      	b.n	8009652 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d11b      	bne.n	800961a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6819      	ldr	r1, [r3, #0]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f000 fce7 	bl	8009fc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 020c 	bic.w	r2, r2, #12
 8009604:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69d9      	ldr	r1, [r3, #28]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	61da      	str	r2, [r3, #28]
 8009618:	e01b      	b.n	8009652 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6819      	ldr	r1, [r3, #0]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f000 fd07 	bl	800a03c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69da      	ldr	r2, [r3, #28]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800963c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69d9      	ldr	r1, [r3, #28]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	021a      	lsls	r2, r3, #8
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009682:	2302      	movs	r3, #2
 8009684:	e0b4      	b.n	80097f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	f200 809f 	bhi.w	80097dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800969e:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096d9 	.word	0x080096d9
 80096a8:	080097dd 	.word	0x080097dd
 80096ac:	080097dd 	.word	0x080097dd
 80096b0:	080097dd 	.word	0x080097dd
 80096b4:	08009719 	.word	0x08009719
 80096b8:	080097dd 	.word	0x080097dd
 80096bc:	080097dd 	.word	0x080097dd
 80096c0:	080097dd 	.word	0x080097dd
 80096c4:	0800975b 	.word	0x0800975b
 80096c8:	080097dd 	.word	0x080097dd
 80096cc:	080097dd 	.word	0x080097dd
 80096d0:	080097dd 	.word	0x080097dd
 80096d4:	0800979b 	.word	0x0800979b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f9e0 	bl	8009aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0208 	orr.w	r2, r2, #8
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0204 	bic.w	r2, r2, #4
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6999      	ldr	r1, [r3, #24]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	619a      	str	r2, [r3, #24]
      break;
 8009716:	e062      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fa26 	bl	8009b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	021a      	lsls	r2, r3, #8
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	619a      	str	r2, [r3, #24]
      break;
 8009758:	e041      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fa71 	bl	8009c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0204 	bic.w	r2, r2, #4
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69d9      	ldr	r1, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	61da      	str	r2, [r3, #28]
      break;
 8009798:	e021      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fabb 	bl	8009d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	021a      	lsls	r2, r3, #8
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	61da      	str	r2, [r3, #28]
      break;
 80097da:	e000      	b.n	80097de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80097dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_TIM_ConfigClockSource+0x18>
 800980c:	2302      	movs	r3, #2
 800980e:	e0a6      	b.n	800995e <HAL_TIM_ConfigClockSource+0x166>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800982e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009836:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d067      	beq.n	8009918 <HAL_TIM_ConfigClockSource+0x120>
 8009848:	2b40      	cmp	r3, #64	; 0x40
 800984a:	d80b      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x6c>
 800984c:	2b10      	cmp	r3, #16
 800984e:	d073      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
 8009850:	2b10      	cmp	r3, #16
 8009852:	d802      	bhi.n	800985a <HAL_TIM_ConfigClockSource+0x62>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06f      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009858:	e078      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800985a:	2b20      	cmp	r3, #32
 800985c:	d06c      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
 800985e:	2b30      	cmp	r3, #48	; 0x30
 8009860:	d06a      	beq.n	8009938 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009862:	e073      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009864:	2b70      	cmp	r3, #112	; 0x70
 8009866:	d00d      	beq.n	8009884 <HAL_TIM_ConfigClockSource+0x8c>
 8009868:	2b70      	cmp	r3, #112	; 0x70
 800986a:	d804      	bhi.n	8009876 <HAL_TIM_ConfigClockSource+0x7e>
 800986c:	2b50      	cmp	r3, #80	; 0x50
 800986e:	d033      	beq.n	80098d8 <HAL_TIM_ConfigClockSource+0xe0>
 8009870:	2b60      	cmp	r3, #96	; 0x60
 8009872:	d041      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009874:	e06a      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987a:	d066      	beq.n	800994a <HAL_TIM_ConfigClockSource+0x152>
 800987c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009880:	d017      	beq.n	80098b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009882:	e063      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6899      	ldr	r1, [r3, #8]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f000 fc2a 	bl	800a0ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	609a      	str	r2, [r3, #8]
      break;
 80098b0:	e04c      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	6899      	ldr	r1, [r3, #8]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f000 fc13 	bl	800a0ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098d4:	609a      	str	r2, [r3, #8]
      break;
 80098d6:	e039      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f000 fad1 	bl	8009e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2150      	movs	r1, #80	; 0x50
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fbe0 	bl	800a0b6 <TIM_ITRx_SetConfig>
      break;
 80098f6:	e029      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	461a      	mov	r2, r3
 8009906:	f000 fb2d 	bl	8009f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2160      	movs	r1, #96	; 0x60
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fbd0 	bl	800a0b6 <TIM_ITRx_SetConfig>
      break;
 8009916:	e019      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6859      	ldr	r1, [r3, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	461a      	mov	r2, r3
 8009926:	f000 fab1 	bl	8009e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2140      	movs	r1, #64	; 0x40
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fbc0 	bl	800a0b6 <TIM_ITRx_SetConfig>
      break;
 8009936:	e009      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f000 fbb7 	bl	800a0b6 <TIM_ITRx_SetConfig>
      break;
 8009948:	e000      	b.n	800994c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800994a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
	...

080099a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a34      	ldr	r2, [pc, #208]	; (8009a88 <TIM_Base_SetConfig+0xe4>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00f      	beq.n	80099dc <TIM_Base_SetConfig+0x38>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c2:	d00b      	beq.n	80099dc <TIM_Base_SetConfig+0x38>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a31      	ldr	r2, [pc, #196]	; (8009a8c <TIM_Base_SetConfig+0xe8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d007      	beq.n	80099dc <TIM_Base_SetConfig+0x38>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a30      	ldr	r2, [pc, #192]	; (8009a90 <TIM_Base_SetConfig+0xec>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d003      	beq.n	80099dc <TIM_Base_SetConfig+0x38>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a2f      	ldr	r2, [pc, #188]	; (8009a94 <TIM_Base_SetConfig+0xf0>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d108      	bne.n	80099ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <TIM_Base_SetConfig+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d01b      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099fc:	d017      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a22      	ldr	r2, [pc, #136]	; (8009a8c <TIM_Base_SetConfig+0xe8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d013      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a21      	ldr	r2, [pc, #132]	; (8009a90 <TIM_Base_SetConfig+0xec>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d00f      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a20      	ldr	r2, [pc, #128]	; (8009a94 <TIM_Base_SetConfig+0xf0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d00b      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a1f      	ldr	r2, [pc, #124]	; (8009a98 <TIM_Base_SetConfig+0xf4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d007      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a1e      	ldr	r2, [pc, #120]	; (8009a9c <TIM_Base_SetConfig+0xf8>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d003      	beq.n	8009a2e <TIM_Base_SetConfig+0x8a>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a1d      	ldr	r2, [pc, #116]	; (8009aa0 <TIM_Base_SetConfig+0xfc>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d108      	bne.n	8009a40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a08      	ldr	r2, [pc, #32]	; (8009a88 <TIM_Base_SetConfig+0xe4>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d103      	bne.n	8009a74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	691a      	ldr	r2, [r3, #16]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	615a      	str	r2, [r3, #20]
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	40010000 	.word	0x40010000
 8009a8c:	40000400 	.word	0x40000400
 8009a90:	40000800 	.word	0x40000800
 8009a94:	40000c00 	.word	0x40000c00
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	40014400 	.word	0x40014400
 8009aa0:	40014800 	.word	0x40014800

08009aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0201 	bic.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f023 0302 	bic.w	r3, r3, #2
 8009aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <TIM_OC1_SetConfig+0xc8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d10c      	bne.n	8009b1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f023 0308 	bic.w	r3, r3, #8
 8009b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f023 0304 	bic.w	r3, r3, #4
 8009b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a13      	ldr	r2, [pc, #76]	; (8009b6c <TIM_OC1_SetConfig+0xc8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d111      	bne.n	8009b46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	40010000 	.word	0x40010000

08009b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	f023 0210 	bic.w	r2, r3, #16
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0320 	bic.w	r3, r3, #32
 8009bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <TIM_OC2_SetConfig+0xd4>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d10d      	bne.n	8009bec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a15      	ldr	r2, [pc, #84]	; (8009c44 <TIM_OC2_SetConfig+0xd4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d113      	bne.n	8009c1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	40010000 	.word	0x40010000

08009c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <TIM_OC3_SetConfig+0xd0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d10d      	bne.n	8009cc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <TIM_OC3_SetConfig+0xd0>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d113      	bne.n	8009cf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	621a      	str	r2, [r3, #32]
}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	40010000 	.word	0x40010000

08009d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a10      	ldr	r2, [pc, #64]	; (8009db8 <TIM_OC4_SetConfig+0x9c>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d109      	bne.n	8009d90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	019b      	lsls	r3, r3, #6
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	40010000 	.word	0x40010000

08009dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0201 	bic.w	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4a24      	ldr	r2, [pc, #144]	; (8009e78 <TIM_TI1_SetConfig+0xbc>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d013      	beq.n	8009e12 <TIM_TI1_SetConfig+0x56>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df0:	d00f      	beq.n	8009e12 <TIM_TI1_SetConfig+0x56>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4a21      	ldr	r2, [pc, #132]	; (8009e7c <TIM_TI1_SetConfig+0xc0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00b      	beq.n	8009e12 <TIM_TI1_SetConfig+0x56>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4a20      	ldr	r2, [pc, #128]	; (8009e80 <TIM_TI1_SetConfig+0xc4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d007      	beq.n	8009e12 <TIM_TI1_SetConfig+0x56>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a1f      	ldr	r2, [pc, #124]	; (8009e84 <TIM_TI1_SetConfig+0xc8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d003      	beq.n	8009e12 <TIM_TI1_SetConfig+0x56>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a1e      	ldr	r2, [pc, #120]	; (8009e88 <TIM_TI1_SetConfig+0xcc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d101      	bne.n	8009e16 <TIM_TI1_SetConfig+0x5a>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <TIM_TI1_SetConfig+0x5c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d008      	beq.n	8009e2e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e003      	b.n	8009e36 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f043 0301 	orr.w	r3, r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f023 030a 	bic.w	r3, r3, #10
 8009e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f003 030a 	and.w	r3, r3, #10
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40000400 	.word	0x40000400
 8009e80:	40000800 	.word	0x40000800
 8009e84:	40000c00 	.word	0x40000c00
 8009e88:	40014000 	.word	0x40014000

08009e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	f023 0201 	bic.w	r2, r3, #1
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f023 030a 	bic.w	r3, r3, #10
 8009ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	621a      	str	r2, [r3, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b087      	sub	sp, #28
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	f023 0210 	bic.w	r2, r3, #16
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	021b      	lsls	r3, r3, #8
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	031b      	lsls	r3, r3, #12
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	621a      	str	r2, [r3, #32]
}
 8009f58:	bf00      	nop
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	f023 0210 	bic.w	r2, r3, #16
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	031b      	lsls	r3, r3, #12
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	621a      	str	r2, [r3, #32]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f023 0303 	bic.w	r3, r3, #3
 8009ff0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	b2db      	uxtb	r3, r3
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a014:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	021b      	lsls	r3, r3, #8
 800a01a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	621a      	str	r2, [r3, #32]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a07a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	031b      	lsls	r3, r3, #12
 800a080:	b29b      	uxth	r3, r3
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a08e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	031b      	lsls	r3, r3, #12
 800a094:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f043 0307 	orr.w	r3, r3, #7
 800a0d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	609a      	str	r2, [r3, #8]
}
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	021a      	lsls	r2, r3, #8
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	431a      	orrs	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	4313      	orrs	r3, r2
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	609a      	str	r2, [r3, #8]
}
 800a120:	bf00      	nop
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f003 031f 	and.w	r3, r3, #31
 800a13e:	2201      	movs	r2, #1
 800a140:	fa02 f303 	lsl.w	r3, r2, r3
 800a144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	43db      	mvns	r3, r3
 800a14e:	401a      	ands	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a1a      	ldr	r2, [r3, #32]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f003 031f 	and.w	r3, r3, #31
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	fa01 f303 	lsl.w	r3, r1, r3
 800a164:	431a      	orrs	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
}
 800a16a:	bf00      	nop
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
	...

0800a178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e050      	b.n	800a232 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a1c      	ldr	r2, [pc, #112]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d018      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1dc:	d013      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a18      	ldr	r2, [pc, #96]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00e      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a16      	ldr	r2, [pc, #88]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d009      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a15      	ldr	r2, [pc, #84]	; (800a24c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a13      	ldr	r2, [pc, #76]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10c      	bne.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a20c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	4313      	orrs	r3, r2
 800a216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	40010000 	.word	0x40010000
 800a244:	40000400 	.word	0x40000400
 800a248:	40000800 	.word	0x40000800
 800a24c:	40000c00 	.word	0x40000c00
 800a250:	40014000 	.word	0x40014000

0800a254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d101      	bne.n	800a270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e03d      	b.n	800a2ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e03f      	b.n	800a3b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7f9 faca 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	; 0x24
 800a350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fcad 	bl	800acc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	695a      	ldr	r2, [r3, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b088      	sub	sp, #32
 800a3be:	af02      	add	r7, sp, #8
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	603b      	str	r3, [r7, #0]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	f040 8083 	bne.w	800a4e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <HAL_UART_Transmit+0x2e>
 800a3e2:	88fb      	ldrh	r3, [r7, #6]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e07b      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d101      	bne.n	800a3fa <HAL_UART_Transmit+0x40>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e074      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2221      	movs	r2, #33	; 0x21
 800a40c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a410:	f7fb fa32 	bl	8005878 <HAL_GetTick>
 800a414:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	88fa      	ldrh	r2, [r7, #6]
 800a41a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a42a:	e042      	b.n	800a4b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a430:	b29b      	uxth	r3, r3
 800a432:	3b01      	subs	r3, #1
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a442:	d122      	bne.n	800a48a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	2180      	movs	r1, #128	; 0x80
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fab6 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e042      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a470:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d103      	bne.n	800a482 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	3302      	adds	r3, #2
 800a47e:	60bb      	str	r3, [r7, #8]
 800a480:	e017      	b.n	800a4b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	3301      	adds	r3, #1
 800a486:	60bb      	str	r3, [r7, #8]
 800a488:	e013      	b.n	800a4b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2200      	movs	r2, #0
 800a492:	2180      	movs	r1, #128	; 0x80
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fa93 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e01f      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	60ba      	str	r2, [r7, #8]
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1b7      	bne.n	800a42c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2140      	movs	r1, #64	; 0x40
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fa7a 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e006      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e000      	b.n	800a4e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a4e2:	2302      	movs	r3, #2
  }
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b20      	cmp	r3, #32
 800a50a:	f040 8090 	bne.w	800a62e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <HAL_UART_Receive+0x2e>
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e088      	b.n	800a630 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_UART_Receive+0x40>
 800a528:	2302      	movs	r3, #2
 800a52a:	e081      	b.n	800a630 <HAL_UART_Receive+0x144>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2222      	movs	r2, #34	; 0x22
 800a53e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a542:	f7fb f999 	bl	8005878 <HAL_GetTick>
 800a546:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	88fa      	ldrh	r2, [r7, #6]
 800a54c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	88fa      	ldrh	r2, [r7, #6]
 800a552:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a55c:	e05c      	b.n	800a618 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a574:	d12b      	bne.n	800a5ce <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2200      	movs	r2, #0
 800a57e:	2120      	movs	r1, #32
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 fa1d 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e04f      	b.n	800a630 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10c      	bne.n	800a5b6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3302      	adds	r3, #2
 800a5b2:	60bb      	str	r3, [r7, #8]
 800a5b4:	e030      	b.n	800a618 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	60bb      	str	r3, [r7, #8]
 800a5cc:	e024      	b.n	800a618 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2120      	movs	r1, #32
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f9f1 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e023      	b.n	800a630 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d108      	bne.n	800a602 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6859      	ldr	r1, [r3, #4]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	60ba      	str	r2, [r7, #8]
 800a5fc:	b2ca      	uxtb	r2, r1
 800a5fe:	701a      	strb	r2, [r3, #0]
 800a600:	e00a      	b.n	800a618 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d19d      	bne.n	800a55e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e000      	b.n	800a630 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a62e:	2302      	movs	r3, #2
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d140      	bne.n	800a6d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <HAL_UART_Receive_IT+0x26>
 800a658:	88fb      	ldrh	r3, [r7, #6]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e039      	b.n	800a6d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_UART_Receive_IT+0x38>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e032      	b.n	800a6d6 <HAL_UART_Receive_IT+0x9e>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	88fa      	ldrh	r2, [r7, #6]
 800a682:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	88fa      	ldrh	r2, [r7, #6]
 800a688:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2222      	movs	r2, #34	; 0x22
 800a694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695a      	ldr	r2, [r3, #20]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0220 	orr.w	r2, r2, #32
 800a6ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e000      	b.n	800a6d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a6d4:	2302      	movs	r3, #2
  }
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f8:	2b80      	cmp	r3, #128	; 0x80
 800a6fa:	bf0c      	ite	eq
 800a6fc:	2301      	moveq	r3, #1
 800a6fe:	2300      	movne	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b21      	cmp	r3, #33	; 0x21
 800a70e:	d116      	bne.n	800a73e <HAL_UART_DMAStop+0x5c>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d013      	beq.n	800a73e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a724:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	4618      	mov	r0, r3
 800a734:	f7fb f9ba 	bl	8005aac <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f98b 	bl	800aa54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a748:	2b40      	cmp	r3, #64	; 0x40
 800a74a:	bf0c      	ite	eq
 800a74c:	2301      	moveq	r3, #1
 800a74e:	2300      	movne	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b22      	cmp	r3, #34	; 0x22
 800a75e:	d116      	bne.n	800a78e <HAL_UART_DMAStop+0xac>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d013      	beq.n	800a78e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	695a      	ldr	r2, [r3, #20]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a774:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d004      	beq.n	800a788 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a782:	4618      	mov	r0, r3
 800a784:	f7fb f992 	bl	8005aac <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f979 	bl	800aa80 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f003 030f 	and.w	r3, r3, #15
 800a7c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10d      	bne.n	800a7ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	f003 0320 	and.w	r3, r3, #32
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d008      	beq.n	800a7ea <HAL_UART_IRQHandler+0x52>
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f9ec 	bl	800abc0 <UART_Receive_IT>
      return;
 800a7e8:	e0d1      	b.n	800a98e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 80b0 	beq.w	800a952 <HAL_UART_IRQHandler+0x1ba>
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d105      	bne.n	800a808 <HAL_UART_IRQHandler+0x70>
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 80a5 	beq.w	800a952 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <HAL_UART_IRQHandler+0x90>
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d005      	beq.n	800a828 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a820:	f043 0201 	orr.w	r2, r3, #1
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00a      	beq.n	800a848 <HAL_UART_IRQHandler+0xb0>
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a840:	f043 0202 	orr.w	r2, r3, #2
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <HAL_UART_IRQHandler+0xd0>
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a860:	f043 0204 	orr.w	r2, r3, #4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f003 0308 	and.w	r3, r3, #8
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00f      	beq.n	800a892 <HAL_UART_IRQHandler+0xfa>
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	f003 0320 	and.w	r3, r3, #32
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <HAL_UART_IRQHandler+0xee>
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88a:	f043 0208 	orr.w	r2, r3, #8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d078      	beq.n	800a98c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x11c>
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	f003 0320 	and.w	r3, r3, #32
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f986 	bl	800abc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ce:	f003 0308 	and.w	r3, r3, #8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d102      	bne.n	800a8dc <HAL_UART_IRQHandler+0x144>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d031      	beq.n	800a940 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f8cf 	bl	800aa80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	d123      	bne.n	800a938 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695a      	ldr	r2, [r3, #20]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d013      	beq.n	800a930 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	4a21      	ldr	r2, [pc, #132]	; (800a994 <HAL_UART_IRQHandler+0x1fc>)
 800a90e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a914:	4618      	mov	r0, r3
 800a916:	f7fb f939 	bl	8005b8c <HAL_DMA_Abort_IT>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d016      	beq.n	800a94e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a92a:	4610      	mov	r0, r2
 800a92c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a92e:	e00e      	b.n	800a94e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f83b 	bl	800a9ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a936:	e00a      	b.n	800a94e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f837 	bl	800a9ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93e:	e006      	b.n	800a94e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f833 	bl	800a9ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a94c:	e01e      	b.n	800a98c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94e:	bf00      	nop
    return;
 800a950:	e01c      	b.n	800a98c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d008      	beq.n	800a96e <HAL_UART_IRQHandler+0x1d6>
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8bc 	bl	800aae4 <UART_Transmit_IT>
    return;
 800a96c:	e00f      	b.n	800a98e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <HAL_UART_IRQHandler+0x1f6>
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f904 	bl	800ab90 <UART_EndTransmit_IT>
    return;
 800a988:	bf00      	nop
 800a98a:	e000      	b.n	800a98e <HAL_UART_IRQHandler+0x1f6>
    return;
 800a98c:	bf00      	nop
  }
}
 800a98e:	3720      	adds	r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	0800aabd 	.word	0x0800aabd

0800a998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d0:	e02c      	b.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d028      	beq.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9e0:	f7fa ff4a 	bl	8005878 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d21d      	bcs.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	695a      	ldr	r2, [r3, #20]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0201 	bic.w	r2, r2, #1
 800aa0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e00f      	b.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	4013      	ands	r3, r2
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2301      	moveq	r3, #1
 800aa3e:	2300      	movne	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d0c3      	beq.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2220      	movs	r2, #32
 800aa70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	695a      	ldr	r2, [r3, #20]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0201 	bic.w	r2, r2, #1
 800aaa6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff ff68 	bl	800a9ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aadc:	bf00      	nop
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b21      	cmp	r3, #33	; 0x21
 800aaf6:	d144      	bne.n	800ab82 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab00:	d11a      	bne.n	800ab38 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab16:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d105      	bne.n	800ab2c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	1c9a      	adds	r2, r3, #2
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	621a      	str	r2, [r3, #32]
 800ab2a:	e00e      	b.n	800ab4a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	621a      	str	r2, [r3, #32]
 800ab36:	e008      	b.n	800ab4a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6211      	str	r1, [r2, #32]
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4619      	mov	r1, r3
 800ab58:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10f      	bne.n	800ab7e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e000      	b.n	800ab84 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ab82:	2302      	movs	r3, #2
  }
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68da      	ldr	r2, [r3, #12]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aba6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2220      	movs	r2, #32
 800abac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fef1 	bl	800a998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b22      	cmp	r3, #34	; 0x22
 800abd2:	d171      	bne.n	800acb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abdc:	d123      	bne.n	800ac26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10e      	bne.n	800ac0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac02:	1c9a      	adds	r2, r3, #2
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	629a      	str	r2, [r3, #40]	; 0x28
 800ac08:	e029      	b.n	800ac5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	629a      	str	r2, [r3, #40]	; 0x28
 800ac24:	e01b      	b.n	800ac5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6858      	ldr	r0, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac38:	1c59      	adds	r1, r3, #1
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6291      	str	r1, [r2, #40]	; 0x28
 800ac3e:	b2c2      	uxtb	r2, r0
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e00c      	b.n	800ac5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac50:	1c58      	adds	r0, r3, #1
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	6288      	str	r0, [r1, #40]	; 0x28
 800ac56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d120      	bne.n	800acb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0220 	bic.w	r2, r2, #32
 800ac80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	695a      	ldr	r2, [r3, #20]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f022 0201 	bic.w	r2, r2, #1
 800aca0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2220      	movs	r2, #32
 800aca6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f8 f9a2 	bl	8002ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	e002      	b.n	800acba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e000      	b.n	800acba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800acb8:	2302      	movs	r3, #2
  }
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68da      	ldr	r2, [r3, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ad06:	f023 030c 	bic.w	r3, r3, #12
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6812      	ldr	r2, [r2, #0]
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	430b      	orrs	r3, r1
 800ad12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad32:	f040 818b 	bne.w	800b04c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4ac1      	ldr	r2, [pc, #772]	; (800b040 <UART_SetConfig+0x37c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d005      	beq.n	800ad4c <UART_SetConfig+0x88>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4abf      	ldr	r2, [pc, #764]	; (800b044 <UART_SetConfig+0x380>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	f040 80bd 	bne.w	800aec6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad4c:	f7fe f8ae 	bl	8008eac <HAL_RCC_GetPCLK2Freq>
 800ad50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	461d      	mov	r5, r3
 800ad56:	f04f 0600 	mov.w	r6, #0
 800ad5a:	46a8      	mov	r8, r5
 800ad5c:	46b1      	mov	r9, r6
 800ad5e:	eb18 0308 	adds.w	r3, r8, r8
 800ad62:	eb49 0409 	adc.w	r4, r9, r9
 800ad66:	4698      	mov	r8, r3
 800ad68:	46a1      	mov	r9, r4
 800ad6a:	eb18 0805 	adds.w	r8, r8, r5
 800ad6e:	eb49 0906 	adc.w	r9, r9, r6
 800ad72:	f04f 0100 	mov.w	r1, #0
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ad86:	4688      	mov	r8, r1
 800ad88:	4691      	mov	r9, r2
 800ad8a:	eb18 0005 	adds.w	r0, r8, r5
 800ad8e:	eb49 0106 	adc.w	r1, r9, r6
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	461d      	mov	r5, r3
 800ad98:	f04f 0600 	mov.w	r6, #0
 800ad9c:	196b      	adds	r3, r5, r5
 800ad9e:	eb46 0406 	adc.w	r4, r6, r6
 800ada2:	461a      	mov	r2, r3
 800ada4:	4623      	mov	r3, r4
 800ada6:	f7f5 fc67 	bl	8000678 <__aeabi_uldivmod>
 800adaa:	4603      	mov	r3, r0
 800adac:	460c      	mov	r4, r1
 800adae:	461a      	mov	r2, r3
 800adb0:	4ba5      	ldr	r3, [pc, #660]	; (800b048 <UART_SetConfig+0x384>)
 800adb2:	fba3 2302 	umull	r2, r3, r3, r2
 800adb6:	095b      	lsrs	r3, r3, #5
 800adb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	461d      	mov	r5, r3
 800adc0:	f04f 0600 	mov.w	r6, #0
 800adc4:	46a9      	mov	r9, r5
 800adc6:	46b2      	mov	sl, r6
 800adc8:	eb19 0309 	adds.w	r3, r9, r9
 800adcc:	eb4a 040a 	adc.w	r4, sl, sl
 800add0:	4699      	mov	r9, r3
 800add2:	46a2      	mov	sl, r4
 800add4:	eb19 0905 	adds.w	r9, r9, r5
 800add8:	eb4a 0a06 	adc.w	sl, sl, r6
 800addc:	f04f 0100 	mov.w	r1, #0
 800ade0:	f04f 0200 	mov.w	r2, #0
 800ade4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ade8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adf0:	4689      	mov	r9, r1
 800adf2:	4692      	mov	sl, r2
 800adf4:	eb19 0005 	adds.w	r0, r9, r5
 800adf8:	eb4a 0106 	adc.w	r1, sl, r6
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	461d      	mov	r5, r3
 800ae02:	f04f 0600 	mov.w	r6, #0
 800ae06:	196b      	adds	r3, r5, r5
 800ae08:	eb46 0406 	adc.w	r4, r6, r6
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4623      	mov	r3, r4
 800ae10:	f7f5 fc32 	bl	8000678 <__aeabi_uldivmod>
 800ae14:	4603      	mov	r3, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4b8b      	ldr	r3, [pc, #556]	; (800b048 <UART_SetConfig+0x384>)
 800ae1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae20:	095b      	lsrs	r3, r3, #5
 800ae22:	2164      	movs	r1, #100	; 0x64
 800ae24:	fb01 f303 	mul.w	r3, r1, r3
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	3332      	adds	r3, #50	; 0x32
 800ae2e:	4a86      	ldr	r2, [pc, #536]	; (800b048 <UART_SetConfig+0x384>)
 800ae30:	fba2 2303 	umull	r2, r3, r2, r3
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae3c:	4498      	add	r8, r3
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	461d      	mov	r5, r3
 800ae42:	f04f 0600 	mov.w	r6, #0
 800ae46:	46a9      	mov	r9, r5
 800ae48:	46b2      	mov	sl, r6
 800ae4a:	eb19 0309 	adds.w	r3, r9, r9
 800ae4e:	eb4a 040a 	adc.w	r4, sl, sl
 800ae52:	4699      	mov	r9, r3
 800ae54:	46a2      	mov	sl, r4
 800ae56:	eb19 0905 	adds.w	r9, r9, r5
 800ae5a:	eb4a 0a06 	adc.w	sl, sl, r6
 800ae5e:	f04f 0100 	mov.w	r1, #0
 800ae62:	f04f 0200 	mov.w	r2, #0
 800ae66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae72:	4689      	mov	r9, r1
 800ae74:	4692      	mov	sl, r2
 800ae76:	eb19 0005 	adds.w	r0, r9, r5
 800ae7a:	eb4a 0106 	adc.w	r1, sl, r6
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	461d      	mov	r5, r3
 800ae84:	f04f 0600 	mov.w	r6, #0
 800ae88:	196b      	adds	r3, r5, r5
 800ae8a:	eb46 0406 	adc.w	r4, r6, r6
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4623      	mov	r3, r4
 800ae92:	f7f5 fbf1 	bl	8000678 <__aeabi_uldivmod>
 800ae96:	4603      	mov	r3, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	4b6a      	ldr	r3, [pc, #424]	; (800b048 <UART_SetConfig+0x384>)
 800ae9e:	fba3 1302 	umull	r1, r3, r3, r2
 800aea2:	095b      	lsrs	r3, r3, #5
 800aea4:	2164      	movs	r1, #100	; 0x64
 800aea6:	fb01 f303 	mul.w	r3, r1, r3
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	3332      	adds	r3, #50	; 0x32
 800aeb0:	4a65      	ldr	r2, [pc, #404]	; (800b048 <UART_SetConfig+0x384>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	095b      	lsrs	r3, r3, #5
 800aeb8:	f003 0207 	and.w	r2, r3, #7
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4442      	add	r2, r8
 800aec2:	609a      	str	r2, [r3, #8]
 800aec4:	e26f      	b.n	800b3a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aec6:	f7fd ffdd 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 800aeca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	461d      	mov	r5, r3
 800aed0:	f04f 0600 	mov.w	r6, #0
 800aed4:	46a8      	mov	r8, r5
 800aed6:	46b1      	mov	r9, r6
 800aed8:	eb18 0308 	adds.w	r3, r8, r8
 800aedc:	eb49 0409 	adc.w	r4, r9, r9
 800aee0:	4698      	mov	r8, r3
 800aee2:	46a1      	mov	r9, r4
 800aee4:	eb18 0805 	adds.w	r8, r8, r5
 800aee8:	eb49 0906 	adc.w	r9, r9, r6
 800aeec:	f04f 0100 	mov.w	r1, #0
 800aef0:	f04f 0200 	mov.w	r2, #0
 800aef4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aef8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aefc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800af00:	4688      	mov	r8, r1
 800af02:	4691      	mov	r9, r2
 800af04:	eb18 0005 	adds.w	r0, r8, r5
 800af08:	eb49 0106 	adc.w	r1, r9, r6
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	461d      	mov	r5, r3
 800af12:	f04f 0600 	mov.w	r6, #0
 800af16:	196b      	adds	r3, r5, r5
 800af18:	eb46 0406 	adc.w	r4, r6, r6
 800af1c:	461a      	mov	r2, r3
 800af1e:	4623      	mov	r3, r4
 800af20:	f7f5 fbaa 	bl	8000678 <__aeabi_uldivmod>
 800af24:	4603      	mov	r3, r0
 800af26:	460c      	mov	r4, r1
 800af28:	461a      	mov	r2, r3
 800af2a:	4b47      	ldr	r3, [pc, #284]	; (800b048 <UART_SetConfig+0x384>)
 800af2c:	fba3 2302 	umull	r2, r3, r3, r2
 800af30:	095b      	lsrs	r3, r3, #5
 800af32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	461d      	mov	r5, r3
 800af3a:	f04f 0600 	mov.w	r6, #0
 800af3e:	46a9      	mov	r9, r5
 800af40:	46b2      	mov	sl, r6
 800af42:	eb19 0309 	adds.w	r3, r9, r9
 800af46:	eb4a 040a 	adc.w	r4, sl, sl
 800af4a:	4699      	mov	r9, r3
 800af4c:	46a2      	mov	sl, r4
 800af4e:	eb19 0905 	adds.w	r9, r9, r5
 800af52:	eb4a 0a06 	adc.w	sl, sl, r6
 800af56:	f04f 0100 	mov.w	r1, #0
 800af5a:	f04f 0200 	mov.w	r2, #0
 800af5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800af66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800af6a:	4689      	mov	r9, r1
 800af6c:	4692      	mov	sl, r2
 800af6e:	eb19 0005 	adds.w	r0, r9, r5
 800af72:	eb4a 0106 	adc.w	r1, sl, r6
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	461d      	mov	r5, r3
 800af7c:	f04f 0600 	mov.w	r6, #0
 800af80:	196b      	adds	r3, r5, r5
 800af82:	eb46 0406 	adc.w	r4, r6, r6
 800af86:	461a      	mov	r2, r3
 800af88:	4623      	mov	r3, r4
 800af8a:	f7f5 fb75 	bl	8000678 <__aeabi_uldivmod>
 800af8e:	4603      	mov	r3, r0
 800af90:	460c      	mov	r4, r1
 800af92:	461a      	mov	r2, r3
 800af94:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <UART_SetConfig+0x384>)
 800af96:	fba3 1302 	umull	r1, r3, r3, r2
 800af9a:	095b      	lsrs	r3, r3, #5
 800af9c:	2164      	movs	r1, #100	; 0x64
 800af9e:	fb01 f303 	mul.w	r3, r1, r3
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	3332      	adds	r3, #50	; 0x32
 800afa8:	4a27      	ldr	r2, [pc, #156]	; (800b048 <UART_SetConfig+0x384>)
 800afaa:	fba2 2303 	umull	r2, r3, r2, r3
 800afae:	095b      	lsrs	r3, r3, #5
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afb6:	4498      	add	r8, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	461d      	mov	r5, r3
 800afbc:	f04f 0600 	mov.w	r6, #0
 800afc0:	46a9      	mov	r9, r5
 800afc2:	46b2      	mov	sl, r6
 800afc4:	eb19 0309 	adds.w	r3, r9, r9
 800afc8:	eb4a 040a 	adc.w	r4, sl, sl
 800afcc:	4699      	mov	r9, r3
 800afce:	46a2      	mov	sl, r4
 800afd0:	eb19 0905 	adds.w	r9, r9, r5
 800afd4:	eb4a 0a06 	adc.w	sl, sl, r6
 800afd8:	f04f 0100 	mov.w	r1, #0
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800afe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800afec:	4689      	mov	r9, r1
 800afee:	4692      	mov	sl, r2
 800aff0:	eb19 0005 	adds.w	r0, r9, r5
 800aff4:	eb4a 0106 	adc.w	r1, sl, r6
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	461d      	mov	r5, r3
 800affe:	f04f 0600 	mov.w	r6, #0
 800b002:	196b      	adds	r3, r5, r5
 800b004:	eb46 0406 	adc.w	r4, r6, r6
 800b008:	461a      	mov	r2, r3
 800b00a:	4623      	mov	r3, r4
 800b00c:	f7f5 fb34 	bl	8000678 <__aeabi_uldivmod>
 800b010:	4603      	mov	r3, r0
 800b012:	460c      	mov	r4, r1
 800b014:	461a      	mov	r2, r3
 800b016:	4b0c      	ldr	r3, [pc, #48]	; (800b048 <UART_SetConfig+0x384>)
 800b018:	fba3 1302 	umull	r1, r3, r3, r2
 800b01c:	095b      	lsrs	r3, r3, #5
 800b01e:	2164      	movs	r1, #100	; 0x64
 800b020:	fb01 f303 	mul.w	r3, r1, r3
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	3332      	adds	r3, #50	; 0x32
 800b02a:	4a07      	ldr	r2, [pc, #28]	; (800b048 <UART_SetConfig+0x384>)
 800b02c:	fba2 2303 	umull	r2, r3, r2, r3
 800b030:	095b      	lsrs	r3, r3, #5
 800b032:	f003 0207 	and.w	r2, r3, #7
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4442      	add	r2, r8
 800b03c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b03e:	e1b2      	b.n	800b3a6 <UART_SetConfig+0x6e2>
 800b040:	40011000 	.word	0x40011000
 800b044:	40011400 	.word	0x40011400
 800b048:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4ad7      	ldr	r2, [pc, #860]	; (800b3b0 <UART_SetConfig+0x6ec>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d005      	beq.n	800b062 <UART_SetConfig+0x39e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4ad6      	ldr	r2, [pc, #856]	; (800b3b4 <UART_SetConfig+0x6f0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	f040 80d1 	bne.w	800b204 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b062:	f7fd ff23 	bl	8008eac <HAL_RCC_GetPCLK2Freq>
 800b066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	469a      	mov	sl, r3
 800b06c:	f04f 0b00 	mov.w	fp, #0
 800b070:	46d0      	mov	r8, sl
 800b072:	46d9      	mov	r9, fp
 800b074:	eb18 0308 	adds.w	r3, r8, r8
 800b078:	eb49 0409 	adc.w	r4, r9, r9
 800b07c:	4698      	mov	r8, r3
 800b07e:	46a1      	mov	r9, r4
 800b080:	eb18 080a 	adds.w	r8, r8, sl
 800b084:	eb49 090b 	adc.w	r9, r9, fp
 800b088:	f04f 0100 	mov.w	r1, #0
 800b08c:	f04f 0200 	mov.w	r2, #0
 800b090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b09c:	4688      	mov	r8, r1
 800b09e:	4691      	mov	r9, r2
 800b0a0:	eb1a 0508 	adds.w	r5, sl, r8
 800b0a4:	eb4b 0609 	adc.w	r6, fp, r9
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f04f 0300 	mov.w	r3, #0
 800b0b6:	f04f 0400 	mov.w	r4, #0
 800b0ba:	0094      	lsls	r4, r2, #2
 800b0bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b0c0:	008b      	lsls	r3, r1, #2
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	f7f5 fad5 	bl	8000678 <__aeabi_uldivmod>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4bb8      	ldr	r3, [pc, #736]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b0d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b0da:	095b      	lsrs	r3, r3, #5
 800b0dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	469b      	mov	fp, r3
 800b0e4:	f04f 0c00 	mov.w	ip, #0
 800b0e8:	46d9      	mov	r9, fp
 800b0ea:	46e2      	mov	sl, ip
 800b0ec:	eb19 0309 	adds.w	r3, r9, r9
 800b0f0:	eb4a 040a 	adc.w	r4, sl, sl
 800b0f4:	4699      	mov	r9, r3
 800b0f6:	46a2      	mov	sl, r4
 800b0f8:	eb19 090b 	adds.w	r9, r9, fp
 800b0fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b100:	f04f 0100 	mov.w	r1, #0
 800b104:	f04f 0200 	mov.w	r2, #0
 800b108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b10c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b114:	4689      	mov	r9, r1
 800b116:	4692      	mov	sl, r2
 800b118:	eb1b 0509 	adds.w	r5, fp, r9
 800b11c:	eb4c 060a 	adc.w	r6, ip, sl
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	4619      	mov	r1, r3
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f04f 0300 	mov.w	r3, #0
 800b12e:	f04f 0400 	mov.w	r4, #0
 800b132:	0094      	lsls	r4, r2, #2
 800b134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b138:	008b      	lsls	r3, r1, #2
 800b13a:	461a      	mov	r2, r3
 800b13c:	4623      	mov	r3, r4
 800b13e:	4628      	mov	r0, r5
 800b140:	4631      	mov	r1, r6
 800b142:	f7f5 fa99 	bl	8000678 <__aeabi_uldivmod>
 800b146:	4603      	mov	r3, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	461a      	mov	r2, r3
 800b14c:	4b9a      	ldr	r3, [pc, #616]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b14e:	fba3 1302 	umull	r1, r3, r3, r2
 800b152:	095b      	lsrs	r3, r3, #5
 800b154:	2164      	movs	r1, #100	; 0x64
 800b156:	fb01 f303 	mul.w	r3, r1, r3
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	3332      	adds	r3, #50	; 0x32
 800b160:	4a95      	ldr	r2, [pc, #596]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b162:	fba2 2303 	umull	r2, r3, r2, r3
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b16c:	4498      	add	r8, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	469b      	mov	fp, r3
 800b172:	f04f 0c00 	mov.w	ip, #0
 800b176:	46d9      	mov	r9, fp
 800b178:	46e2      	mov	sl, ip
 800b17a:	eb19 0309 	adds.w	r3, r9, r9
 800b17e:	eb4a 040a 	adc.w	r4, sl, sl
 800b182:	4699      	mov	r9, r3
 800b184:	46a2      	mov	sl, r4
 800b186:	eb19 090b 	adds.w	r9, r9, fp
 800b18a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b18e:	f04f 0100 	mov.w	r1, #0
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b19a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b19e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	4692      	mov	sl, r2
 800b1a6:	eb1b 0509 	adds.w	r5, fp, r9
 800b1aa:	eb4c 060a 	adc.w	r6, ip, sl
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	f04f 0400 	mov.w	r4, #0
 800b1c0:	0094      	lsls	r4, r2, #2
 800b1c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b1c6:	008b      	lsls	r3, r1, #2
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	4623      	mov	r3, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	f7f5 fa52 	bl	8000678 <__aeabi_uldivmod>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4b77      	ldr	r3, [pc, #476]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b1dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	2164      	movs	r1, #100	; 0x64
 800b1e4:	fb01 f303 	mul.w	r3, r1, r3
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	011b      	lsls	r3, r3, #4
 800b1ec:	3332      	adds	r3, #50	; 0x32
 800b1ee:	4a72      	ldr	r2, [pc, #456]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	095b      	lsrs	r3, r3, #5
 800b1f6:	f003 020f 	and.w	r2, r3, #15
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4442      	add	r2, r8
 800b200:	609a      	str	r2, [r3, #8]
 800b202:	e0d0      	b.n	800b3a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b204:	f7fd fe3e 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 800b208:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	469a      	mov	sl, r3
 800b20e:	f04f 0b00 	mov.w	fp, #0
 800b212:	46d0      	mov	r8, sl
 800b214:	46d9      	mov	r9, fp
 800b216:	eb18 0308 	adds.w	r3, r8, r8
 800b21a:	eb49 0409 	adc.w	r4, r9, r9
 800b21e:	4698      	mov	r8, r3
 800b220:	46a1      	mov	r9, r4
 800b222:	eb18 080a 	adds.w	r8, r8, sl
 800b226:	eb49 090b 	adc.w	r9, r9, fp
 800b22a:	f04f 0100 	mov.w	r1, #0
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b236:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b23a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b23e:	4688      	mov	r8, r1
 800b240:	4691      	mov	r9, r2
 800b242:	eb1a 0508 	adds.w	r5, sl, r8
 800b246:	eb4b 0609 	adc.w	r6, fp, r9
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	4619      	mov	r1, r3
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	f04f 0300 	mov.w	r3, #0
 800b258:	f04f 0400 	mov.w	r4, #0
 800b25c:	0094      	lsls	r4, r2, #2
 800b25e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b262:	008b      	lsls	r3, r1, #2
 800b264:	461a      	mov	r2, r3
 800b266:	4623      	mov	r3, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	4631      	mov	r1, r6
 800b26c:	f7f5 fa04 	bl	8000678 <__aeabi_uldivmod>
 800b270:	4603      	mov	r3, r0
 800b272:	460c      	mov	r4, r1
 800b274:	461a      	mov	r2, r3
 800b276:	4b50      	ldr	r3, [pc, #320]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b278:	fba3 2302 	umull	r2, r3, r3, r2
 800b27c:	095b      	lsrs	r3, r3, #5
 800b27e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	469b      	mov	fp, r3
 800b286:	f04f 0c00 	mov.w	ip, #0
 800b28a:	46d9      	mov	r9, fp
 800b28c:	46e2      	mov	sl, ip
 800b28e:	eb19 0309 	adds.w	r3, r9, r9
 800b292:	eb4a 040a 	adc.w	r4, sl, sl
 800b296:	4699      	mov	r9, r3
 800b298:	46a2      	mov	sl, r4
 800b29a:	eb19 090b 	adds.w	r9, r9, fp
 800b29e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b2a2:	f04f 0100 	mov.w	r1, #0
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2b6:	4689      	mov	r9, r1
 800b2b8:	4692      	mov	sl, r2
 800b2ba:	eb1b 0509 	adds.w	r5, fp, r9
 800b2be:	eb4c 060a 	adc.w	r6, ip, sl
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	f04f 0300 	mov.w	r3, #0
 800b2d0:	f04f 0400 	mov.w	r4, #0
 800b2d4:	0094      	lsls	r4, r2, #2
 800b2d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b2da:	008b      	lsls	r3, r1, #2
 800b2dc:	461a      	mov	r2, r3
 800b2de:	4623      	mov	r3, r4
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	f7f5 f9c8 	bl	8000678 <__aeabi_uldivmod>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4b32      	ldr	r3, [pc, #200]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b2f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2f4:	095b      	lsrs	r3, r3, #5
 800b2f6:	2164      	movs	r1, #100	; 0x64
 800b2f8:	fb01 f303 	mul.w	r3, r1, r3
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	3332      	adds	r3, #50	; 0x32
 800b302:	4a2d      	ldr	r2, [pc, #180]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b304:	fba2 2303 	umull	r2, r3, r2, r3
 800b308:	095b      	lsrs	r3, r3, #5
 800b30a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b30e:	4498      	add	r8, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	469b      	mov	fp, r3
 800b314:	f04f 0c00 	mov.w	ip, #0
 800b318:	46d9      	mov	r9, fp
 800b31a:	46e2      	mov	sl, ip
 800b31c:	eb19 0309 	adds.w	r3, r9, r9
 800b320:	eb4a 040a 	adc.w	r4, sl, sl
 800b324:	4699      	mov	r9, r3
 800b326:	46a2      	mov	sl, r4
 800b328:	eb19 090b 	adds.w	r9, r9, fp
 800b32c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b330:	f04f 0100 	mov.w	r1, #0
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b33c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b344:	4689      	mov	r9, r1
 800b346:	4692      	mov	sl, r2
 800b348:	eb1b 0509 	adds.w	r5, fp, r9
 800b34c:	eb4c 060a 	adc.w	r6, ip, sl
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4619      	mov	r1, r3
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	f04f 0300 	mov.w	r3, #0
 800b35e:	f04f 0400 	mov.w	r4, #0
 800b362:	0094      	lsls	r4, r2, #2
 800b364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b368:	008b      	lsls	r3, r1, #2
 800b36a:	461a      	mov	r2, r3
 800b36c:	4623      	mov	r3, r4
 800b36e:	4628      	mov	r0, r5
 800b370:	4631      	mov	r1, r6
 800b372:	f7f5 f981 	bl	8000678 <__aeabi_uldivmod>
 800b376:	4603      	mov	r3, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	461a      	mov	r2, r3
 800b37c:	4b0e      	ldr	r3, [pc, #56]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b37e:	fba3 1302 	umull	r1, r3, r3, r2
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2164      	movs	r1, #100	; 0x64
 800b386:	fb01 f303 	mul.w	r3, r1, r3
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	3332      	adds	r3, #50	; 0x32
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <UART_SetConfig+0x6f4>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	f003 020f 	and.w	r2, r3, #15
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4442      	add	r2, r8
 800b3a2:	609a      	str	r2, [r3, #8]
}
 800b3a4:	e7ff      	b.n	800b3a6 <UART_SetConfig+0x6e2>
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b0:	40011000 	.word	0x40011000
 800b3b4:	40011400 	.word	0x40011400
 800b3b8:	51eb851f 	.word	0x51eb851f

0800b3bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3ce:	2b84      	cmp	r3, #132	; 0x84
 800b3d0:	d005      	beq.n	800b3de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	3303      	adds	r3, #3
 800b3dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3de:	68fb      	ldr	r3, [r7, #12]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3f0:	f000 fada 	bl	800b9a8 <vTaskStartScheduler>
  
  return osOK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fc:	b089      	sub	sp, #36	; 0x24
 800b3fe:	af04      	add	r7, sp, #16
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d020      	beq.n	800b44e <osThreadCreate+0x54>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01c      	beq.n	800b44e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685c      	ldr	r4, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681d      	ldr	r5, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691e      	ldr	r6, [r3, #16]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff ffc8 	bl	800b3bc <makeFreeRtosPriority>
 800b42c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b436:	9202      	str	r2, [sp, #8]
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	9100      	str	r1, [sp, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	4632      	mov	r2, r6
 800b440:	4629      	mov	r1, r5
 800b442:	4620      	mov	r0, r4
 800b444:	f000 f8ed 	bl	800b622 <xTaskCreateStatic>
 800b448:	4603      	mov	r3, r0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e01c      	b.n	800b488 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685c      	ldr	r4, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b45a:	b29e      	uxth	r6, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ffaa 	bl	800b3bc <makeFreeRtosPriority>
 800b468:	4602      	mov	r2, r0
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	9200      	str	r2, [sp, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	4632      	mov	r2, r6
 800b476:	4629      	mov	r1, r5
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 f92c 	bl	800b6d6 <xTaskCreate>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b01      	cmp	r3, #1
 800b482:	d001      	beq.n	800b488 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	e000      	b.n	800b48a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b492 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <osDelay+0x16>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	e000      	b.n	800b4aa <osDelay+0x18>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fa48 	bl	800b940 <vTaskDelay>
  
  return osOK;
 800b4b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f103 0208 	add.w	r2, r3, #8
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f103 0208 	add.w	r2, r3, #8
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f103 0208 	add.w	r2, r3, #8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4ee:	bf00      	nop
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d103      	bne.n	800b57c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	e00c      	b.n	800b596 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3308      	adds	r3, #8
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e002      	b.n	800b58a <vListInsert+0x2e>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d2f6      	bcs.n	800b584 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6892      	ldr	r2, [r2, #8]
 800b5e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6852      	ldr	r2, [r2, #4]
 800b5ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d103      	bne.n	800b602 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b622:	b580      	push	{r7, lr}
 800b624:	b08e      	sub	sp, #56	; 0x38
 800b626:	af04      	add	r7, sp, #16
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b632:	2b00      	cmp	r3, #0
 800b634:	d109      	bne.n	800b64a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	623b      	str	r3, [r7, #32]
 800b648:	e7fe      	b.n	800b648 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d109      	bne.n	800b664 <xTaskCreateStatic+0x42>
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	61fb      	str	r3, [r7, #28]
 800b662:	e7fe      	b.n	800b662 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b664:	2354      	movs	r3, #84	; 0x54
 800b666:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	2b54      	cmp	r3, #84	; 0x54
 800b66c:	d009      	beq.n	800b682 <xTaskCreateStatic+0x60>
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	61bb      	str	r3, [r7, #24]
 800b680:	e7fe      	b.n	800b680 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d01e      	beq.n	800b6c8 <xTaskCreateStatic+0xa6>
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01b      	beq.n	800b6c8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	2202      	movs	r2, #2
 800b69e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	9302      	str	r3, [sp, #8]
 800b6aa:	f107 0314 	add.w	r3, r7, #20
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 f850 	bl	800b760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6c2:	f000 f8d3 	bl	800b86c <prvAddNewTaskToReadyList>
 800b6c6:	e001      	b.n	800b6cc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6cc:	697b      	ldr	r3, [r7, #20]
	}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b08c      	sub	sp, #48	; 0x30
 800b6da:	af04      	add	r7, sp, #16
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	603b      	str	r3, [r7, #0]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 ff4a 	bl	800c584 <pvPortMalloc>
 800b6f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00e      	beq.n	800b716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6f8:	2054      	movs	r0, #84	; 0x54
 800b6fa:	f000 ff43 	bl	800c584 <pvPortMalloc>
 800b6fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30
 800b70c:	e005      	b.n	800b71a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b70e:	6978      	ldr	r0, [r7, #20]
 800b710:	f000 fffa 	bl	800c708 <vPortFree>
 800b714:	e001      	b.n	800b71a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d017      	beq.n	800b750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b728:	88fa      	ldrh	r2, [r7, #6]
 800b72a:	2300      	movs	r3, #0
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 f80e 	bl	800b760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b744:	69f8      	ldr	r0, [r7, #28]
 800b746:	f000 f891 	bl	800b86c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b74a:	2301      	movs	r3, #1
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	e002      	b.n	800b756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b756:	69bb      	ldr	r3, [r7, #24]
	}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b778:	3b01      	subs	r3, #1
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	f003 0307 	and.w	r3, r3, #7
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <prvInitialiseNewTask+0x46>
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e7fe      	b.n	800b7a4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01f      	beq.n	800b7ec <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	e012      	b.n	800b7d8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	7819      	ldrb	r1, [r3, #0]
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	4413      	add	r3, r2
 800b7c0:	3334      	adds	r3, #52	; 0x34
 800b7c2:	460a      	mov	r2, r1
 800b7c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d006      	beq.n	800b7e0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b0f      	cmp	r3, #15
 800b7dc:	d9e9      	bls.n	800b7b2 <prvInitialiseNewTask+0x52>
 800b7de:	e000      	b.n	800b7e2 <prvInitialiseNewTask+0x82>
			{
				break;
 800b7e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7ea:	e003      	b.n	800b7f4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	2b06      	cmp	r3, #6
 800b7f8:	d901      	bls.n	800b7fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b802:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b808:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	2200      	movs	r2, #0
 800b80e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	3304      	adds	r3, #4
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff fe70 	bl	800b4fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	3318      	adds	r3, #24
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fe6b 	bl	800b4fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	f1c3 0207 	rsb	r2, r3, #7
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b838:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	2200      	movs	r2, #0
 800b83e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	69b8      	ldr	r0, [r7, #24]
 800b84e:	f000 fc99 	bl	800c184 <pxPortInitialiseStack>
 800b852:	4602      	mov	r2, r0
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b864:	bf00      	nop
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b874:	f000 fdaa 	bl	800c3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b878:	4b2a      	ldr	r3, [pc, #168]	; (800b924 <prvAddNewTaskToReadyList+0xb8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3301      	adds	r3, #1
 800b87e:	4a29      	ldr	r2, [pc, #164]	; (800b924 <prvAddNewTaskToReadyList+0xb8>)
 800b880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b882:	4b29      	ldr	r3, [pc, #164]	; (800b928 <prvAddNewTaskToReadyList+0xbc>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d109      	bne.n	800b89e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b88a:	4a27      	ldr	r2, [pc, #156]	; (800b928 <prvAddNewTaskToReadyList+0xbc>)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b890:	4b24      	ldr	r3, [pc, #144]	; (800b924 <prvAddNewTaskToReadyList+0xb8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d110      	bne.n	800b8ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b898:	f000 fb54 	bl	800bf44 <prvInitialiseTaskLists>
 800b89c:	e00d      	b.n	800b8ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b89e:	4b23      	ldr	r3, [pc, #140]	; (800b92c <prvAddNewTaskToReadyList+0xc0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8a6:	4b20      	ldr	r3, [pc, #128]	; (800b928 <prvAddNewTaskToReadyList+0xbc>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d802      	bhi.n	800b8ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8b4:	4a1c      	ldr	r2, [pc, #112]	; (800b928 <prvAddNewTaskToReadyList+0xbc>)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <prvAddNewTaskToReadyList+0xc4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	4a1b      	ldr	r2, [pc, #108]	; (800b930 <prvAddNewTaskToReadyList+0xc4>)
 800b8c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	409a      	lsls	r2, r3
 800b8cc:	4b19      	ldr	r3, [pc, #100]	; (800b934 <prvAddNewTaskToReadyList+0xc8>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	4a18      	ldr	r2, [pc, #96]	; (800b934 <prvAddNewTaskToReadyList+0xc8>)
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4a15      	ldr	r2, [pc, #84]	; (800b938 <prvAddNewTaskToReadyList+0xcc>)
 800b8e4:	441a      	add	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	f7ff fe11 	bl	800b514 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8f2:	f000 fd99 	bl	800c428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <prvAddNewTaskToReadyList+0xc0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8fe:	4b0a      	ldr	r3, [pc, #40]	; (800b928 <prvAddNewTaskToReadyList+0xbc>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	429a      	cmp	r2, r3
 800b90a:	d207      	bcs.n	800b91c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b90c:	4b0b      	ldr	r3, [pc, #44]	; (800b93c <prvAddNewTaskToReadyList+0xd0>)
 800b90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20000750 	.word	0x20000750
 800b928:	20000650 	.word	0x20000650
 800b92c:	2000075c 	.word	0x2000075c
 800b930:	2000076c 	.word	0x2000076c
 800b934:	20000758 	.word	0x20000758
 800b938:	20000654 	.word	0x20000654
 800b93c:	e000ed04 	.word	0xe000ed04

0800b940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b948:	2300      	movs	r3, #0
 800b94a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d016      	beq.n	800b980 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <vTaskDelay+0x60>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <vTaskDelay+0x2e>
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	60bb      	str	r3, [r7, #8]
 800b96c:	e7fe      	b.n	800b96c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b96e:	f000 f879 	bl	800ba64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b972:	2100      	movs	r1, #0
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fb9f 	bl	800c0b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b97a:	f000 f881 	bl	800ba80 <xTaskResumeAll>
 800b97e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d107      	bne.n	800b996 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <vTaskDelay+0x64>)
 800b988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000778 	.word	0x20000778
 800b9a4:	e000ed04 	.word	0xe000ed04

0800b9a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9b6:	463a      	mov	r2, r7
 800b9b8:	1d39      	adds	r1, r7, #4
 800b9ba:	f107 0308 	add.w	r3, r7, #8
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7f5 fba4 	bl	800110c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	9202      	str	r2, [sp, #8]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	491d      	ldr	r1, [pc, #116]	; (800ba4c <vTaskStartScheduler+0xa4>)
 800b9d8:	481d      	ldr	r0, [pc, #116]	; (800ba50 <vTaskStartScheduler+0xa8>)
 800b9da:	f7ff fe22 	bl	800b622 <xTaskCreateStatic>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <vTaskStartScheduler+0xac>)
 800b9e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9e4:	4b1b      	ldr	r3, [pc, #108]	; (800ba54 <vTaskStartScheduler+0xac>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e001      	b.n	800b9f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d115      	bne.n	800ba28 <vTaskStartScheduler+0x80>
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <vTaskStartScheduler+0xb0>)
 800ba10:	f04f 32ff 	mov.w	r2, #4294967295
 800ba14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba16:	4b11      	ldr	r3, [pc, #68]	; (800ba5c <vTaskStartScheduler+0xb4>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba1c:	4b10      	ldr	r3, [pc, #64]	; (800ba60 <vTaskStartScheduler+0xb8>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba22:	f000 fc35 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba26:	e00d      	b.n	800ba44 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d109      	bne.n	800ba44 <vTaskStartScheduler+0x9c>
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	e7fe      	b.n	800ba42 <vTaskStartScheduler+0x9a>
}
 800ba44:	bf00      	nop
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	0800e618 	.word	0x0800e618
 800ba50:	0800bf15 	.word	0x0800bf15
 800ba54:	20000774 	.word	0x20000774
 800ba58:	20000770 	.word	0x20000770
 800ba5c:	2000075c 	.word	0x2000075c
 800ba60:	20000754 	.word	0x20000754

0800ba64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ba68:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <vTaskSuspendAll+0x18>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	4a03      	ldr	r2, [pc, #12]	; (800ba7c <vTaskSuspendAll+0x18>)
 800ba70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ba72:	bf00      	nop
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20000778 	.word	0x20000778

0800ba80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba8e:	4b41      	ldr	r3, [pc, #260]	; (800bb94 <xTaskResumeAll+0x114>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d109      	bne.n	800baaa <xTaskResumeAll+0x2a>
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	e7fe      	b.n	800baa8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800baaa:	f000 fc8f 	bl	800c3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800baae:	4b39      	ldr	r3, [pc, #228]	; (800bb94 <xTaskResumeAll+0x114>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	4a37      	ldr	r2, [pc, #220]	; (800bb94 <xTaskResumeAll+0x114>)
 800bab6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bab8:	4b36      	ldr	r3, [pc, #216]	; (800bb94 <xTaskResumeAll+0x114>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d161      	bne.n	800bb84 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bac0:	4b35      	ldr	r3, [pc, #212]	; (800bb98 <xTaskResumeAll+0x118>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d05d      	beq.n	800bb84 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bac8:	e02e      	b.n	800bb28 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baca:	4b34      	ldr	r3, [pc, #208]	; (800bb9c <xTaskResumeAll+0x11c>)
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3318      	adds	r3, #24
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff fd79 	bl	800b5ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3304      	adds	r3, #4
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fd74 	bl	800b5ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	2201      	movs	r2, #1
 800baec:	409a      	lsls	r2, r3
 800baee:	4b2c      	ldr	r3, [pc, #176]	; (800bba0 <xTaskResumeAll+0x120>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	4a2a      	ldr	r2, [pc, #168]	; (800bba0 <xTaskResumeAll+0x120>)
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4a27      	ldr	r2, [pc, #156]	; (800bba4 <xTaskResumeAll+0x124>)
 800bb06:	441a      	add	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4610      	mov	r0, r2
 800bb10:	f7ff fd00 	bl	800b514 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	4b23      	ldr	r3, [pc, #140]	; (800bba8 <xTaskResumeAll+0x128>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d302      	bcc.n	800bb28 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800bb22:	4b22      	ldr	r3, [pc, #136]	; (800bbac <xTaskResumeAll+0x12c>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb28:	4b1c      	ldr	r3, [pc, #112]	; (800bb9c <xTaskResumeAll+0x11c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1cc      	bne.n	800baca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb36:	f000 fa9f 	bl	800c078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <xTaskResumeAll+0x130>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d010      	beq.n	800bb68 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb46:	f000 f837 	bl	800bbb8 <xTaskIncrementTick>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <xTaskResumeAll+0x12c>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1f1      	bne.n	800bb46 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800bb62:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <xTaskResumeAll+0x130>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb68:	4b10      	ldr	r3, [pc, #64]	; (800bbac <xTaskResumeAll+0x12c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d009      	beq.n	800bb84 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb74:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <xTaskResumeAll+0x134>)
 800bb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb84:	f000 fc50 	bl	800c428 <vPortExitCritical>

	return xAlreadyYielded;
 800bb88:	68bb      	ldr	r3, [r7, #8]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20000778 	.word	0x20000778
 800bb98:	20000750 	.word	0x20000750
 800bb9c:	20000710 	.word	0x20000710
 800bba0:	20000758 	.word	0x20000758
 800bba4:	20000654 	.word	0x20000654
 800bba8:	20000650 	.word	0x20000650
 800bbac:	20000764 	.word	0x20000764
 800bbb0:	20000760 	.word	0x20000760
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc2:	4b4e      	ldr	r3, [pc, #312]	; (800bcfc <xTaskIncrementTick+0x144>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f040 8087 	bne.w	800bcda <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbcc:	4b4c      	ldr	r3, [pc, #304]	; (800bd00 <xTaskIncrementTick+0x148>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbd4:	4a4a      	ldr	r2, [pc, #296]	; (800bd00 <xTaskIncrementTick+0x148>)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11f      	bne.n	800bc20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbe0:	4b48      	ldr	r3, [pc, #288]	; (800bd04 <xTaskIncrementTick+0x14c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <xTaskIncrementTick+0x46>
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	e7fe      	b.n	800bbfc <xTaskIncrementTick+0x44>
 800bbfe:	4b41      	ldr	r3, [pc, #260]	; (800bd04 <xTaskIncrementTick+0x14c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	4b40      	ldr	r3, [pc, #256]	; (800bd08 <xTaskIncrementTick+0x150>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a3e      	ldr	r2, [pc, #248]	; (800bd04 <xTaskIncrementTick+0x14c>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	4a3e      	ldr	r2, [pc, #248]	; (800bd08 <xTaskIncrementTick+0x150>)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	4b3e      	ldr	r3, [pc, #248]	; (800bd0c <xTaskIncrementTick+0x154>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	4a3c      	ldr	r2, [pc, #240]	; (800bd0c <xTaskIncrementTick+0x154>)
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	f000 fa2c 	bl	800c078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc20:	4b3b      	ldr	r3, [pc, #236]	; (800bd10 <xTaskIncrementTick+0x158>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d348      	bcc.n	800bcbc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc2a:	4b36      	ldr	r3, [pc, #216]	; (800bd04 <xTaskIncrementTick+0x14c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc34:	4b36      	ldr	r3, [pc, #216]	; (800bd10 <xTaskIncrementTick+0x158>)
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3a:	601a      	str	r2, [r3, #0]
					break;
 800bc3c:	e03e      	b.n	800bcbc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4b31      	ldr	r3, [pc, #196]	; (800bd04 <xTaskIncrementTick+0x14c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d203      	bcs.n	800bc5e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc56:	4a2e      	ldr	r2, [pc, #184]	; (800bd10 <xTaskIncrementTick+0x158>)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc5c:	e02e      	b.n	800bcbc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fcb3 	bl	800b5ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3318      	adds	r3, #24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fcaa 	bl	800b5ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7e:	2201      	movs	r2, #1
 800bc80:	409a      	lsls	r2, r3
 800bc82:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <xTaskIncrementTick+0x15c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	4a22      	ldr	r2, [pc, #136]	; (800bd14 <xTaskIncrementTick+0x15c>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a1f      	ldr	r2, [pc, #124]	; (800bd18 <xTaskIncrementTick+0x160>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7ff fc36 	bl	800b514 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcac:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <xTaskIncrementTick+0x164>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d3b9      	bcc.n	800bc2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcba:	e7b6      	b.n	800bc2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcbc:	4b17      	ldr	r3, [pc, #92]	; (800bd1c <xTaskIncrementTick+0x164>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc2:	4915      	ldr	r1, [pc, #84]	; (800bd18 <xTaskIncrementTick+0x160>)
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d907      	bls.n	800bce4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e004      	b.n	800bce4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bcda:	4b11      	ldr	r3, [pc, #68]	; (800bd20 <xTaskIncrementTick+0x168>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3301      	adds	r3, #1
 800bce0:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <xTaskIncrementTick+0x168>)
 800bce2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bce4:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <xTaskIncrementTick+0x16c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800bcec:	2301      	movs	r3, #1
 800bcee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bcf0:	697b      	ldr	r3, [r7, #20]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000778 	.word	0x20000778
 800bd00:	20000754 	.word	0x20000754
 800bd04:	20000708 	.word	0x20000708
 800bd08:	2000070c 	.word	0x2000070c
 800bd0c:	20000768 	.word	0x20000768
 800bd10:	20000770 	.word	0x20000770
 800bd14:	20000758 	.word	0x20000758
 800bd18:	20000654 	.word	0x20000654
 800bd1c:	20000650 	.word	0x20000650
 800bd20:	20000760 	.word	0x20000760
 800bd24:	20000764 	.word	0x20000764

0800bd28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <vTaskSwitchContext+0xa0>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd36:	4b25      	ldr	r3, [pc, #148]	; (800bdcc <vTaskSwitchContext+0xa4>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd3c:	e03e      	b.n	800bdbc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bd3e:	4b23      	ldr	r3, [pc, #140]	; (800bdcc <vTaskSwitchContext+0xa4>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd44:	4b22      	ldr	r3, [pc, #136]	; (800bdd0 <vTaskSwitchContext+0xa8>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	fab3 f383 	clz	r3, r3
 800bd50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	f1c3 031f 	rsb	r3, r3, #31
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	491e      	ldr	r1, [pc, #120]	; (800bdd4 <vTaskSwitchContext+0xac>)
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	440b      	add	r3, r1
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <vTaskSwitchContext+0x5a>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	607b      	str	r3, [r7, #4]
 800bd80:	e7fe      	b.n	800bd80 <vTaskSwitchContext+0x58>
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	4613      	mov	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4a11      	ldr	r2, [pc, #68]	; (800bdd4 <vTaskSwitchContext+0xac>)
 800bd8e:	4413      	add	r3, r2
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	605a      	str	r2, [r3, #4]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3308      	adds	r3, #8
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d104      	bne.n	800bdb2 <vTaskSwitchContext+0x8a>
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	605a      	str	r2, [r3, #4]
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	4a07      	ldr	r2, [pc, #28]	; (800bdd8 <vTaskSwitchContext+0xb0>)
 800bdba:	6013      	str	r3, [r2, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	371c      	adds	r7, #28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	20000778 	.word	0x20000778
 800bdcc:	20000764 	.word	0x20000764
 800bdd0:	20000758 	.word	0x20000758
 800bdd4:	20000654 	.word	0x20000654
 800bdd8:	20000650 	.word	0x20000650

0800bddc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d109      	bne.n	800bdfe <vTaskSetTimeOutState+0x22>
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	e7fe      	b.n	800bdfc <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 800bdfe:	f000 fae5 	bl	800c3cc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <vTaskSetTimeOutState+0x44>)
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800be0a:	4b06      	ldr	r3, [pc, #24]	; (800be24 <vTaskSetTimeOutState+0x48>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800be12:	f000 fb09 	bl	800c428 <vPortExitCritical>
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000768 	.word	0x20000768
 800be24:	20000754 	.word	0x20000754

0800be28 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <vTaskInternalSetTimeOutState+0x24>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <vTaskInternalSetTimeOutState+0x28>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20000768 	.word	0x20000768
 800be50:	20000754 	.word	0x20000754

0800be54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <xTaskCheckForTimeOut+0x24>
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	613b      	str	r3, [r7, #16]
 800be76:	e7fe      	b.n	800be76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <xTaskCheckForTimeOut+0x3e>
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e7fe      	b.n	800be90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800be92:	f000 fa9b 	bl	800c3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be96:	4b1d      	ldr	r3, [pc, #116]	; (800bf0c <xTaskCheckForTimeOut+0xb8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d102      	bne.n	800beb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61fb      	str	r3, [r7, #28]
 800beb4:	e023      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <xTaskCheckForTimeOut+0xbc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d007      	beq.n	800bed2 <xTaskCheckForTimeOut+0x7e>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d302      	bcc.n	800bed2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800becc:	2301      	movs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
 800bed0:	e015      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d20b      	bcs.n	800bef4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	1ad2      	subs	r2, r2, r3
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ff9d 	bl	800be28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	61fb      	str	r3, [r7, #28]
 800bef2:	e004      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800befa:	2301      	movs	r3, #1
 800befc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800befe:	f000 fa93 	bl	800c428 <vPortExitCritical>

	return xReturn;
 800bf02:	69fb      	ldr	r3, [r7, #28]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20000754 	.word	0x20000754
 800bf10:	20000768 	.word	0x20000768

0800bf14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf1c:	f000 f852 	bl	800bfc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <prvIdleTask+0x28>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d9f9      	bls.n	800bf1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf28:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <prvIdleTask+0x2c>)
 800bf2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf38:	e7f0      	b.n	800bf1c <prvIdleTask+0x8>
 800bf3a:	bf00      	nop
 800bf3c:	20000654 	.word	0x20000654
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	e00c      	b.n	800bf6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4a12      	ldr	r2, [pc, #72]	; (800bfa4 <prvInitialiseTaskLists+0x60>)
 800bf5c:	4413      	add	r3, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff faab 	bl	800b4ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3301      	adds	r3, #1
 800bf68:	607b      	str	r3, [r7, #4]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b06      	cmp	r3, #6
 800bf6e:	d9ef      	bls.n	800bf50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf70:	480d      	ldr	r0, [pc, #52]	; (800bfa8 <prvInitialiseTaskLists+0x64>)
 800bf72:	f7ff faa2 	bl	800b4ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf76:	480d      	ldr	r0, [pc, #52]	; (800bfac <prvInitialiseTaskLists+0x68>)
 800bf78:	f7ff fa9f 	bl	800b4ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf7c:	480c      	ldr	r0, [pc, #48]	; (800bfb0 <prvInitialiseTaskLists+0x6c>)
 800bf7e:	f7ff fa9c 	bl	800b4ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf82:	480c      	ldr	r0, [pc, #48]	; (800bfb4 <prvInitialiseTaskLists+0x70>)
 800bf84:	f7ff fa99 	bl	800b4ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf88:	480b      	ldr	r0, [pc, #44]	; (800bfb8 <prvInitialiseTaskLists+0x74>)
 800bf8a:	f7ff fa96 	bl	800b4ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <prvInitialiseTaskLists+0x78>)
 800bf90:	4a05      	ldr	r2, [pc, #20]	; (800bfa8 <prvInitialiseTaskLists+0x64>)
 800bf92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf94:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <prvInitialiseTaskLists+0x7c>)
 800bf96:	4a05      	ldr	r2, [pc, #20]	; (800bfac <prvInitialiseTaskLists+0x68>)
 800bf98:	601a      	str	r2, [r3, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000654 	.word	0x20000654
 800bfa8:	200006e0 	.word	0x200006e0
 800bfac:	200006f4 	.word	0x200006f4
 800bfb0:	20000710 	.word	0x20000710
 800bfb4:	20000724 	.word	0x20000724
 800bfb8:	2000073c 	.word	0x2000073c
 800bfbc:	20000708 	.word	0x20000708
 800bfc0:	2000070c 	.word	0x2000070c

0800bfc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfca:	e019      	b.n	800c000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfcc:	f000 f9fe 	bl	800c3cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <prvCheckTasksWaitingTermination+0x4c>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff faf6 	bl	800b5ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	; (800c014 <prvCheckTasksWaitingTermination+0x50>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	; (800c014 <prvCheckTasksWaitingTermination+0x50>)
 800bfea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <prvCheckTasksWaitingTermination+0x54>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	4a09      	ldr	r2, [pc, #36]	; (800c018 <prvCheckTasksWaitingTermination+0x54>)
 800bff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bff6:	f000 fa17 	bl	800c428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f80e 	bl	800c01c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <prvCheckTasksWaitingTermination+0x54>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e1      	bne.n	800bfcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20000724 	.word	0x20000724
 800c014:	20000750 	.word	0x20000750
 800c018:	20000738 	.word	0x20000738

0800c01c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d108      	bne.n	800c040 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	4618      	mov	r0, r3
 800c034:	f000 fb68 	bl	800c708 <vPortFree>
				vPortFree( pxTCB );
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fb65 	bl	800c708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c03e:	e017      	b.n	800c070 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c046:	2b01      	cmp	r3, #1
 800c048:	d103      	bne.n	800c052 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fb5c 	bl	800c708 <vPortFree>
	}
 800c050:	e00e      	b.n	800c070 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d009      	beq.n	800c070 <prvDeleteTCB+0x54>
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	e7fe      	b.n	800c06e <prvDeleteTCB+0x52>
	}
 800c070:	bf00      	nop
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <prvResetNextTaskUnblockTime+0x38>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d104      	bne.n	800c092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c08a:	f04f 32ff 	mov.w	r2, #4294967295
 800c08e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c090:	e008      	b.n	800c0a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c092:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <prvResetNextTaskUnblockTime+0x38>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	4a04      	ldr	r2, [pc, #16]	; (800c0b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c0a2:	6013      	str	r3, [r2, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	20000708 	.word	0x20000708
 800c0b4:	20000770 	.word	0x20000770

0800c0b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0c2:	4b29      	ldr	r3, [pc, #164]	; (800c168 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c8:	4b28      	ldr	r3, [pc, #160]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff fa7d 	bl	800b5ce <uxListRemove>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10b      	bne.n	800c0f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0da:	4b24      	ldr	r3, [pc, #144]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e6:	43da      	mvns	r2, r3
 800c0e8:	4b21      	ldr	r3, [pc, #132]	; (800c170 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	4a20      	ldr	r2, [pc, #128]	; (800c170 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f8:	d10a      	bne.n	800c110 <prvAddCurrentTaskToDelayedList+0x58>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d007      	beq.n	800c110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c100:	4b1a      	ldr	r3, [pc, #104]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3304      	adds	r3, #4
 800c106:	4619      	mov	r1, r3
 800c108:	481a      	ldr	r0, [pc, #104]	; (800c174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c10a:	f7ff fa03 	bl	800b514 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c10e:	e026      	b.n	800c15e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4413      	add	r3, r2
 800c116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c118:	4b14      	ldr	r3, [pc, #80]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	429a      	cmp	r2, r3
 800c126:	d209      	bcs.n	800c13c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c128:	4b13      	ldr	r3, [pc, #76]	; (800c178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7ff fa11 	bl	800b55c <vListInsert>
}
 800c13a:	e010      	b.n	800c15e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c13c:	4b0f      	ldr	r3, [pc, #60]	; (800c17c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3304      	adds	r3, #4
 800c146:	4619      	mov	r1, r3
 800c148:	4610      	mov	r0, r2
 800c14a:	f7ff fa07 	bl	800b55c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	429a      	cmp	r2, r3
 800c156:	d202      	bcs.n	800c15e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c158:	4a09      	ldr	r2, [pc, #36]	; (800c180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	6013      	str	r3, [r2, #0]
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000754 	.word	0x20000754
 800c16c:	20000650 	.word	0x20000650
 800c170:	20000758 	.word	0x20000758
 800c174:	2000073c 	.word	0x2000073c
 800c178:	2000070c 	.word	0x2000070c
 800c17c:	20000708 	.word	0x20000708
 800c180:	20000770 	.word	0x20000770

0800c184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3b04      	subs	r3, #4
 800c194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c19c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3b04      	subs	r3, #4
 800c1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f023 0201 	bic.w	r2, r3, #1
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3b04      	subs	r3, #4
 800c1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	; (800c1e8 <pxPortInitialiseStack+0x64>)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3b14      	subs	r3, #20
 800c1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3b04      	subs	r3, #4
 800c1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f06f 0202 	mvn.w	r2, #2
 800c1d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3b20      	subs	r3, #32
 800c1d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1da:	68fb      	ldr	r3, [r7, #12]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	0800c1ed 	.word	0x0800c1ed

0800c1ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1f6:	4b11      	ldr	r3, [pc, #68]	; (800c23c <prvTaskExitError+0x50>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fe:	d009      	beq.n	800c214 <prvTaskExitError+0x28>
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	e7fe      	b.n	800c212 <prvTaskExitError+0x26>
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c226:	bf00      	nop
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0fc      	beq.n	800c228 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	20000070 	.word	0x20000070

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20000650 	.word	0x20000650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b44      	ldr	r3, [pc, #272]	; (800c3a8 <xPortStartScheduler+0x118>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a44      	ldr	r2, [pc, #272]	; (800c3ac <xPortStartScheduler+0x11c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d109      	bne.n	800c2b4 <xPortStartScheduler+0x24>
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	e7fe      	b.n	800c2b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b4:	4b3c      	ldr	r3, [pc, #240]	; (800c3a8 <xPortStartScheduler+0x118>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a3d      	ldr	r2, [pc, #244]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d109      	bne.n	800c2d2 <xPortStartScheduler+0x42>
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	60fb      	str	r3, [r7, #12]
 800c2d0:	e7fe      	b.n	800c2d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d2:	4b38      	ldr	r3, [pc, #224]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c2d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	22ff      	movs	r2, #255	; 0xff
 800c2e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	4b30      	ldr	r3, [pc, #192]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fa:	4b30      	ldr	r3, [pc, #192]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2fc:	2207      	movs	r2, #7
 800c2fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c300:	e009      	b.n	800c316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c302:	4b2e      	ldr	r3, [pc, #184]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3b01      	subs	r3, #1
 800c308:	4a2c      	ldr	r2, [pc, #176]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c30a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b2db      	uxtb	r3, r3
 800c314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31e:	2b80      	cmp	r3, #128	; 0x80
 800c320:	d0ef      	beq.n	800c302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c322:	4b26      	ldr	r3, [pc, #152]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f1c3 0307 	rsb	r3, r3, #7
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d009      	beq.n	800c342 <xPortStartScheduler+0xb2>
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60bb      	str	r3, [r7, #8]
 800c340:	e7fe      	b.n	800c340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c342:	4b1e      	ldr	r3, [pc, #120]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	4a1c      	ldr	r2, [pc, #112]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c34a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c34c:	4b1b      	ldr	r3, [pc, #108]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c354:	4a19      	ldr	r2, [pc, #100]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c360:	4b17      	ldr	r3, [pc, #92]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a16      	ldr	r2, [pc, #88]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c36c:	4b14      	ldr	r3, [pc, #80]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a13      	ldr	r2, [pc, #76]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c378:	f000 f8d6 	bl	800c528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c37c:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c382:	f000 f8f5 	bl	800c570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a0f      	ldr	r2, [pc, #60]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c38c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c392:	f7ff ff69 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c396:	f7ff fcc7 	bl	800bd28 <vTaskSwitchContext>
	prvTaskExitError();
 800c39a:	f7ff ff27 	bl	800c1ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed00 	.word	0xe000ed00
 800c3ac:	410fc271 	.word	0x410fc271
 800c3b0:	410fc270 	.word	0x410fc270
 800c3b4:	e000e400 	.word	0xe000e400
 800c3b8:	2000077c 	.word	0x2000077c
 800c3bc:	20000780 	.word	0x20000780
 800c3c0:	e000ed20 	.word	0xe000ed20
 800c3c4:	20000070 	.word	0x20000070
 800c3c8:	e000ef34 	.word	0xe000ef34

0800c3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <vPortEnterCritical+0x54>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4a0d      	ldr	r2, [pc, #52]	; (800c420 <vPortEnterCritical+0x54>)
 800c3ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <vPortEnterCritical+0x54>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d10e      	bne.n	800c414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <vPortEnterCritical+0x58>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <vPortEnterCritical+0x48>
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	603b      	str	r3, [r7, #0]
 800c412:	e7fe      	b.n	800c412 <vPortEnterCritical+0x46>
	}
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20000070 	.word	0x20000070
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <vPortExitCritical+0x4c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <vPortExitCritical+0x22>
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	e7fe      	b.n	800c448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c44a:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <vPortExitCritical+0x4c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3b01      	subs	r3, #1
 800c450:	4a08      	ldr	r2, [pc, #32]	; (800c474 <vPortExitCritical+0x4c>)
 800c452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <vPortExitCritical+0x4c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <vPortExitCritical+0x3e>
 800c45c:	2300      	movs	r3, #0
 800c45e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c466:	bf00      	nop
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20000070 	.word	0x20000070
	...

0800c480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c480:	f3ef 8009 	mrs	r0, PSP
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <pxCurrentTCBConst>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	f01e 0f10 	tst.w	lr, #16
 800c490:	bf08      	it	eq
 800c492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	6010      	str	r0, [r2, #0]
 800c49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4a4:	f380 8811 	msr	BASEPRI, r0
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f7ff fc3a 	bl	800bd28 <vTaskSwitchContext>
 800c4b4:	f04f 0000 	mov.w	r0, #0
 800c4b8:	f380 8811 	msr	BASEPRI, r0
 800c4bc:	bc09      	pop	{r0, r3}
 800c4be:	6819      	ldr	r1, [r3, #0]
 800c4c0:	6808      	ldr	r0, [r1, #0]
 800c4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c6:	f01e 0f10 	tst.w	lr, #16
 800c4ca:	bf08      	it	eq
 800c4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4d0:	f380 8809 	msr	PSP, r0
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	f3af 8000 	nop.w

0800c4e0 <pxCurrentTCBConst>:
 800c4e0:	20000650 	.word	0x20000650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop

0800c4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c500:	f7ff fb5a 	bl	800bbb8 <xTaskIncrementTick>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <SysTick_Handler+0x3c>)
 800c50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed04 	.word	0xe000ed04

0800c528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c52c:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <vPortSetupTimerInterrupt+0x34>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c532:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <vPortSetupTimerInterrupt+0x38>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortSetupTimerInterrupt+0x3c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <vPortSetupTimerInterrupt+0x40>)
 800c53e:	fba2 2303 	umull	r2, r3, r2, r3
 800c542:	099b      	lsrs	r3, r3, #6
 800c544:	4a09      	ldr	r2, [pc, #36]	; (800c56c <vPortSetupTimerInterrupt+0x44>)
 800c546:	3b01      	subs	r3, #1
 800c548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c54a:	4b04      	ldr	r3, [pc, #16]	; (800c55c <vPortSetupTimerInterrupt+0x34>)
 800c54c:	2207      	movs	r2, #7
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	e000e010 	.word	0xe000e010
 800c560:	e000e018 	.word	0xe000e018
 800c564:	20000064 	.word	0x20000064
 800c568:	10624dd3 	.word	0x10624dd3
 800c56c:	e000e014 	.word	0xe000e014

0800c570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c580 <vPortEnableVFP+0x10>
 800c574:	6801      	ldr	r1, [r0, #0]
 800c576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c57a:	6001      	str	r1, [r0, #0]
 800c57c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c57e:	bf00      	nop
 800c580:	e000ed88 	.word	0xe000ed88

0800c584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	; 0x28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c590:	f7ff fa68 	bl	800ba64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c594:	4b57      	ldr	r3, [pc, #348]	; (800c6f4 <pvPortMalloc+0x170>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d101      	bne.n	800c5a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c59c:	f000 f90c 	bl	800c7b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5a0:	4b55      	ldr	r3, [pc, #340]	; (800c6f8 <pvPortMalloc+0x174>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f040 808c 	bne.w	800c6c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d01c      	beq.n	800c5ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c5b4:	2208      	movs	r2, #8
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d013      	beq.n	800c5ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f023 0307 	bic.w	r3, r3, #7
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f003 0307 	and.w	r3, r3, #7
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d009      	beq.n	800c5ee <pvPortMalloc+0x6a>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e7fe      	b.n	800c5ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d068      	beq.n	800c6c6 <pvPortMalloc+0x142>
 800c5f4:	4b41      	ldr	r3, [pc, #260]	; (800c6fc <pvPortMalloc+0x178>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d863      	bhi.n	800c6c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5fe:	4b40      	ldr	r3, [pc, #256]	; (800c700 <pvPortMalloc+0x17c>)
 800c600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c602:	4b3f      	ldr	r3, [pc, #252]	; (800c700 <pvPortMalloc+0x17c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c608:	e004      	b.n	800c614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d903      	bls.n	800c626 <pvPortMalloc+0xa2>
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f1      	bne.n	800c60a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c626:	4b33      	ldr	r3, [pc, #204]	; (800c6f4 <pvPortMalloc+0x170>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d04a      	beq.n	800c6c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2208      	movs	r2, #8
 800c636:	4413      	add	r3, r2
 800c638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	2308      	movs	r3, #8
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	429a      	cmp	r2, r3
 800c650:	d91e      	bls.n	800c690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	f003 0307 	and.w	r3, r3, #7
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <pvPortMalloc+0xf4>
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	613b      	str	r3, [r7, #16]
 800c676:	e7fe      	b.n	800c676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c68a:	69b8      	ldr	r0, [r7, #24]
 800c68c:	f000 f8f6 	bl	800c87c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c690:	4b1a      	ldr	r3, [pc, #104]	; (800c6fc <pvPortMalloc+0x178>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	4a18      	ldr	r2, [pc, #96]	; (800c6fc <pvPortMalloc+0x178>)
 800c69c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c69e:	4b17      	ldr	r3, [pc, #92]	; (800c6fc <pvPortMalloc+0x178>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	4b18      	ldr	r3, [pc, #96]	; (800c704 <pvPortMalloc+0x180>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d203      	bcs.n	800c6b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6aa:	4b14      	ldr	r3, [pc, #80]	; (800c6fc <pvPortMalloc+0x178>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a15      	ldr	r2, [pc, #84]	; (800c704 <pvPortMalloc+0x180>)
 800c6b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <pvPortMalloc+0x174>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6c6:	f7ff f9db 	bl	800ba80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	f003 0307 	and.w	r3, r3, #7
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d009      	beq.n	800c6e8 <pvPortMalloc+0x164>
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	e7fe      	b.n	800c6e6 <pvPortMalloc+0x162>
	return pvReturn;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3728      	adds	r7, #40	; 0x28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	2000438c 	.word	0x2000438c
 800c6f8:	20004398 	.word	0x20004398
 800c6fc:	20004390 	.word	0x20004390
 800c700:	20004384 	.word	0x20004384
 800c704:	20004394 	.word	0x20004394

0800c708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d046      	beq.n	800c7a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c71a:	2308      	movs	r3, #8
 800c71c:	425b      	negs	r3, r3
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	4413      	add	r3, r2
 800c722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4b20      	ldr	r3, [pc, #128]	; (800c7b0 <vPortFree+0xa8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4013      	ands	r3, r2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d109      	bne.n	800c74a <vPortFree+0x42>
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e7fe      	b.n	800c748 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d009      	beq.n	800c766 <vPortFree+0x5e>
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60bb      	str	r3, [r7, #8]
 800c764:	e7fe      	b.n	800c764 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	685a      	ldr	r2, [r3, #4]
 800c76a:	4b11      	ldr	r3, [pc, #68]	; (800c7b0 <vPortFree+0xa8>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4013      	ands	r3, r2
 800c770:	2b00      	cmp	r3, #0
 800c772:	d019      	beq.n	800c7a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d115      	bne.n	800c7a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4b0b      	ldr	r3, [pc, #44]	; (800c7b0 <vPortFree+0xa8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	43db      	mvns	r3, r3
 800c786:	401a      	ands	r2, r3
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c78c:	f7ff f96a 	bl	800ba64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	4b07      	ldr	r3, [pc, #28]	; (800c7b4 <vPortFree+0xac>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4413      	add	r3, r2
 800c79a:	4a06      	ldr	r2, [pc, #24]	; (800c7b4 <vPortFree+0xac>)
 800c79c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c79e:	6938      	ldr	r0, [r7, #16]
 800c7a0:	f000 f86c 	bl	800c87c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c7a4:	f7ff f96c 	bl	800ba80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7a8:	bf00      	nop
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20004398 	.word	0x20004398
 800c7b4:	20004390 	.word	0x20004390

0800c7b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7c4:	4b27      	ldr	r3, [pc, #156]	; (800c864 <prvHeapInit+0xac>)
 800c7c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00c      	beq.n	800c7ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3307      	adds	r3, #7
 800c7d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f023 0307 	bic.w	r3, r3, #7
 800c7de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	4a1f      	ldr	r2, [pc, #124]	; (800c864 <prvHeapInit+0xac>)
 800c7e8:	4413      	add	r3, r2
 800c7ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <prvHeapInit+0xb0>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7f6:	4b1c      	ldr	r3, [pc, #112]	; (800c868 <prvHeapInit+0xb0>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	4413      	add	r3, r2
 800c802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c804:	2208      	movs	r2, #8
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f023 0307 	bic.w	r3, r3, #7
 800c812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4a15      	ldr	r2, [pc, #84]	; (800c86c <prvHeapInit+0xb4>)
 800c818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c81a:	4b14      	ldr	r3, [pc, #80]	; (800c86c <prvHeapInit+0xb4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2200      	movs	r2, #0
 800c820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <prvHeapInit+0xb4>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2200      	movs	r2, #0
 800c828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	1ad2      	subs	r2, r2, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c838:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <prvHeapInit+0xb4>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a0a      	ldr	r2, [pc, #40]	; (800c870 <prvHeapInit+0xb8>)
 800c846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a09      	ldr	r2, [pc, #36]	; (800c874 <prvHeapInit+0xbc>)
 800c84e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c850:	4b09      	ldr	r3, [pc, #36]	; (800c878 <prvHeapInit+0xc0>)
 800c852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c856:	601a      	str	r2, [r3, #0]
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	20000784 	.word	0x20000784
 800c868:	20004384 	.word	0x20004384
 800c86c:	2000438c 	.word	0x2000438c
 800c870:	20004394 	.word	0x20004394
 800c874:	20004390 	.word	0x20004390
 800c878:	20004398 	.word	0x20004398

0800c87c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c884:	4b28      	ldr	r3, [pc, #160]	; (800c928 <prvInsertBlockIntoFreeList+0xac>)
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e002      	b.n	800c890 <prvInsertBlockIntoFreeList+0x14>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d8f7      	bhi.n	800c88a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d108      	bne.n	800c8be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685a      	ldr	r2, [r3, #4]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	441a      	add	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d118      	bne.n	800c904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	4b15      	ldr	r3, [pc, #84]	; (800c92c <prvInsertBlockIntoFreeList+0xb0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d00d      	beq.n	800c8fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685a      	ldr	r2, [r3, #4]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	441a      	add	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	e008      	b.n	800c90c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8fa:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <prvInsertBlockIntoFreeList+0xb0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	e003      	b.n	800c90c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	429a      	cmp	r2, r3
 800c912:	d002      	beq.n	800c91a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	20004384 	.word	0x20004384
 800c92c:	2000438c 	.word	0x2000438c

0800c930 <atoi>:
 800c930:	220a      	movs	r2, #10
 800c932:	2100      	movs	r1, #0
 800c934:	f000 b98e 	b.w	800cc54 <strtol>

0800c938 <__errno>:
 800c938:	4b01      	ldr	r3, [pc, #4]	; (800c940 <__errno+0x8>)
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20000074 	.word	0x20000074

0800c944 <__libc_init_array>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4e0d      	ldr	r6, [pc, #52]	; (800c97c <__libc_init_array+0x38>)
 800c948:	4c0d      	ldr	r4, [pc, #52]	; (800c980 <__libc_init_array+0x3c>)
 800c94a:	1ba4      	subs	r4, r4, r6
 800c94c:	10a4      	asrs	r4, r4, #2
 800c94e:	2500      	movs	r5, #0
 800c950:	42a5      	cmp	r5, r4
 800c952:	d109      	bne.n	800c968 <__libc_init_array+0x24>
 800c954:	4e0b      	ldr	r6, [pc, #44]	; (800c984 <__libc_init_array+0x40>)
 800c956:	4c0c      	ldr	r4, [pc, #48]	; (800c988 <__libc_init_array+0x44>)
 800c958:	f001 fa54 	bl	800de04 <_init>
 800c95c:	1ba4      	subs	r4, r4, r6
 800c95e:	10a4      	asrs	r4, r4, #2
 800c960:	2500      	movs	r5, #0
 800c962:	42a5      	cmp	r5, r4
 800c964:	d105      	bne.n	800c972 <__libc_init_array+0x2e>
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c96c:	4798      	blx	r3
 800c96e:	3501      	adds	r5, #1
 800c970:	e7ee      	b.n	800c950 <__libc_init_array+0xc>
 800c972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c976:	4798      	blx	r3
 800c978:	3501      	adds	r5, #1
 800c97a:	e7f2      	b.n	800c962 <__libc_init_array+0x1e>
 800c97c:	0800e80c 	.word	0x0800e80c
 800c980:	0800e80c 	.word	0x0800e80c
 800c984:	0800e80c 	.word	0x0800e80c
 800c988:	0800e810 	.word	0x0800e810

0800c98c <memcpy>:
 800c98c:	b510      	push	{r4, lr}
 800c98e:	1e43      	subs	r3, r0, #1
 800c990:	440a      	add	r2, r1
 800c992:	4291      	cmp	r1, r2
 800c994:	d100      	bne.n	800c998 <memcpy+0xc>
 800c996:	bd10      	pop	{r4, pc}
 800c998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c99c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a0:	e7f7      	b.n	800c992 <memcpy+0x6>

0800c9a2 <memset>:
 800c9a2:	4402      	add	r2, r0
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d100      	bne.n	800c9ac <memset+0xa>
 800c9aa:	4770      	bx	lr
 800c9ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c9b0:	e7f9      	b.n	800c9a6 <memset+0x4>
	...

0800c9b4 <iprintf>:
 800c9b4:	b40f      	push	{r0, r1, r2, r3}
 800c9b6:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <iprintf+0x2c>)
 800c9b8:	b513      	push	{r0, r1, r4, lr}
 800c9ba:	681c      	ldr	r4, [r3, #0]
 800c9bc:	b124      	cbz	r4, 800c9c8 <iprintf+0x14>
 800c9be:	69a3      	ldr	r3, [r4, #24]
 800c9c0:	b913      	cbnz	r3, 800c9c8 <iprintf+0x14>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fb0c 	bl	800cfe0 <__sinit>
 800c9c8:	ab05      	add	r3, sp, #20
 800c9ca:	9a04      	ldr	r2, [sp, #16]
 800c9cc:	68a1      	ldr	r1, [r4, #8]
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fe2d 	bl	800d630 <_vfiprintf_r>
 800c9d6:	b002      	add	sp, #8
 800c9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9dc:	b004      	add	sp, #16
 800c9de:	4770      	bx	lr
 800c9e0:	20000074 	.word	0x20000074

0800c9e4 <_puts_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460e      	mov	r6, r1
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	b118      	cbz	r0, 800c9f4 <_puts_r+0x10>
 800c9ec:	6983      	ldr	r3, [r0, #24]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <_puts_r+0x10>
 800c9f0:	f000 faf6 	bl	800cfe0 <__sinit>
 800c9f4:	69ab      	ldr	r3, [r5, #24]
 800c9f6:	68ac      	ldr	r4, [r5, #8]
 800c9f8:	b913      	cbnz	r3, 800ca00 <_puts_r+0x1c>
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 faf0 	bl	800cfe0 <__sinit>
 800ca00:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <_puts_r+0xac>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d117      	bne.n	800ca36 <_puts_r+0x52>
 800ca06:	686c      	ldr	r4, [r5, #4]
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	071b      	lsls	r3, r3, #28
 800ca0c:	d51d      	bpl.n	800ca4a <_puts_r+0x66>
 800ca0e:	6923      	ldr	r3, [r4, #16]
 800ca10:	b1db      	cbz	r3, 800ca4a <_puts_r+0x66>
 800ca12:	3e01      	subs	r6, #1
 800ca14:	68a3      	ldr	r3, [r4, #8]
 800ca16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	b9e9      	cbnz	r1, 800ca5c <_puts_r+0x78>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	da2e      	bge.n	800ca82 <_puts_r+0x9e>
 800ca24:	4622      	mov	r2, r4
 800ca26:	210a      	movs	r1, #10
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f000 f929 	bl	800cc80 <__swbuf_r>
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d011      	beq.n	800ca56 <_puts_r+0x72>
 800ca32:	200a      	movs	r0, #10
 800ca34:	e011      	b.n	800ca5a <_puts_r+0x76>
 800ca36:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <_puts_r+0xb0>)
 800ca38:	429c      	cmp	r4, r3
 800ca3a:	d101      	bne.n	800ca40 <_puts_r+0x5c>
 800ca3c:	68ac      	ldr	r4, [r5, #8]
 800ca3e:	e7e3      	b.n	800ca08 <_puts_r+0x24>
 800ca40:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <_puts_r+0xb4>)
 800ca42:	429c      	cmp	r4, r3
 800ca44:	bf08      	it	eq
 800ca46:	68ec      	ldreq	r4, [r5, #12]
 800ca48:	e7de      	b.n	800ca08 <_puts_r+0x24>
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 f969 	bl	800cd24 <__swsetup_r>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d0dd      	beq.n	800ca12 <_puts_r+0x2e>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	da04      	bge.n	800ca6a <_puts_r+0x86>
 800ca60:	69a2      	ldr	r2, [r4, #24]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	dc06      	bgt.n	800ca74 <_puts_r+0x90>
 800ca66:	290a      	cmp	r1, #10
 800ca68:	d004      	beq.n	800ca74 <_puts_r+0x90>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	6022      	str	r2, [r4, #0]
 800ca70:	7019      	strb	r1, [r3, #0]
 800ca72:	e7cf      	b.n	800ca14 <_puts_r+0x30>
 800ca74:	4622      	mov	r2, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 f902 	bl	800cc80 <__swbuf_r>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1c9      	bne.n	800ca14 <_puts_r+0x30>
 800ca80:	e7e9      	b.n	800ca56 <_puts_r+0x72>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	200a      	movs	r0, #10
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	6022      	str	r2, [r4, #0]
 800ca8a:	7018      	strb	r0, [r3, #0]
 800ca8c:	e7e5      	b.n	800ca5a <_puts_r+0x76>
 800ca8e:	bf00      	nop
 800ca90:	0800e684 	.word	0x0800e684
 800ca94:	0800e6a4 	.word	0x0800e6a4
 800ca98:	0800e664 	.word	0x0800e664

0800ca9c <puts>:
 800ca9c:	4b02      	ldr	r3, [pc, #8]	; (800caa8 <puts+0xc>)
 800ca9e:	4601      	mov	r1, r0
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f7ff bf9f 	b.w	800c9e4 <_puts_r>
 800caa6:	bf00      	nop
 800caa8:	20000074 	.word	0x20000074

0800caac <siprintf>:
 800caac:	b40e      	push	{r1, r2, r3}
 800caae:	b500      	push	{lr}
 800cab0:	b09c      	sub	sp, #112	; 0x70
 800cab2:	ab1d      	add	r3, sp, #116	; 0x74
 800cab4:	9002      	str	r0, [sp, #8]
 800cab6:	9006      	str	r0, [sp, #24]
 800cab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cabc:	4809      	ldr	r0, [pc, #36]	; (800cae4 <siprintf+0x38>)
 800cabe:	9107      	str	r1, [sp, #28]
 800cac0:	9104      	str	r1, [sp, #16]
 800cac2:	4909      	ldr	r1, [pc, #36]	; (800cae8 <siprintf+0x3c>)
 800cac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac8:	9105      	str	r1, [sp, #20]
 800caca:	6800      	ldr	r0, [r0, #0]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	a902      	add	r1, sp, #8
 800cad0:	f000 fc8c 	bl	800d3ec <_svfiprintf_r>
 800cad4:	9b02      	ldr	r3, [sp, #8]
 800cad6:	2200      	movs	r2, #0
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	b01c      	add	sp, #112	; 0x70
 800cadc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae0:	b003      	add	sp, #12
 800cae2:	4770      	bx	lr
 800cae4:	20000074 	.word	0x20000074
 800cae8:	ffff0208 	.word	0xffff0208

0800caec <strchr>:
 800caec:	b2c9      	uxtb	r1, r1
 800caee:	4603      	mov	r3, r0
 800caf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf4:	b11a      	cbz	r2, 800cafe <strchr+0x12>
 800caf6:	428a      	cmp	r2, r1
 800caf8:	d1f9      	bne.n	800caee <strchr+0x2>
 800cafa:	4618      	mov	r0, r3
 800cafc:	4770      	bx	lr
 800cafe:	2900      	cmp	r1, #0
 800cb00:	bf18      	it	ne
 800cb02:	2300      	movne	r3, #0
 800cb04:	e7f9      	b.n	800cafa <strchr+0xe>

0800cb06 <strncmp>:
 800cb06:	b510      	push	{r4, lr}
 800cb08:	b16a      	cbz	r2, 800cb26 <strncmp+0x20>
 800cb0a:	3901      	subs	r1, #1
 800cb0c:	1884      	adds	r4, r0, r2
 800cb0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d103      	bne.n	800cb22 <strncmp+0x1c>
 800cb1a:	42a0      	cmp	r0, r4
 800cb1c:	d001      	beq.n	800cb22 <strncmp+0x1c>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1f5      	bne.n	800cb0e <strncmp+0x8>
 800cb22:	1a98      	subs	r0, r3, r2
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	4610      	mov	r0, r2
 800cb28:	e7fc      	b.n	800cb24 <strncmp+0x1e>

0800cb2a <strstr>:
 800cb2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2c:	7803      	ldrb	r3, [r0, #0]
 800cb2e:	b17b      	cbz	r3, 800cb50 <strstr+0x26>
 800cb30:	4604      	mov	r4, r0
 800cb32:	7823      	ldrb	r3, [r4, #0]
 800cb34:	4620      	mov	r0, r4
 800cb36:	1c66      	adds	r6, r4, #1
 800cb38:	b17b      	cbz	r3, 800cb5a <strstr+0x30>
 800cb3a:	1e4a      	subs	r2, r1, #1
 800cb3c:	1e63      	subs	r3, r4, #1
 800cb3e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800cb42:	b14d      	cbz	r5, 800cb58 <strstr+0x2e>
 800cb44:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800cb48:	42af      	cmp	r7, r5
 800cb4a:	4634      	mov	r4, r6
 800cb4c:	d0f7      	beq.n	800cb3e <strstr+0x14>
 800cb4e:	e7f0      	b.n	800cb32 <strstr+0x8>
 800cb50:	780b      	ldrb	r3, [r1, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bf18      	it	ne
 800cb56:	2000      	movne	r0, #0
 800cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	e7fc      	b.n	800cb58 <strstr+0x2e>

0800cb5e <_strtol_l.isra.0>:
 800cb5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb62:	4680      	mov	r8, r0
 800cb64:	4689      	mov	r9, r1
 800cb66:	4692      	mov	sl, r2
 800cb68:	461e      	mov	r6, r3
 800cb6a:	460f      	mov	r7, r1
 800cb6c:	463d      	mov	r5, r7
 800cb6e:	9808      	ldr	r0, [sp, #32]
 800cb70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb74:	f000 fabe 	bl	800d0f4 <__locale_ctype_ptr_l>
 800cb78:	4420      	add	r0, r4
 800cb7a:	7843      	ldrb	r3, [r0, #1]
 800cb7c:	f013 0308 	ands.w	r3, r3, #8
 800cb80:	d132      	bne.n	800cbe8 <_strtol_l.isra.0+0x8a>
 800cb82:	2c2d      	cmp	r4, #45	; 0x2d
 800cb84:	d132      	bne.n	800cbec <_strtol_l.isra.0+0x8e>
 800cb86:	787c      	ldrb	r4, [r7, #1]
 800cb88:	1cbd      	adds	r5, r7, #2
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	2e00      	cmp	r6, #0
 800cb8e:	d05d      	beq.n	800cc4c <_strtol_l.isra.0+0xee>
 800cb90:	2e10      	cmp	r6, #16
 800cb92:	d109      	bne.n	800cba8 <_strtol_l.isra.0+0x4a>
 800cb94:	2c30      	cmp	r4, #48	; 0x30
 800cb96:	d107      	bne.n	800cba8 <_strtol_l.isra.0+0x4a>
 800cb98:	782b      	ldrb	r3, [r5, #0]
 800cb9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb9e:	2b58      	cmp	r3, #88	; 0x58
 800cba0:	d14f      	bne.n	800cc42 <_strtol_l.isra.0+0xe4>
 800cba2:	786c      	ldrb	r4, [r5, #1]
 800cba4:	2610      	movs	r6, #16
 800cba6:	3502      	adds	r5, #2
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	bf14      	ite	ne
 800cbac:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cbb0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cbb4:	2700      	movs	r7, #0
 800cbb6:	fbb1 fcf6 	udiv	ip, r1, r6
 800cbba:	4638      	mov	r0, r7
 800cbbc:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cbc0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cbc4:	2b09      	cmp	r3, #9
 800cbc6:	d817      	bhi.n	800cbf8 <_strtol_l.isra.0+0x9a>
 800cbc8:	461c      	mov	r4, r3
 800cbca:	42a6      	cmp	r6, r4
 800cbcc:	dd23      	ble.n	800cc16 <_strtol_l.isra.0+0xb8>
 800cbce:	1c7b      	adds	r3, r7, #1
 800cbd0:	d007      	beq.n	800cbe2 <_strtol_l.isra.0+0x84>
 800cbd2:	4584      	cmp	ip, r0
 800cbd4:	d31c      	bcc.n	800cc10 <_strtol_l.isra.0+0xb2>
 800cbd6:	d101      	bne.n	800cbdc <_strtol_l.isra.0+0x7e>
 800cbd8:	45a6      	cmp	lr, r4
 800cbda:	db19      	blt.n	800cc10 <_strtol_l.isra.0+0xb2>
 800cbdc:	fb00 4006 	mla	r0, r0, r6, r4
 800cbe0:	2701      	movs	r7, #1
 800cbe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbe6:	e7eb      	b.n	800cbc0 <_strtol_l.isra.0+0x62>
 800cbe8:	462f      	mov	r7, r5
 800cbea:	e7bf      	b.n	800cb6c <_strtol_l.isra.0+0xe>
 800cbec:	2c2b      	cmp	r4, #43	; 0x2b
 800cbee:	bf04      	itt	eq
 800cbf0:	1cbd      	addeq	r5, r7, #2
 800cbf2:	787c      	ldrbeq	r4, [r7, #1]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	e7c9      	b.n	800cb8c <_strtol_l.isra.0+0x2e>
 800cbf8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cbfc:	2b19      	cmp	r3, #25
 800cbfe:	d801      	bhi.n	800cc04 <_strtol_l.isra.0+0xa6>
 800cc00:	3c37      	subs	r4, #55	; 0x37
 800cc02:	e7e2      	b.n	800cbca <_strtol_l.isra.0+0x6c>
 800cc04:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cc08:	2b19      	cmp	r3, #25
 800cc0a:	d804      	bhi.n	800cc16 <_strtol_l.isra.0+0xb8>
 800cc0c:	3c57      	subs	r4, #87	; 0x57
 800cc0e:	e7dc      	b.n	800cbca <_strtol_l.isra.0+0x6c>
 800cc10:	f04f 37ff 	mov.w	r7, #4294967295
 800cc14:	e7e5      	b.n	800cbe2 <_strtol_l.isra.0+0x84>
 800cc16:	1c7b      	adds	r3, r7, #1
 800cc18:	d108      	bne.n	800cc2c <_strtol_l.isra.0+0xce>
 800cc1a:	2322      	movs	r3, #34	; 0x22
 800cc1c:	f8c8 3000 	str.w	r3, [r8]
 800cc20:	4608      	mov	r0, r1
 800cc22:	f1ba 0f00 	cmp.w	sl, #0
 800cc26:	d107      	bne.n	800cc38 <_strtol_l.isra.0+0xda>
 800cc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2c:	b102      	cbz	r2, 800cc30 <_strtol_l.isra.0+0xd2>
 800cc2e:	4240      	negs	r0, r0
 800cc30:	f1ba 0f00 	cmp.w	sl, #0
 800cc34:	d0f8      	beq.n	800cc28 <_strtol_l.isra.0+0xca>
 800cc36:	b10f      	cbz	r7, 800cc3c <_strtol_l.isra.0+0xde>
 800cc38:	f105 39ff 	add.w	r9, r5, #4294967295
 800cc3c:	f8ca 9000 	str.w	r9, [sl]
 800cc40:	e7f2      	b.n	800cc28 <_strtol_l.isra.0+0xca>
 800cc42:	2430      	movs	r4, #48	; 0x30
 800cc44:	2e00      	cmp	r6, #0
 800cc46:	d1af      	bne.n	800cba8 <_strtol_l.isra.0+0x4a>
 800cc48:	2608      	movs	r6, #8
 800cc4a:	e7ad      	b.n	800cba8 <_strtol_l.isra.0+0x4a>
 800cc4c:	2c30      	cmp	r4, #48	; 0x30
 800cc4e:	d0a3      	beq.n	800cb98 <_strtol_l.isra.0+0x3a>
 800cc50:	260a      	movs	r6, #10
 800cc52:	e7a9      	b.n	800cba8 <_strtol_l.isra.0+0x4a>

0800cc54 <strtol>:
 800cc54:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <strtol+0x24>)
 800cc56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc58:	681c      	ldr	r4, [r3, #0]
 800cc5a:	4d08      	ldr	r5, [pc, #32]	; (800cc7c <strtol+0x28>)
 800cc5c:	6a23      	ldr	r3, [r4, #32]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bf08      	it	eq
 800cc62:	462b      	moveq	r3, r5
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	4613      	mov	r3, r2
 800cc68:	460a      	mov	r2, r1
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7ff ff76 	bl	800cb5e <_strtol_l.isra.0>
 800cc72:	b003      	add	sp, #12
 800cc74:	bd30      	pop	{r4, r5, pc}
 800cc76:	bf00      	nop
 800cc78:	20000074 	.word	0x20000074
 800cc7c:	200000d8 	.word	0x200000d8

0800cc80 <__swbuf_r>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	460e      	mov	r6, r1
 800cc84:	4614      	mov	r4, r2
 800cc86:	4605      	mov	r5, r0
 800cc88:	b118      	cbz	r0, 800cc92 <__swbuf_r+0x12>
 800cc8a:	6983      	ldr	r3, [r0, #24]
 800cc8c:	b90b      	cbnz	r3, 800cc92 <__swbuf_r+0x12>
 800cc8e:	f000 f9a7 	bl	800cfe0 <__sinit>
 800cc92:	4b21      	ldr	r3, [pc, #132]	; (800cd18 <__swbuf_r+0x98>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	d12a      	bne.n	800ccee <__swbuf_r+0x6e>
 800cc98:	686c      	ldr	r4, [r5, #4]
 800cc9a:	69a3      	ldr	r3, [r4, #24]
 800cc9c:	60a3      	str	r3, [r4, #8]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	071a      	lsls	r2, r3, #28
 800cca2:	d52e      	bpl.n	800cd02 <__swbuf_r+0x82>
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	b363      	cbz	r3, 800cd02 <__swbuf_r+0x82>
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	6820      	ldr	r0, [r4, #0]
 800ccac:	1ac0      	subs	r0, r0, r3
 800ccae:	6963      	ldr	r3, [r4, #20]
 800ccb0:	b2f6      	uxtb	r6, r6
 800ccb2:	4283      	cmp	r3, r0
 800ccb4:	4637      	mov	r7, r6
 800ccb6:	dc04      	bgt.n	800ccc2 <__swbuf_r+0x42>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f000 f926 	bl	800cf0c <_fflush_r>
 800ccc0:	bb28      	cbnz	r0, 800cd0e <__swbuf_r+0x8e>
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	60a3      	str	r3, [r4, #8]
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	6022      	str	r2, [r4, #0]
 800ccce:	701e      	strb	r6, [r3, #0]
 800ccd0:	6963      	ldr	r3, [r4, #20]
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	4283      	cmp	r3, r0
 800ccd6:	d004      	beq.n	800cce2 <__swbuf_r+0x62>
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	07db      	lsls	r3, r3, #31
 800ccdc:	d519      	bpl.n	800cd12 <__swbuf_r+0x92>
 800ccde:	2e0a      	cmp	r6, #10
 800cce0:	d117      	bne.n	800cd12 <__swbuf_r+0x92>
 800cce2:	4621      	mov	r1, r4
 800cce4:	4628      	mov	r0, r5
 800cce6:	f000 f911 	bl	800cf0c <_fflush_r>
 800ccea:	b190      	cbz	r0, 800cd12 <__swbuf_r+0x92>
 800ccec:	e00f      	b.n	800cd0e <__swbuf_r+0x8e>
 800ccee:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <__swbuf_r+0x9c>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	d101      	bne.n	800ccf8 <__swbuf_r+0x78>
 800ccf4:	68ac      	ldr	r4, [r5, #8]
 800ccf6:	e7d0      	b.n	800cc9a <__swbuf_r+0x1a>
 800ccf8:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <__swbuf_r+0xa0>)
 800ccfa:	429c      	cmp	r4, r3
 800ccfc:	bf08      	it	eq
 800ccfe:	68ec      	ldreq	r4, [r5, #12]
 800cd00:	e7cb      	b.n	800cc9a <__swbuf_r+0x1a>
 800cd02:	4621      	mov	r1, r4
 800cd04:	4628      	mov	r0, r5
 800cd06:	f000 f80d 	bl	800cd24 <__swsetup_r>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d0cc      	beq.n	800cca8 <__swbuf_r+0x28>
 800cd0e:	f04f 37ff 	mov.w	r7, #4294967295
 800cd12:	4638      	mov	r0, r7
 800cd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd16:	bf00      	nop
 800cd18:	0800e684 	.word	0x0800e684
 800cd1c:	0800e6a4 	.word	0x0800e6a4
 800cd20:	0800e664 	.word	0x0800e664

0800cd24 <__swsetup_r>:
 800cd24:	4b32      	ldr	r3, [pc, #200]	; (800cdf0 <__swsetup_r+0xcc>)
 800cd26:	b570      	push	{r4, r5, r6, lr}
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	b125      	cbz	r5, 800cd3a <__swsetup_r+0x16>
 800cd30:	69ab      	ldr	r3, [r5, #24]
 800cd32:	b913      	cbnz	r3, 800cd3a <__swsetup_r+0x16>
 800cd34:	4628      	mov	r0, r5
 800cd36:	f000 f953 	bl	800cfe0 <__sinit>
 800cd3a:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <__swsetup_r+0xd0>)
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	d10f      	bne.n	800cd60 <__swsetup_r+0x3c>
 800cd40:	686c      	ldr	r4, [r5, #4]
 800cd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	0715      	lsls	r5, r2, #28
 800cd4a:	d42c      	bmi.n	800cda6 <__swsetup_r+0x82>
 800cd4c:	06d0      	lsls	r0, r2, #27
 800cd4e:	d411      	bmi.n	800cd74 <__swsetup_r+0x50>
 800cd50:	2209      	movs	r2, #9
 800cd52:	6032      	str	r2, [r6, #0]
 800cd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd58:	81a3      	strh	r3, [r4, #12]
 800cd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5e:	e03e      	b.n	800cdde <__swsetup_r+0xba>
 800cd60:	4b25      	ldr	r3, [pc, #148]	; (800cdf8 <__swsetup_r+0xd4>)
 800cd62:	429c      	cmp	r4, r3
 800cd64:	d101      	bne.n	800cd6a <__swsetup_r+0x46>
 800cd66:	68ac      	ldr	r4, [r5, #8]
 800cd68:	e7eb      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd6a:	4b24      	ldr	r3, [pc, #144]	; (800cdfc <__swsetup_r+0xd8>)
 800cd6c:	429c      	cmp	r4, r3
 800cd6e:	bf08      	it	eq
 800cd70:	68ec      	ldreq	r4, [r5, #12]
 800cd72:	e7e6      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd74:	0751      	lsls	r1, r2, #29
 800cd76:	d512      	bpl.n	800cd9e <__swsetup_r+0x7a>
 800cd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd7a:	b141      	cbz	r1, 800cd8e <__swsetup_r+0x6a>
 800cd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd80:	4299      	cmp	r1, r3
 800cd82:	d002      	beq.n	800cd8a <__swsetup_r+0x66>
 800cd84:	4630      	mov	r0, r6
 800cd86:	f000 fa2f 	bl	800d1e8 <_free_r>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	2300      	movs	r3, #0
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	f043 0308 	orr.w	r3, r3, #8
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	6923      	ldr	r3, [r4, #16]
 800cda8:	b94b      	cbnz	r3, 800cdbe <__swsetup_r+0x9a>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb4:	d003      	beq.n	800cdbe <__swsetup_r+0x9a>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 f9c3 	bl	800d144 <__smakebuf_r>
 800cdbe:	89a2      	ldrh	r2, [r4, #12]
 800cdc0:	f012 0301 	ands.w	r3, r2, #1
 800cdc4:	d00c      	beq.n	800cde0 <__swsetup_r+0xbc>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60a3      	str	r3, [r4, #8]
 800cdca:	6963      	ldr	r3, [r4, #20]
 800cdcc:	425b      	negs	r3, r3
 800cdce:	61a3      	str	r3, [r4, #24]
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	b953      	cbnz	r3, 800cdea <__swsetup_r+0xc6>
 800cdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cddc:	d1ba      	bne.n	800cd54 <__swsetup_r+0x30>
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	0792      	lsls	r2, r2, #30
 800cde2:	bf58      	it	pl
 800cde4:	6963      	ldrpl	r3, [r4, #20]
 800cde6:	60a3      	str	r3, [r4, #8]
 800cde8:	e7f2      	b.n	800cdd0 <__swsetup_r+0xac>
 800cdea:	2000      	movs	r0, #0
 800cdec:	e7f7      	b.n	800cdde <__swsetup_r+0xba>
 800cdee:	bf00      	nop
 800cdf0:	20000074 	.word	0x20000074
 800cdf4:	0800e684 	.word	0x0800e684
 800cdf8:	0800e6a4 	.word	0x0800e6a4
 800cdfc:	0800e664 	.word	0x0800e664

0800ce00 <__sflush_r>:
 800ce00:	898a      	ldrh	r2, [r1, #12]
 800ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce06:	4605      	mov	r5, r0
 800ce08:	0710      	lsls	r0, r2, #28
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	d458      	bmi.n	800cec0 <__sflush_r+0xc0>
 800ce0e:	684b      	ldr	r3, [r1, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc05      	bgt.n	800ce20 <__sflush_r+0x20>
 800ce14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	dc02      	bgt.n	800ce20 <__sflush_r+0x20>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce22:	2e00      	cmp	r6, #0
 800ce24:	d0f9      	beq.n	800ce1a <__sflush_r+0x1a>
 800ce26:	2300      	movs	r3, #0
 800ce28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce2c:	682f      	ldr	r7, [r5, #0]
 800ce2e:	6a21      	ldr	r1, [r4, #32]
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	d032      	beq.n	800ce9a <__sflush_r+0x9a>
 800ce34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	075a      	lsls	r2, r3, #29
 800ce3a:	d505      	bpl.n	800ce48 <__sflush_r+0x48>
 800ce3c:	6863      	ldr	r3, [r4, #4]
 800ce3e:	1ac0      	subs	r0, r0, r3
 800ce40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce42:	b10b      	cbz	r3, 800ce48 <__sflush_r+0x48>
 800ce44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce46:	1ac0      	subs	r0, r0, r3
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce4e:	6a21      	ldr	r1, [r4, #32]
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b0      	blx	r6
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	d106      	bne.n	800ce68 <__sflush_r+0x68>
 800ce5a:	6829      	ldr	r1, [r5, #0]
 800ce5c:	291d      	cmp	r1, #29
 800ce5e:	d848      	bhi.n	800cef2 <__sflush_r+0xf2>
 800ce60:	4a29      	ldr	r2, [pc, #164]	; (800cf08 <__sflush_r+0x108>)
 800ce62:	40ca      	lsrs	r2, r1
 800ce64:	07d6      	lsls	r6, r2, #31
 800ce66:	d544      	bpl.n	800cef2 <__sflush_r+0xf2>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	6062      	str	r2, [r4, #4]
 800ce6c:	04d9      	lsls	r1, r3, #19
 800ce6e:	6922      	ldr	r2, [r4, #16]
 800ce70:	6022      	str	r2, [r4, #0]
 800ce72:	d504      	bpl.n	800ce7e <__sflush_r+0x7e>
 800ce74:	1c42      	adds	r2, r0, #1
 800ce76:	d101      	bne.n	800ce7c <__sflush_r+0x7c>
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	b903      	cbnz	r3, 800ce7e <__sflush_r+0x7e>
 800ce7c:	6560      	str	r0, [r4, #84]	; 0x54
 800ce7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce80:	602f      	str	r7, [r5, #0]
 800ce82:	2900      	cmp	r1, #0
 800ce84:	d0c9      	beq.n	800ce1a <__sflush_r+0x1a>
 800ce86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce8a:	4299      	cmp	r1, r3
 800ce8c:	d002      	beq.n	800ce94 <__sflush_r+0x94>
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f000 f9aa 	bl	800d1e8 <_free_r>
 800ce94:	2000      	movs	r0, #0
 800ce96:	6360      	str	r0, [r4, #52]	; 0x34
 800ce98:	e7c0      	b.n	800ce1c <__sflush_r+0x1c>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b0      	blx	r6
 800cea0:	1c41      	adds	r1, r0, #1
 800cea2:	d1c8      	bne.n	800ce36 <__sflush_r+0x36>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0c5      	beq.n	800ce36 <__sflush_r+0x36>
 800ceaa:	2b1d      	cmp	r3, #29
 800ceac:	d001      	beq.n	800ceb2 <__sflush_r+0xb2>
 800ceae:	2b16      	cmp	r3, #22
 800ceb0:	d101      	bne.n	800ceb6 <__sflush_r+0xb6>
 800ceb2:	602f      	str	r7, [r5, #0]
 800ceb4:	e7b1      	b.n	800ce1a <__sflush_r+0x1a>
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cebc:	81a3      	strh	r3, [r4, #12]
 800cebe:	e7ad      	b.n	800ce1c <__sflush_r+0x1c>
 800cec0:	690f      	ldr	r7, [r1, #16]
 800cec2:	2f00      	cmp	r7, #0
 800cec4:	d0a9      	beq.n	800ce1a <__sflush_r+0x1a>
 800cec6:	0793      	lsls	r3, r2, #30
 800cec8:	680e      	ldr	r6, [r1, #0]
 800ceca:	bf08      	it	eq
 800cecc:	694b      	ldreq	r3, [r1, #20]
 800cece:	600f      	str	r7, [r1, #0]
 800ced0:	bf18      	it	ne
 800ced2:	2300      	movne	r3, #0
 800ced4:	eba6 0807 	sub.w	r8, r6, r7
 800ced8:	608b      	str	r3, [r1, #8]
 800ceda:	f1b8 0f00 	cmp.w	r8, #0
 800cede:	dd9c      	ble.n	800ce1a <__sflush_r+0x1a>
 800cee0:	4643      	mov	r3, r8
 800cee2:	463a      	mov	r2, r7
 800cee4:	6a21      	ldr	r1, [r4, #32]
 800cee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	2800      	cmp	r0, #0
 800ceee:	dc06      	bgt.n	800cefe <__sflush_r+0xfe>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	f04f 30ff 	mov.w	r0, #4294967295
 800cefc:	e78e      	b.n	800ce1c <__sflush_r+0x1c>
 800cefe:	4407      	add	r7, r0
 800cf00:	eba8 0800 	sub.w	r8, r8, r0
 800cf04:	e7e9      	b.n	800ceda <__sflush_r+0xda>
 800cf06:	bf00      	nop
 800cf08:	20400001 	.word	0x20400001

0800cf0c <_fflush_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	690b      	ldr	r3, [r1, #16]
 800cf10:	4605      	mov	r5, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	b1db      	cbz	r3, 800cf4e <_fflush_r+0x42>
 800cf16:	b118      	cbz	r0, 800cf20 <_fflush_r+0x14>
 800cf18:	6983      	ldr	r3, [r0, #24]
 800cf1a:	b90b      	cbnz	r3, 800cf20 <_fflush_r+0x14>
 800cf1c:	f000 f860 	bl	800cfe0 <__sinit>
 800cf20:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <_fflush_r+0x48>)
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d109      	bne.n	800cf3a <_fflush_r+0x2e>
 800cf26:	686c      	ldr	r4, [r5, #4]
 800cf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2c:	b17b      	cbz	r3, 800cf4e <_fflush_r+0x42>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf36:	f7ff bf63 	b.w	800ce00 <__sflush_r>
 800cf3a:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <_fflush_r+0x4c>)
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	d101      	bne.n	800cf44 <_fflush_r+0x38>
 800cf40:	68ac      	ldr	r4, [r5, #8]
 800cf42:	e7f1      	b.n	800cf28 <_fflush_r+0x1c>
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <_fflush_r+0x50>)
 800cf46:	429c      	cmp	r4, r3
 800cf48:	bf08      	it	eq
 800cf4a:	68ec      	ldreq	r4, [r5, #12]
 800cf4c:	e7ec      	b.n	800cf28 <_fflush_r+0x1c>
 800cf4e:	2000      	movs	r0, #0
 800cf50:	bd38      	pop	{r3, r4, r5, pc}
 800cf52:	bf00      	nop
 800cf54:	0800e684 	.word	0x0800e684
 800cf58:	0800e6a4 	.word	0x0800e6a4
 800cf5c:	0800e664 	.word	0x0800e664

0800cf60 <std>:
 800cf60:	2300      	movs	r3, #0
 800cf62:	b510      	push	{r4, lr}
 800cf64:	4604      	mov	r4, r0
 800cf66:	e9c0 3300 	strd	r3, r3, [r0]
 800cf6a:	6083      	str	r3, [r0, #8]
 800cf6c:	8181      	strh	r1, [r0, #12]
 800cf6e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf70:	81c2      	strh	r2, [r0, #14]
 800cf72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf76:	6183      	str	r3, [r0, #24]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	305c      	adds	r0, #92	; 0x5c
 800cf7e:	f7ff fd10 	bl	800c9a2 <memset>
 800cf82:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <std+0x38>)
 800cf84:	6263      	str	r3, [r4, #36]	; 0x24
 800cf86:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <std+0x3c>)
 800cf88:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf8a:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <std+0x40>)
 800cf8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf8e:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <std+0x44>)
 800cf90:	6224      	str	r4, [r4, #32]
 800cf92:	6323      	str	r3, [r4, #48]	; 0x30
 800cf94:	bd10      	pop	{r4, pc}
 800cf96:	bf00      	nop
 800cf98:	0800db8d 	.word	0x0800db8d
 800cf9c:	0800dbaf 	.word	0x0800dbaf
 800cfa0:	0800dbe7 	.word	0x0800dbe7
 800cfa4:	0800dc0b 	.word	0x0800dc0b

0800cfa8 <_cleanup_r>:
 800cfa8:	4901      	ldr	r1, [pc, #4]	; (800cfb0 <_cleanup_r+0x8>)
 800cfaa:	f000 b885 	b.w	800d0b8 <_fwalk_reent>
 800cfae:	bf00      	nop
 800cfb0:	0800cf0d 	.word	0x0800cf0d

0800cfb4 <__sfmoreglue>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	1e4a      	subs	r2, r1, #1
 800cfb8:	2568      	movs	r5, #104	; 0x68
 800cfba:	4355      	muls	r5, r2
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfc2:	f000 f95f 	bl	800d284 <_malloc_r>
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	b140      	cbz	r0, 800cfdc <__sfmoreglue+0x28>
 800cfca:	2100      	movs	r1, #0
 800cfcc:	e9c0 1600 	strd	r1, r6, [r0]
 800cfd0:	300c      	adds	r0, #12
 800cfd2:	60a0      	str	r0, [r4, #8]
 800cfd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfd8:	f7ff fce3 	bl	800c9a2 <memset>
 800cfdc:	4620      	mov	r0, r4
 800cfde:	bd70      	pop	{r4, r5, r6, pc}

0800cfe0 <__sinit>:
 800cfe0:	6983      	ldr	r3, [r0, #24]
 800cfe2:	b510      	push	{r4, lr}
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	bb33      	cbnz	r3, 800d036 <__sinit+0x56>
 800cfe8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cfec:	6503      	str	r3, [r0, #80]	; 0x50
 800cfee:	4b12      	ldr	r3, [pc, #72]	; (800d038 <__sinit+0x58>)
 800cff0:	4a12      	ldr	r2, [pc, #72]	; (800d03c <__sinit+0x5c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6282      	str	r2, [r0, #40]	; 0x28
 800cff6:	4298      	cmp	r0, r3
 800cff8:	bf04      	itt	eq
 800cffa:	2301      	moveq	r3, #1
 800cffc:	6183      	streq	r3, [r0, #24]
 800cffe:	f000 f81f 	bl	800d040 <__sfp>
 800d002:	6060      	str	r0, [r4, #4]
 800d004:	4620      	mov	r0, r4
 800d006:	f000 f81b 	bl	800d040 <__sfp>
 800d00a:	60a0      	str	r0, [r4, #8]
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 f817 	bl	800d040 <__sfp>
 800d012:	2200      	movs	r2, #0
 800d014:	60e0      	str	r0, [r4, #12]
 800d016:	2104      	movs	r1, #4
 800d018:	6860      	ldr	r0, [r4, #4]
 800d01a:	f7ff ffa1 	bl	800cf60 <std>
 800d01e:	2201      	movs	r2, #1
 800d020:	2109      	movs	r1, #9
 800d022:	68a0      	ldr	r0, [r4, #8]
 800d024:	f7ff ff9c 	bl	800cf60 <std>
 800d028:	2202      	movs	r2, #2
 800d02a:	2112      	movs	r1, #18
 800d02c:	68e0      	ldr	r0, [r4, #12]
 800d02e:	f7ff ff97 	bl	800cf60 <std>
 800d032:	2301      	movs	r3, #1
 800d034:	61a3      	str	r3, [r4, #24]
 800d036:	bd10      	pop	{r4, pc}
 800d038:	0800e660 	.word	0x0800e660
 800d03c:	0800cfa9 	.word	0x0800cfa9

0800d040 <__sfp>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	4b1b      	ldr	r3, [pc, #108]	; (800d0b0 <__sfp+0x70>)
 800d044:	681e      	ldr	r6, [r3, #0]
 800d046:	69b3      	ldr	r3, [r6, #24]
 800d048:	4607      	mov	r7, r0
 800d04a:	b913      	cbnz	r3, 800d052 <__sfp+0x12>
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7ff ffc7 	bl	800cfe0 <__sinit>
 800d052:	3648      	adds	r6, #72	; 0x48
 800d054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d058:	3b01      	subs	r3, #1
 800d05a:	d503      	bpl.n	800d064 <__sfp+0x24>
 800d05c:	6833      	ldr	r3, [r6, #0]
 800d05e:	b133      	cbz	r3, 800d06e <__sfp+0x2e>
 800d060:	6836      	ldr	r6, [r6, #0]
 800d062:	e7f7      	b.n	800d054 <__sfp+0x14>
 800d064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d068:	b16d      	cbz	r5, 800d086 <__sfp+0x46>
 800d06a:	3468      	adds	r4, #104	; 0x68
 800d06c:	e7f4      	b.n	800d058 <__sfp+0x18>
 800d06e:	2104      	movs	r1, #4
 800d070:	4638      	mov	r0, r7
 800d072:	f7ff ff9f 	bl	800cfb4 <__sfmoreglue>
 800d076:	6030      	str	r0, [r6, #0]
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1f1      	bne.n	800d060 <__sfp+0x20>
 800d07c:	230c      	movs	r3, #12
 800d07e:	603b      	str	r3, [r7, #0]
 800d080:	4604      	mov	r4, r0
 800d082:	4620      	mov	r0, r4
 800d084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d086:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <__sfp+0x74>)
 800d088:	6665      	str	r5, [r4, #100]	; 0x64
 800d08a:	e9c4 5500 	strd	r5, r5, [r4]
 800d08e:	60a5      	str	r5, [r4, #8]
 800d090:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d094:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d098:	2208      	movs	r2, #8
 800d09a:	4629      	mov	r1, r5
 800d09c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0a0:	f7ff fc7f 	bl	800c9a2 <memset>
 800d0a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0ac:	e7e9      	b.n	800d082 <__sfp+0x42>
 800d0ae:	bf00      	nop
 800d0b0:	0800e660 	.word	0x0800e660
 800d0b4:	ffff0001 	.word	0xffff0001

0800d0b8 <_fwalk_reent>:
 800d0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0bc:	4680      	mov	r8, r0
 800d0be:	4689      	mov	r9, r1
 800d0c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0c4:	2600      	movs	r6, #0
 800d0c6:	b914      	cbnz	r4, 800d0ce <_fwalk_reent+0x16>
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d0d2:	3f01      	subs	r7, #1
 800d0d4:	d501      	bpl.n	800d0da <_fwalk_reent+0x22>
 800d0d6:	6824      	ldr	r4, [r4, #0]
 800d0d8:	e7f5      	b.n	800d0c6 <_fwalk_reent+0xe>
 800d0da:	89ab      	ldrh	r3, [r5, #12]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d907      	bls.n	800d0f0 <_fwalk_reent+0x38>
 800d0e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	d003      	beq.n	800d0f0 <_fwalk_reent+0x38>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	47c8      	blx	r9
 800d0ee:	4306      	orrs	r6, r0
 800d0f0:	3568      	adds	r5, #104	; 0x68
 800d0f2:	e7ee      	b.n	800d0d2 <_fwalk_reent+0x1a>

0800d0f4 <__locale_ctype_ptr_l>:
 800d0f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d0f8:	4770      	bx	lr

0800d0fa <__swhatbuf_r>:
 800d0fa:	b570      	push	{r4, r5, r6, lr}
 800d0fc:	460e      	mov	r6, r1
 800d0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d102:	2900      	cmp	r1, #0
 800d104:	b096      	sub	sp, #88	; 0x58
 800d106:	4614      	mov	r4, r2
 800d108:	461d      	mov	r5, r3
 800d10a:	da07      	bge.n	800d11c <__swhatbuf_r+0x22>
 800d10c:	2300      	movs	r3, #0
 800d10e:	602b      	str	r3, [r5, #0]
 800d110:	89b3      	ldrh	r3, [r6, #12]
 800d112:	061a      	lsls	r2, r3, #24
 800d114:	d410      	bmi.n	800d138 <__swhatbuf_r+0x3e>
 800d116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d11a:	e00e      	b.n	800d13a <__swhatbuf_r+0x40>
 800d11c:	466a      	mov	r2, sp
 800d11e:	f000 fda7 	bl	800dc70 <_fstat_r>
 800d122:	2800      	cmp	r0, #0
 800d124:	dbf2      	blt.n	800d10c <__swhatbuf_r+0x12>
 800d126:	9a01      	ldr	r2, [sp, #4]
 800d128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d12c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d130:	425a      	negs	r2, r3
 800d132:	415a      	adcs	r2, r3
 800d134:	602a      	str	r2, [r5, #0]
 800d136:	e7ee      	b.n	800d116 <__swhatbuf_r+0x1c>
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	2000      	movs	r0, #0
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	b016      	add	sp, #88	; 0x58
 800d140:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d144 <__smakebuf_r>:
 800d144:	898b      	ldrh	r3, [r1, #12]
 800d146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d148:	079d      	lsls	r5, r3, #30
 800d14a:	4606      	mov	r6, r0
 800d14c:	460c      	mov	r4, r1
 800d14e:	d507      	bpl.n	800d160 <__smakebuf_r+0x1c>
 800d150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	6123      	str	r3, [r4, #16]
 800d158:	2301      	movs	r3, #1
 800d15a:	6163      	str	r3, [r4, #20]
 800d15c:	b002      	add	sp, #8
 800d15e:	bd70      	pop	{r4, r5, r6, pc}
 800d160:	ab01      	add	r3, sp, #4
 800d162:	466a      	mov	r2, sp
 800d164:	f7ff ffc9 	bl	800d0fa <__swhatbuf_r>
 800d168:	9900      	ldr	r1, [sp, #0]
 800d16a:	4605      	mov	r5, r0
 800d16c:	4630      	mov	r0, r6
 800d16e:	f000 f889 	bl	800d284 <_malloc_r>
 800d172:	b948      	cbnz	r0, 800d188 <__smakebuf_r+0x44>
 800d174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d178:	059a      	lsls	r2, r3, #22
 800d17a:	d4ef      	bmi.n	800d15c <__smakebuf_r+0x18>
 800d17c:	f023 0303 	bic.w	r3, r3, #3
 800d180:	f043 0302 	orr.w	r3, r3, #2
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	e7e3      	b.n	800d150 <__smakebuf_r+0xc>
 800d188:	4b0d      	ldr	r3, [pc, #52]	; (800d1c0 <__smakebuf_r+0x7c>)
 800d18a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	6020      	str	r0, [r4, #0]
 800d190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	9b00      	ldr	r3, [sp, #0]
 800d198:	6163      	str	r3, [r4, #20]
 800d19a:	9b01      	ldr	r3, [sp, #4]
 800d19c:	6120      	str	r0, [r4, #16]
 800d19e:	b15b      	cbz	r3, 800d1b8 <__smakebuf_r+0x74>
 800d1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f000 fd75 	bl	800dc94 <_isatty_r>
 800d1aa:	b128      	cbz	r0, 800d1b8 <__smakebuf_r+0x74>
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	81a3      	strh	r3, [r4, #12]
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	431d      	orrs	r5, r3
 800d1bc:	81a5      	strh	r5, [r4, #12]
 800d1be:	e7cd      	b.n	800d15c <__smakebuf_r+0x18>
 800d1c0:	0800cfa9 	.word	0x0800cfa9

0800d1c4 <__ascii_mbtowc>:
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	b901      	cbnz	r1, 800d1ca <__ascii_mbtowc+0x6>
 800d1c8:	a901      	add	r1, sp, #4
 800d1ca:	b142      	cbz	r2, 800d1de <__ascii_mbtowc+0x1a>
 800d1cc:	b14b      	cbz	r3, 800d1e2 <__ascii_mbtowc+0x1e>
 800d1ce:	7813      	ldrb	r3, [r2, #0]
 800d1d0:	600b      	str	r3, [r1, #0]
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	1c10      	adds	r0, r2, #0
 800d1d6:	bf18      	it	ne
 800d1d8:	2001      	movne	r0, #1
 800d1da:	b002      	add	sp, #8
 800d1dc:	4770      	bx	lr
 800d1de:	4610      	mov	r0, r2
 800d1e0:	e7fb      	b.n	800d1da <__ascii_mbtowc+0x16>
 800d1e2:	f06f 0001 	mvn.w	r0, #1
 800d1e6:	e7f8      	b.n	800d1da <__ascii_mbtowc+0x16>

0800d1e8 <_free_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	2900      	cmp	r1, #0
 800d1ee:	d045      	beq.n	800d27c <_free_r+0x94>
 800d1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f4:	1f0c      	subs	r4, r1, #4
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	bfb8      	it	lt
 800d1fa:	18e4      	addlt	r4, r4, r3
 800d1fc:	f000 fd85 	bl	800dd0a <__malloc_lock>
 800d200:	4a1f      	ldr	r2, [pc, #124]	; (800d280 <_free_r+0x98>)
 800d202:	6813      	ldr	r3, [r2, #0]
 800d204:	4610      	mov	r0, r2
 800d206:	b933      	cbnz	r3, 800d216 <_free_r+0x2e>
 800d208:	6063      	str	r3, [r4, #4]
 800d20a:	6014      	str	r4, [r2, #0]
 800d20c:	4628      	mov	r0, r5
 800d20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d212:	f000 bd7b 	b.w	800dd0c <__malloc_unlock>
 800d216:	42a3      	cmp	r3, r4
 800d218:	d90c      	bls.n	800d234 <_free_r+0x4c>
 800d21a:	6821      	ldr	r1, [r4, #0]
 800d21c:	1862      	adds	r2, r4, r1
 800d21e:	4293      	cmp	r3, r2
 800d220:	bf04      	itt	eq
 800d222:	681a      	ldreq	r2, [r3, #0]
 800d224:	685b      	ldreq	r3, [r3, #4]
 800d226:	6063      	str	r3, [r4, #4]
 800d228:	bf04      	itt	eq
 800d22a:	1852      	addeq	r2, r2, r1
 800d22c:	6022      	streq	r2, [r4, #0]
 800d22e:	6004      	str	r4, [r0, #0]
 800d230:	e7ec      	b.n	800d20c <_free_r+0x24>
 800d232:	4613      	mov	r3, r2
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	b10a      	cbz	r2, 800d23c <_free_r+0x54>
 800d238:	42a2      	cmp	r2, r4
 800d23a:	d9fa      	bls.n	800d232 <_free_r+0x4a>
 800d23c:	6819      	ldr	r1, [r3, #0]
 800d23e:	1858      	adds	r0, r3, r1
 800d240:	42a0      	cmp	r0, r4
 800d242:	d10b      	bne.n	800d25c <_free_r+0x74>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	4401      	add	r1, r0
 800d248:	1858      	adds	r0, r3, r1
 800d24a:	4282      	cmp	r2, r0
 800d24c:	6019      	str	r1, [r3, #0]
 800d24e:	d1dd      	bne.n	800d20c <_free_r+0x24>
 800d250:	6810      	ldr	r0, [r2, #0]
 800d252:	6852      	ldr	r2, [r2, #4]
 800d254:	605a      	str	r2, [r3, #4]
 800d256:	4401      	add	r1, r0
 800d258:	6019      	str	r1, [r3, #0]
 800d25a:	e7d7      	b.n	800d20c <_free_r+0x24>
 800d25c:	d902      	bls.n	800d264 <_free_r+0x7c>
 800d25e:	230c      	movs	r3, #12
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	e7d3      	b.n	800d20c <_free_r+0x24>
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	1821      	adds	r1, r4, r0
 800d268:	428a      	cmp	r2, r1
 800d26a:	bf04      	itt	eq
 800d26c:	6811      	ldreq	r1, [r2, #0]
 800d26e:	6852      	ldreq	r2, [r2, #4]
 800d270:	6062      	str	r2, [r4, #4]
 800d272:	bf04      	itt	eq
 800d274:	1809      	addeq	r1, r1, r0
 800d276:	6021      	streq	r1, [r4, #0]
 800d278:	605c      	str	r4, [r3, #4]
 800d27a:	e7c7      	b.n	800d20c <_free_r+0x24>
 800d27c:	bd38      	pop	{r3, r4, r5, pc}
 800d27e:	bf00      	nop
 800d280:	2000439c 	.word	0x2000439c

0800d284 <_malloc_r>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	1ccd      	adds	r5, r1, #3
 800d288:	f025 0503 	bic.w	r5, r5, #3
 800d28c:	3508      	adds	r5, #8
 800d28e:	2d0c      	cmp	r5, #12
 800d290:	bf38      	it	cc
 800d292:	250c      	movcc	r5, #12
 800d294:	2d00      	cmp	r5, #0
 800d296:	4606      	mov	r6, r0
 800d298:	db01      	blt.n	800d29e <_malloc_r+0x1a>
 800d29a:	42a9      	cmp	r1, r5
 800d29c:	d903      	bls.n	800d2a6 <_malloc_r+0x22>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	6033      	str	r3, [r6, #0]
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	bd70      	pop	{r4, r5, r6, pc}
 800d2a6:	f000 fd30 	bl	800dd0a <__malloc_lock>
 800d2aa:	4a21      	ldr	r2, [pc, #132]	; (800d330 <_malloc_r+0xac>)
 800d2ac:	6814      	ldr	r4, [r2, #0]
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	b991      	cbnz	r1, 800d2d8 <_malloc_r+0x54>
 800d2b2:	4c20      	ldr	r4, [pc, #128]	; (800d334 <_malloc_r+0xb0>)
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	b91b      	cbnz	r3, 800d2c0 <_malloc_r+0x3c>
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f000 fc57 	bl	800db6c <_sbrk_r>
 800d2be:	6020      	str	r0, [r4, #0]
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f000 fc52 	bl	800db6c <_sbrk_r>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d124      	bne.n	800d316 <_malloc_r+0x92>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	6033      	str	r3, [r6, #0]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 fd1b 	bl	800dd0c <__malloc_unlock>
 800d2d6:	e7e4      	b.n	800d2a2 <_malloc_r+0x1e>
 800d2d8:	680b      	ldr	r3, [r1, #0]
 800d2da:	1b5b      	subs	r3, r3, r5
 800d2dc:	d418      	bmi.n	800d310 <_malloc_r+0x8c>
 800d2de:	2b0b      	cmp	r3, #11
 800d2e0:	d90f      	bls.n	800d302 <_malloc_r+0x7e>
 800d2e2:	600b      	str	r3, [r1, #0]
 800d2e4:	50cd      	str	r5, [r1, r3]
 800d2e6:	18cc      	adds	r4, r1, r3
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f000 fd0f 	bl	800dd0c <__malloc_unlock>
 800d2ee:	f104 000b 	add.w	r0, r4, #11
 800d2f2:	1d23      	adds	r3, r4, #4
 800d2f4:	f020 0007 	bic.w	r0, r0, #7
 800d2f8:	1ac3      	subs	r3, r0, r3
 800d2fa:	d0d3      	beq.n	800d2a4 <_malloc_r+0x20>
 800d2fc:	425a      	negs	r2, r3
 800d2fe:	50e2      	str	r2, [r4, r3]
 800d300:	e7d0      	b.n	800d2a4 <_malloc_r+0x20>
 800d302:	428c      	cmp	r4, r1
 800d304:	684b      	ldr	r3, [r1, #4]
 800d306:	bf16      	itet	ne
 800d308:	6063      	strne	r3, [r4, #4]
 800d30a:	6013      	streq	r3, [r2, #0]
 800d30c:	460c      	movne	r4, r1
 800d30e:	e7eb      	b.n	800d2e8 <_malloc_r+0x64>
 800d310:	460c      	mov	r4, r1
 800d312:	6849      	ldr	r1, [r1, #4]
 800d314:	e7cc      	b.n	800d2b0 <_malloc_r+0x2c>
 800d316:	1cc4      	adds	r4, r0, #3
 800d318:	f024 0403 	bic.w	r4, r4, #3
 800d31c:	42a0      	cmp	r0, r4
 800d31e:	d005      	beq.n	800d32c <_malloc_r+0xa8>
 800d320:	1a21      	subs	r1, r4, r0
 800d322:	4630      	mov	r0, r6
 800d324:	f000 fc22 	bl	800db6c <_sbrk_r>
 800d328:	3001      	adds	r0, #1
 800d32a:	d0cf      	beq.n	800d2cc <_malloc_r+0x48>
 800d32c:	6025      	str	r5, [r4, #0]
 800d32e:	e7db      	b.n	800d2e8 <_malloc_r+0x64>
 800d330:	2000439c 	.word	0x2000439c
 800d334:	200043a0 	.word	0x200043a0

0800d338 <__ssputs_r>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	688e      	ldr	r6, [r1, #8]
 800d33e:	429e      	cmp	r6, r3
 800d340:	4682      	mov	sl, r0
 800d342:	460c      	mov	r4, r1
 800d344:	4690      	mov	r8, r2
 800d346:	4699      	mov	r9, r3
 800d348:	d837      	bhi.n	800d3ba <__ssputs_r+0x82>
 800d34a:	898a      	ldrh	r2, [r1, #12]
 800d34c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d350:	d031      	beq.n	800d3b6 <__ssputs_r+0x7e>
 800d352:	6825      	ldr	r5, [r4, #0]
 800d354:	6909      	ldr	r1, [r1, #16]
 800d356:	1a6f      	subs	r7, r5, r1
 800d358:	6965      	ldr	r5, [r4, #20]
 800d35a:	2302      	movs	r3, #2
 800d35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d360:	fb95 f5f3 	sdiv	r5, r5, r3
 800d364:	f109 0301 	add.w	r3, r9, #1
 800d368:	443b      	add	r3, r7
 800d36a:	429d      	cmp	r5, r3
 800d36c:	bf38      	it	cc
 800d36e:	461d      	movcc	r5, r3
 800d370:	0553      	lsls	r3, r2, #21
 800d372:	d530      	bpl.n	800d3d6 <__ssputs_r+0x9e>
 800d374:	4629      	mov	r1, r5
 800d376:	f7ff ff85 	bl	800d284 <_malloc_r>
 800d37a:	4606      	mov	r6, r0
 800d37c:	b950      	cbnz	r0, 800d394 <__ssputs_r+0x5c>
 800d37e:	230c      	movs	r3, #12
 800d380:	f8ca 3000 	str.w	r3, [sl]
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	f04f 30ff 	mov.w	r0, #4294967295
 800d390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d394:	463a      	mov	r2, r7
 800d396:	6921      	ldr	r1, [r4, #16]
 800d398:	f7ff faf8 	bl	800c98c <memcpy>
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	6126      	str	r6, [r4, #16]
 800d3aa:	6165      	str	r5, [r4, #20]
 800d3ac:	443e      	add	r6, r7
 800d3ae:	1bed      	subs	r5, r5, r7
 800d3b0:	6026      	str	r6, [r4, #0]
 800d3b2:	60a5      	str	r5, [r4, #8]
 800d3b4:	464e      	mov	r6, r9
 800d3b6:	454e      	cmp	r6, r9
 800d3b8:	d900      	bls.n	800d3bc <__ssputs_r+0x84>
 800d3ba:	464e      	mov	r6, r9
 800d3bc:	4632      	mov	r2, r6
 800d3be:	4641      	mov	r1, r8
 800d3c0:	6820      	ldr	r0, [r4, #0]
 800d3c2:	f000 fc89 	bl	800dcd8 <memmove>
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	1b9b      	subs	r3, r3, r6
 800d3ca:	60a3      	str	r3, [r4, #8]
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	441e      	add	r6, r3
 800d3d0:	6026      	str	r6, [r4, #0]
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e7dc      	b.n	800d390 <__ssputs_r+0x58>
 800d3d6:	462a      	mov	r2, r5
 800d3d8:	f000 fc99 	bl	800dd0e <_realloc_r>
 800d3dc:	4606      	mov	r6, r0
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d1e2      	bne.n	800d3a8 <__ssputs_r+0x70>
 800d3e2:	6921      	ldr	r1, [r4, #16]
 800d3e4:	4650      	mov	r0, sl
 800d3e6:	f7ff feff 	bl	800d1e8 <_free_r>
 800d3ea:	e7c8      	b.n	800d37e <__ssputs_r+0x46>

0800d3ec <_svfiprintf_r>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	461d      	mov	r5, r3
 800d3f2:	898b      	ldrh	r3, [r1, #12]
 800d3f4:	061f      	lsls	r7, r3, #24
 800d3f6:	b09d      	sub	sp, #116	; 0x74
 800d3f8:	4680      	mov	r8, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	d50f      	bpl.n	800d420 <_svfiprintf_r+0x34>
 800d400:	690b      	ldr	r3, [r1, #16]
 800d402:	b96b      	cbnz	r3, 800d420 <_svfiprintf_r+0x34>
 800d404:	2140      	movs	r1, #64	; 0x40
 800d406:	f7ff ff3d 	bl	800d284 <_malloc_r>
 800d40a:	6020      	str	r0, [r4, #0]
 800d40c:	6120      	str	r0, [r4, #16]
 800d40e:	b928      	cbnz	r0, 800d41c <_svfiprintf_r+0x30>
 800d410:	230c      	movs	r3, #12
 800d412:	f8c8 3000 	str.w	r3, [r8]
 800d416:	f04f 30ff 	mov.w	r0, #4294967295
 800d41a:	e0c8      	b.n	800d5ae <_svfiprintf_r+0x1c2>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	2300      	movs	r3, #0
 800d422:	9309      	str	r3, [sp, #36]	; 0x24
 800d424:	2320      	movs	r3, #32
 800d426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d42a:	2330      	movs	r3, #48	; 0x30
 800d42c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d430:	9503      	str	r5, [sp, #12]
 800d432:	f04f 0b01 	mov.w	fp, #1
 800d436:	4637      	mov	r7, r6
 800d438:	463d      	mov	r5, r7
 800d43a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d43e:	b10b      	cbz	r3, 800d444 <_svfiprintf_r+0x58>
 800d440:	2b25      	cmp	r3, #37	; 0x25
 800d442:	d13e      	bne.n	800d4c2 <_svfiprintf_r+0xd6>
 800d444:	ebb7 0a06 	subs.w	sl, r7, r6
 800d448:	d00b      	beq.n	800d462 <_svfiprintf_r+0x76>
 800d44a:	4653      	mov	r3, sl
 800d44c:	4632      	mov	r2, r6
 800d44e:	4621      	mov	r1, r4
 800d450:	4640      	mov	r0, r8
 800d452:	f7ff ff71 	bl	800d338 <__ssputs_r>
 800d456:	3001      	adds	r0, #1
 800d458:	f000 80a4 	beq.w	800d5a4 <_svfiprintf_r+0x1b8>
 800d45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45e:	4453      	add	r3, sl
 800d460:	9309      	str	r3, [sp, #36]	; 0x24
 800d462:	783b      	ldrb	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 809d 	beq.w	800d5a4 <_svfiprintf_r+0x1b8>
 800d46a:	2300      	movs	r3, #0
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295
 800d470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	9307      	str	r3, [sp, #28]
 800d478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d47c:	931a      	str	r3, [sp, #104]	; 0x68
 800d47e:	462f      	mov	r7, r5
 800d480:	2205      	movs	r2, #5
 800d482:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d486:	4850      	ldr	r0, [pc, #320]	; (800d5c8 <_svfiprintf_r+0x1dc>)
 800d488:	f7f2 fec2 	bl	8000210 <memchr>
 800d48c:	9b04      	ldr	r3, [sp, #16]
 800d48e:	b9d0      	cbnz	r0, 800d4c6 <_svfiprintf_r+0xda>
 800d490:	06d9      	lsls	r1, r3, #27
 800d492:	bf44      	itt	mi
 800d494:	2220      	movmi	r2, #32
 800d496:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d49a:	071a      	lsls	r2, r3, #28
 800d49c:	bf44      	itt	mi
 800d49e:	222b      	movmi	r2, #43	; 0x2b
 800d4a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4a4:	782a      	ldrb	r2, [r5, #0]
 800d4a6:	2a2a      	cmp	r2, #42	; 0x2a
 800d4a8:	d015      	beq.n	800d4d6 <_svfiprintf_r+0xea>
 800d4aa:	9a07      	ldr	r2, [sp, #28]
 800d4ac:	462f      	mov	r7, r5
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	250a      	movs	r5, #10
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4b8:	3b30      	subs	r3, #48	; 0x30
 800d4ba:	2b09      	cmp	r3, #9
 800d4bc:	d94d      	bls.n	800d55a <_svfiprintf_r+0x16e>
 800d4be:	b1b8      	cbz	r0, 800d4f0 <_svfiprintf_r+0x104>
 800d4c0:	e00f      	b.n	800d4e2 <_svfiprintf_r+0xf6>
 800d4c2:	462f      	mov	r7, r5
 800d4c4:	e7b8      	b.n	800d438 <_svfiprintf_r+0x4c>
 800d4c6:	4a40      	ldr	r2, [pc, #256]	; (800d5c8 <_svfiprintf_r+0x1dc>)
 800d4c8:	1a80      	subs	r0, r0, r2
 800d4ca:	fa0b f000 	lsl.w	r0, fp, r0
 800d4ce:	4318      	orrs	r0, r3
 800d4d0:	9004      	str	r0, [sp, #16]
 800d4d2:	463d      	mov	r5, r7
 800d4d4:	e7d3      	b.n	800d47e <_svfiprintf_r+0x92>
 800d4d6:	9a03      	ldr	r2, [sp, #12]
 800d4d8:	1d11      	adds	r1, r2, #4
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	9103      	str	r1, [sp, #12]
 800d4de:	2a00      	cmp	r2, #0
 800d4e0:	db01      	blt.n	800d4e6 <_svfiprintf_r+0xfa>
 800d4e2:	9207      	str	r2, [sp, #28]
 800d4e4:	e004      	b.n	800d4f0 <_svfiprintf_r+0x104>
 800d4e6:	4252      	negs	r2, r2
 800d4e8:	f043 0302 	orr.w	r3, r3, #2
 800d4ec:	9207      	str	r2, [sp, #28]
 800d4ee:	9304      	str	r3, [sp, #16]
 800d4f0:	783b      	ldrb	r3, [r7, #0]
 800d4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4f4:	d10c      	bne.n	800d510 <_svfiprintf_r+0x124>
 800d4f6:	787b      	ldrb	r3, [r7, #1]
 800d4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4fa:	d133      	bne.n	800d564 <_svfiprintf_r+0x178>
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	1d1a      	adds	r2, r3, #4
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	9203      	str	r2, [sp, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfb8      	it	lt
 800d508:	f04f 33ff 	movlt.w	r3, #4294967295
 800d50c:	3702      	adds	r7, #2
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	4d2e      	ldr	r5, [pc, #184]	; (800d5cc <_svfiprintf_r+0x1e0>)
 800d512:	7839      	ldrb	r1, [r7, #0]
 800d514:	2203      	movs	r2, #3
 800d516:	4628      	mov	r0, r5
 800d518:	f7f2 fe7a 	bl	8000210 <memchr>
 800d51c:	b138      	cbz	r0, 800d52e <_svfiprintf_r+0x142>
 800d51e:	2340      	movs	r3, #64	; 0x40
 800d520:	1b40      	subs	r0, r0, r5
 800d522:	fa03 f000 	lsl.w	r0, r3, r0
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	4303      	orrs	r3, r0
 800d52a:	3701      	adds	r7, #1
 800d52c:	9304      	str	r3, [sp, #16]
 800d52e:	7839      	ldrb	r1, [r7, #0]
 800d530:	4827      	ldr	r0, [pc, #156]	; (800d5d0 <_svfiprintf_r+0x1e4>)
 800d532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d536:	2206      	movs	r2, #6
 800d538:	1c7e      	adds	r6, r7, #1
 800d53a:	f7f2 fe69 	bl	8000210 <memchr>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d038      	beq.n	800d5b4 <_svfiprintf_r+0x1c8>
 800d542:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <_svfiprintf_r+0x1e8>)
 800d544:	bb13      	cbnz	r3, 800d58c <_svfiprintf_r+0x1a0>
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	3307      	adds	r3, #7
 800d54a:	f023 0307 	bic.w	r3, r3, #7
 800d54e:	3308      	adds	r3, #8
 800d550:	9303      	str	r3, [sp, #12]
 800d552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d554:	444b      	add	r3, r9
 800d556:	9309      	str	r3, [sp, #36]	; 0x24
 800d558:	e76d      	b.n	800d436 <_svfiprintf_r+0x4a>
 800d55a:	fb05 3202 	mla	r2, r5, r2, r3
 800d55e:	2001      	movs	r0, #1
 800d560:	460f      	mov	r7, r1
 800d562:	e7a6      	b.n	800d4b2 <_svfiprintf_r+0xc6>
 800d564:	2300      	movs	r3, #0
 800d566:	3701      	adds	r7, #1
 800d568:	9305      	str	r3, [sp, #20]
 800d56a:	4619      	mov	r1, r3
 800d56c:	250a      	movs	r5, #10
 800d56e:	4638      	mov	r0, r7
 800d570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d574:	3a30      	subs	r2, #48	; 0x30
 800d576:	2a09      	cmp	r2, #9
 800d578:	d903      	bls.n	800d582 <_svfiprintf_r+0x196>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0c8      	beq.n	800d510 <_svfiprintf_r+0x124>
 800d57e:	9105      	str	r1, [sp, #20]
 800d580:	e7c6      	b.n	800d510 <_svfiprintf_r+0x124>
 800d582:	fb05 2101 	mla	r1, r5, r1, r2
 800d586:	2301      	movs	r3, #1
 800d588:	4607      	mov	r7, r0
 800d58a:	e7f0      	b.n	800d56e <_svfiprintf_r+0x182>
 800d58c:	ab03      	add	r3, sp, #12
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	4622      	mov	r2, r4
 800d592:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <_svfiprintf_r+0x1ec>)
 800d594:	a904      	add	r1, sp, #16
 800d596:	4640      	mov	r0, r8
 800d598:	f3af 8000 	nop.w
 800d59c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d5a0:	4681      	mov	r9, r0
 800d5a2:	d1d6      	bne.n	800d552 <_svfiprintf_r+0x166>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	065b      	lsls	r3, r3, #25
 800d5a8:	f53f af35 	bmi.w	800d416 <_svfiprintf_r+0x2a>
 800d5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ae:	b01d      	add	sp, #116	; 0x74
 800d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b4:	ab03      	add	r3, sp, #12
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <_svfiprintf_r+0x1ec>)
 800d5bc:	a904      	add	r1, sp, #16
 800d5be:	4640      	mov	r0, r8
 800d5c0:	f000 f9c2 	bl	800d948 <_printf_i>
 800d5c4:	e7ea      	b.n	800d59c <_svfiprintf_r+0x1b0>
 800d5c6:	bf00      	nop
 800d5c8:	0800e6ce 	.word	0x0800e6ce
 800d5cc:	0800e6d4 	.word	0x0800e6d4
 800d5d0:	0800e6d8 	.word	0x0800e6d8
 800d5d4:	00000000 	.word	0x00000000
 800d5d8:	0800d339 	.word	0x0800d339

0800d5dc <__sfputc_r>:
 800d5dc:	6893      	ldr	r3, [r2, #8]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	b410      	push	{r4}
 800d5e4:	6093      	str	r3, [r2, #8]
 800d5e6:	da08      	bge.n	800d5fa <__sfputc_r+0x1e>
 800d5e8:	6994      	ldr	r4, [r2, #24]
 800d5ea:	42a3      	cmp	r3, r4
 800d5ec:	db01      	blt.n	800d5f2 <__sfputc_r+0x16>
 800d5ee:	290a      	cmp	r1, #10
 800d5f0:	d103      	bne.n	800d5fa <__sfputc_r+0x1e>
 800d5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f6:	f7ff bb43 	b.w	800cc80 <__swbuf_r>
 800d5fa:	6813      	ldr	r3, [r2, #0]
 800d5fc:	1c58      	adds	r0, r3, #1
 800d5fe:	6010      	str	r0, [r2, #0]
 800d600:	7019      	strb	r1, [r3, #0]
 800d602:	4608      	mov	r0, r1
 800d604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <__sfputs_r>:
 800d60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60c:	4606      	mov	r6, r0
 800d60e:	460f      	mov	r7, r1
 800d610:	4614      	mov	r4, r2
 800d612:	18d5      	adds	r5, r2, r3
 800d614:	42ac      	cmp	r4, r5
 800d616:	d101      	bne.n	800d61c <__sfputs_r+0x12>
 800d618:	2000      	movs	r0, #0
 800d61a:	e007      	b.n	800d62c <__sfputs_r+0x22>
 800d61c:	463a      	mov	r2, r7
 800d61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d622:	4630      	mov	r0, r6
 800d624:	f7ff ffda 	bl	800d5dc <__sfputc_r>
 800d628:	1c43      	adds	r3, r0, #1
 800d62a:	d1f3      	bne.n	800d614 <__sfputs_r+0xa>
 800d62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d630 <_vfiprintf_r>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	460c      	mov	r4, r1
 800d636:	b09d      	sub	sp, #116	; 0x74
 800d638:	4617      	mov	r7, r2
 800d63a:	461d      	mov	r5, r3
 800d63c:	4606      	mov	r6, r0
 800d63e:	b118      	cbz	r0, 800d648 <_vfiprintf_r+0x18>
 800d640:	6983      	ldr	r3, [r0, #24]
 800d642:	b90b      	cbnz	r3, 800d648 <_vfiprintf_r+0x18>
 800d644:	f7ff fccc 	bl	800cfe0 <__sinit>
 800d648:	4b7c      	ldr	r3, [pc, #496]	; (800d83c <_vfiprintf_r+0x20c>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d158      	bne.n	800d700 <_vfiprintf_r+0xd0>
 800d64e:	6874      	ldr	r4, [r6, #4]
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	0718      	lsls	r0, r3, #28
 800d654:	d55e      	bpl.n	800d714 <_vfiprintf_r+0xe4>
 800d656:	6923      	ldr	r3, [r4, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d05b      	beq.n	800d714 <_vfiprintf_r+0xe4>
 800d65c:	2300      	movs	r3, #0
 800d65e:	9309      	str	r3, [sp, #36]	; 0x24
 800d660:	2320      	movs	r3, #32
 800d662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d666:	2330      	movs	r3, #48	; 0x30
 800d668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d66c:	9503      	str	r5, [sp, #12]
 800d66e:	f04f 0b01 	mov.w	fp, #1
 800d672:	46b8      	mov	r8, r7
 800d674:	4645      	mov	r5, r8
 800d676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d67a:	b10b      	cbz	r3, 800d680 <_vfiprintf_r+0x50>
 800d67c:	2b25      	cmp	r3, #37	; 0x25
 800d67e:	d154      	bne.n	800d72a <_vfiprintf_r+0xfa>
 800d680:	ebb8 0a07 	subs.w	sl, r8, r7
 800d684:	d00b      	beq.n	800d69e <_vfiprintf_r+0x6e>
 800d686:	4653      	mov	r3, sl
 800d688:	463a      	mov	r2, r7
 800d68a:	4621      	mov	r1, r4
 800d68c:	4630      	mov	r0, r6
 800d68e:	f7ff ffbc 	bl	800d60a <__sfputs_r>
 800d692:	3001      	adds	r0, #1
 800d694:	f000 80c2 	beq.w	800d81c <_vfiprintf_r+0x1ec>
 800d698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69a:	4453      	add	r3, sl
 800d69c:	9309      	str	r3, [sp, #36]	; 0x24
 800d69e:	f898 3000 	ldrb.w	r3, [r8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 80ba 	beq.w	800d81c <_vfiprintf_r+0x1ec>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6b2:	9304      	str	r3, [sp, #16]
 800d6b4:	9307      	str	r3, [sp, #28]
 800d6b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d6bc:	46a8      	mov	r8, r5
 800d6be:	2205      	movs	r2, #5
 800d6c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d6c4:	485e      	ldr	r0, [pc, #376]	; (800d840 <_vfiprintf_r+0x210>)
 800d6c6:	f7f2 fda3 	bl	8000210 <memchr>
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	bb78      	cbnz	r0, 800d72e <_vfiprintf_r+0xfe>
 800d6ce:	06d9      	lsls	r1, r3, #27
 800d6d0:	bf44      	itt	mi
 800d6d2:	2220      	movmi	r2, #32
 800d6d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6d8:	071a      	lsls	r2, r3, #28
 800d6da:	bf44      	itt	mi
 800d6dc:	222b      	movmi	r2, #43	; 0x2b
 800d6de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6e2:	782a      	ldrb	r2, [r5, #0]
 800d6e4:	2a2a      	cmp	r2, #42	; 0x2a
 800d6e6:	d02a      	beq.n	800d73e <_vfiprintf_r+0x10e>
 800d6e8:	9a07      	ldr	r2, [sp, #28]
 800d6ea:	46a8      	mov	r8, r5
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	250a      	movs	r5, #10
 800d6f0:	4641      	mov	r1, r8
 800d6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f6:	3b30      	subs	r3, #48	; 0x30
 800d6f8:	2b09      	cmp	r3, #9
 800d6fa:	d969      	bls.n	800d7d0 <_vfiprintf_r+0x1a0>
 800d6fc:	b360      	cbz	r0, 800d758 <_vfiprintf_r+0x128>
 800d6fe:	e024      	b.n	800d74a <_vfiprintf_r+0x11a>
 800d700:	4b50      	ldr	r3, [pc, #320]	; (800d844 <_vfiprintf_r+0x214>)
 800d702:	429c      	cmp	r4, r3
 800d704:	d101      	bne.n	800d70a <_vfiprintf_r+0xda>
 800d706:	68b4      	ldr	r4, [r6, #8]
 800d708:	e7a2      	b.n	800d650 <_vfiprintf_r+0x20>
 800d70a:	4b4f      	ldr	r3, [pc, #316]	; (800d848 <_vfiprintf_r+0x218>)
 800d70c:	429c      	cmp	r4, r3
 800d70e:	bf08      	it	eq
 800d710:	68f4      	ldreq	r4, [r6, #12]
 800d712:	e79d      	b.n	800d650 <_vfiprintf_r+0x20>
 800d714:	4621      	mov	r1, r4
 800d716:	4630      	mov	r0, r6
 800d718:	f7ff fb04 	bl	800cd24 <__swsetup_r>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d09d      	beq.n	800d65c <_vfiprintf_r+0x2c>
 800d720:	f04f 30ff 	mov.w	r0, #4294967295
 800d724:	b01d      	add	sp, #116	; 0x74
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72a:	46a8      	mov	r8, r5
 800d72c:	e7a2      	b.n	800d674 <_vfiprintf_r+0x44>
 800d72e:	4a44      	ldr	r2, [pc, #272]	; (800d840 <_vfiprintf_r+0x210>)
 800d730:	1a80      	subs	r0, r0, r2
 800d732:	fa0b f000 	lsl.w	r0, fp, r0
 800d736:	4318      	orrs	r0, r3
 800d738:	9004      	str	r0, [sp, #16]
 800d73a:	4645      	mov	r5, r8
 800d73c:	e7be      	b.n	800d6bc <_vfiprintf_r+0x8c>
 800d73e:	9a03      	ldr	r2, [sp, #12]
 800d740:	1d11      	adds	r1, r2, #4
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	9103      	str	r1, [sp, #12]
 800d746:	2a00      	cmp	r2, #0
 800d748:	db01      	blt.n	800d74e <_vfiprintf_r+0x11e>
 800d74a:	9207      	str	r2, [sp, #28]
 800d74c:	e004      	b.n	800d758 <_vfiprintf_r+0x128>
 800d74e:	4252      	negs	r2, r2
 800d750:	f043 0302 	orr.w	r3, r3, #2
 800d754:	9207      	str	r2, [sp, #28]
 800d756:	9304      	str	r3, [sp, #16]
 800d758:	f898 3000 	ldrb.w	r3, [r8]
 800d75c:	2b2e      	cmp	r3, #46	; 0x2e
 800d75e:	d10e      	bne.n	800d77e <_vfiprintf_r+0x14e>
 800d760:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d764:	2b2a      	cmp	r3, #42	; 0x2a
 800d766:	d138      	bne.n	800d7da <_vfiprintf_r+0x1aa>
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	1d1a      	adds	r2, r3, #4
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	9203      	str	r2, [sp, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	bfb8      	it	lt
 800d774:	f04f 33ff 	movlt.w	r3, #4294967295
 800d778:	f108 0802 	add.w	r8, r8, #2
 800d77c:	9305      	str	r3, [sp, #20]
 800d77e:	4d33      	ldr	r5, [pc, #204]	; (800d84c <_vfiprintf_r+0x21c>)
 800d780:	f898 1000 	ldrb.w	r1, [r8]
 800d784:	2203      	movs	r2, #3
 800d786:	4628      	mov	r0, r5
 800d788:	f7f2 fd42 	bl	8000210 <memchr>
 800d78c:	b140      	cbz	r0, 800d7a0 <_vfiprintf_r+0x170>
 800d78e:	2340      	movs	r3, #64	; 0x40
 800d790:	1b40      	subs	r0, r0, r5
 800d792:	fa03 f000 	lsl.w	r0, r3, r0
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	4303      	orrs	r3, r0
 800d79a:	f108 0801 	add.w	r8, r8, #1
 800d79e:	9304      	str	r3, [sp, #16]
 800d7a0:	f898 1000 	ldrb.w	r1, [r8]
 800d7a4:	482a      	ldr	r0, [pc, #168]	; (800d850 <_vfiprintf_r+0x220>)
 800d7a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7aa:	2206      	movs	r2, #6
 800d7ac:	f108 0701 	add.w	r7, r8, #1
 800d7b0:	f7f2 fd2e 	bl	8000210 <memchr>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d037      	beq.n	800d828 <_vfiprintf_r+0x1f8>
 800d7b8:	4b26      	ldr	r3, [pc, #152]	; (800d854 <_vfiprintf_r+0x224>)
 800d7ba:	bb1b      	cbnz	r3, 800d804 <_vfiprintf_r+0x1d4>
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	3307      	adds	r3, #7
 800d7c0:	f023 0307 	bic.w	r3, r3, #7
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	9303      	str	r3, [sp, #12]
 800d7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ca:	444b      	add	r3, r9
 800d7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ce:	e750      	b.n	800d672 <_vfiprintf_r+0x42>
 800d7d0:	fb05 3202 	mla	r2, r5, r2, r3
 800d7d4:	2001      	movs	r0, #1
 800d7d6:	4688      	mov	r8, r1
 800d7d8:	e78a      	b.n	800d6f0 <_vfiprintf_r+0xc0>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f108 0801 	add.w	r8, r8, #1
 800d7e0:	9305      	str	r3, [sp, #20]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	250a      	movs	r5, #10
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7ec:	3a30      	subs	r2, #48	; 0x30
 800d7ee:	2a09      	cmp	r2, #9
 800d7f0:	d903      	bls.n	800d7fa <_vfiprintf_r+0x1ca>
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0c3      	beq.n	800d77e <_vfiprintf_r+0x14e>
 800d7f6:	9105      	str	r1, [sp, #20]
 800d7f8:	e7c1      	b.n	800d77e <_vfiprintf_r+0x14e>
 800d7fa:	fb05 2101 	mla	r1, r5, r1, r2
 800d7fe:	2301      	movs	r3, #1
 800d800:	4680      	mov	r8, r0
 800d802:	e7f0      	b.n	800d7e6 <_vfiprintf_r+0x1b6>
 800d804:	ab03      	add	r3, sp, #12
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	4622      	mov	r2, r4
 800d80a:	4b13      	ldr	r3, [pc, #76]	; (800d858 <_vfiprintf_r+0x228>)
 800d80c:	a904      	add	r1, sp, #16
 800d80e:	4630      	mov	r0, r6
 800d810:	f3af 8000 	nop.w
 800d814:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d818:	4681      	mov	r9, r0
 800d81a:	d1d5      	bne.n	800d7c8 <_vfiprintf_r+0x198>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	065b      	lsls	r3, r3, #25
 800d820:	f53f af7e 	bmi.w	800d720 <_vfiprintf_r+0xf0>
 800d824:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d826:	e77d      	b.n	800d724 <_vfiprintf_r+0xf4>
 800d828:	ab03      	add	r3, sp, #12
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	4622      	mov	r2, r4
 800d82e:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <_vfiprintf_r+0x228>)
 800d830:	a904      	add	r1, sp, #16
 800d832:	4630      	mov	r0, r6
 800d834:	f000 f888 	bl	800d948 <_printf_i>
 800d838:	e7ec      	b.n	800d814 <_vfiprintf_r+0x1e4>
 800d83a:	bf00      	nop
 800d83c:	0800e684 	.word	0x0800e684
 800d840:	0800e6ce 	.word	0x0800e6ce
 800d844:	0800e6a4 	.word	0x0800e6a4
 800d848:	0800e664 	.word	0x0800e664
 800d84c:	0800e6d4 	.word	0x0800e6d4
 800d850:	0800e6d8 	.word	0x0800e6d8
 800d854:	00000000 	.word	0x00000000
 800d858:	0800d60b 	.word	0x0800d60b

0800d85c <_printf_common>:
 800d85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	4691      	mov	r9, r2
 800d862:	461f      	mov	r7, r3
 800d864:	688a      	ldr	r2, [r1, #8]
 800d866:	690b      	ldr	r3, [r1, #16]
 800d868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d86c:	4293      	cmp	r3, r2
 800d86e:	bfb8      	it	lt
 800d870:	4613      	movlt	r3, r2
 800d872:	f8c9 3000 	str.w	r3, [r9]
 800d876:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d87a:	4606      	mov	r6, r0
 800d87c:	460c      	mov	r4, r1
 800d87e:	b112      	cbz	r2, 800d886 <_printf_common+0x2a>
 800d880:	3301      	adds	r3, #1
 800d882:	f8c9 3000 	str.w	r3, [r9]
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	0699      	lsls	r1, r3, #26
 800d88a:	bf42      	ittt	mi
 800d88c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d890:	3302      	addmi	r3, #2
 800d892:	f8c9 3000 	strmi.w	r3, [r9]
 800d896:	6825      	ldr	r5, [r4, #0]
 800d898:	f015 0506 	ands.w	r5, r5, #6
 800d89c:	d107      	bne.n	800d8ae <_printf_common+0x52>
 800d89e:	f104 0a19 	add.w	sl, r4, #25
 800d8a2:	68e3      	ldr	r3, [r4, #12]
 800d8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	42ab      	cmp	r3, r5
 800d8ac:	dc28      	bgt.n	800d900 <_printf_common+0xa4>
 800d8ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	3300      	adds	r3, #0
 800d8b6:	bf18      	it	ne
 800d8b8:	2301      	movne	r3, #1
 800d8ba:	0692      	lsls	r2, r2, #26
 800d8bc:	d42d      	bmi.n	800d91a <_printf_common+0xbe>
 800d8be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	47c0      	blx	r8
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	d020      	beq.n	800d90e <_printf_common+0xb2>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	68e5      	ldr	r5, [r4, #12]
 800d8d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d8d4:	f003 0306 	and.w	r3, r3, #6
 800d8d8:	2b04      	cmp	r3, #4
 800d8da:	bf08      	it	eq
 800d8dc:	1aad      	subeq	r5, r5, r2
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	6922      	ldr	r2, [r4, #16]
 800d8e2:	bf0c      	ite	eq
 800d8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8e8:	2500      	movne	r5, #0
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	bfc4      	itt	gt
 800d8ee:	1a9b      	subgt	r3, r3, r2
 800d8f0:	18ed      	addgt	r5, r5, r3
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	341a      	adds	r4, #26
 800d8f8:	454d      	cmp	r5, r9
 800d8fa:	d11a      	bne.n	800d932 <_printf_common+0xd6>
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	e008      	b.n	800d912 <_printf_common+0xb6>
 800d900:	2301      	movs	r3, #1
 800d902:	4652      	mov	r2, sl
 800d904:	4639      	mov	r1, r7
 800d906:	4630      	mov	r0, r6
 800d908:	47c0      	blx	r8
 800d90a:	3001      	adds	r0, #1
 800d90c:	d103      	bne.n	800d916 <_printf_common+0xba>
 800d90e:	f04f 30ff 	mov.w	r0, #4294967295
 800d912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d916:	3501      	adds	r5, #1
 800d918:	e7c3      	b.n	800d8a2 <_printf_common+0x46>
 800d91a:	18e1      	adds	r1, r4, r3
 800d91c:	1c5a      	adds	r2, r3, #1
 800d91e:	2030      	movs	r0, #48	; 0x30
 800d920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d924:	4422      	add	r2, r4
 800d926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d92a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d92e:	3302      	adds	r3, #2
 800d930:	e7c5      	b.n	800d8be <_printf_common+0x62>
 800d932:	2301      	movs	r3, #1
 800d934:	4622      	mov	r2, r4
 800d936:	4639      	mov	r1, r7
 800d938:	4630      	mov	r0, r6
 800d93a:	47c0      	blx	r8
 800d93c:	3001      	adds	r0, #1
 800d93e:	d0e6      	beq.n	800d90e <_printf_common+0xb2>
 800d940:	f109 0901 	add.w	r9, r9, #1
 800d944:	e7d8      	b.n	800d8f8 <_printf_common+0x9c>
	...

0800d948 <_printf_i>:
 800d948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d94c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d950:	460c      	mov	r4, r1
 800d952:	7e09      	ldrb	r1, [r1, #24]
 800d954:	b085      	sub	sp, #20
 800d956:	296e      	cmp	r1, #110	; 0x6e
 800d958:	4617      	mov	r7, r2
 800d95a:	4606      	mov	r6, r0
 800d95c:	4698      	mov	r8, r3
 800d95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d960:	f000 80b3 	beq.w	800daca <_printf_i+0x182>
 800d964:	d822      	bhi.n	800d9ac <_printf_i+0x64>
 800d966:	2963      	cmp	r1, #99	; 0x63
 800d968:	d036      	beq.n	800d9d8 <_printf_i+0x90>
 800d96a:	d80a      	bhi.n	800d982 <_printf_i+0x3a>
 800d96c:	2900      	cmp	r1, #0
 800d96e:	f000 80b9 	beq.w	800dae4 <_printf_i+0x19c>
 800d972:	2958      	cmp	r1, #88	; 0x58
 800d974:	f000 8083 	beq.w	800da7e <_printf_i+0x136>
 800d978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d97c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d980:	e032      	b.n	800d9e8 <_printf_i+0xa0>
 800d982:	2964      	cmp	r1, #100	; 0x64
 800d984:	d001      	beq.n	800d98a <_printf_i+0x42>
 800d986:	2969      	cmp	r1, #105	; 0x69
 800d988:	d1f6      	bne.n	800d978 <_printf_i+0x30>
 800d98a:	6820      	ldr	r0, [r4, #0]
 800d98c:	6813      	ldr	r3, [r2, #0]
 800d98e:	0605      	lsls	r5, r0, #24
 800d990:	f103 0104 	add.w	r1, r3, #4
 800d994:	d52a      	bpl.n	800d9ec <_printf_i+0xa4>
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6011      	str	r1, [r2, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	da03      	bge.n	800d9a6 <_printf_i+0x5e>
 800d99e:	222d      	movs	r2, #45	; 0x2d
 800d9a0:	425b      	negs	r3, r3
 800d9a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d9a6:	486f      	ldr	r0, [pc, #444]	; (800db64 <_printf_i+0x21c>)
 800d9a8:	220a      	movs	r2, #10
 800d9aa:	e039      	b.n	800da20 <_printf_i+0xd8>
 800d9ac:	2973      	cmp	r1, #115	; 0x73
 800d9ae:	f000 809d 	beq.w	800daec <_printf_i+0x1a4>
 800d9b2:	d808      	bhi.n	800d9c6 <_printf_i+0x7e>
 800d9b4:	296f      	cmp	r1, #111	; 0x6f
 800d9b6:	d020      	beq.n	800d9fa <_printf_i+0xb2>
 800d9b8:	2970      	cmp	r1, #112	; 0x70
 800d9ba:	d1dd      	bne.n	800d978 <_printf_i+0x30>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	f043 0320 	orr.w	r3, r3, #32
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	e003      	b.n	800d9ce <_printf_i+0x86>
 800d9c6:	2975      	cmp	r1, #117	; 0x75
 800d9c8:	d017      	beq.n	800d9fa <_printf_i+0xb2>
 800d9ca:	2978      	cmp	r1, #120	; 0x78
 800d9cc:	d1d4      	bne.n	800d978 <_printf_i+0x30>
 800d9ce:	2378      	movs	r3, #120	; 0x78
 800d9d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9d4:	4864      	ldr	r0, [pc, #400]	; (800db68 <_printf_i+0x220>)
 800d9d6:	e055      	b.n	800da84 <_printf_i+0x13c>
 800d9d8:	6813      	ldr	r3, [r2, #0]
 800d9da:	1d19      	adds	r1, r3, #4
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6011      	str	r1, [r2, #0]
 800d9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e08c      	b.n	800db06 <_printf_i+0x1be>
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6011      	str	r1, [r2, #0]
 800d9f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9f4:	bf18      	it	ne
 800d9f6:	b21b      	sxthne	r3, r3
 800d9f8:	e7cf      	b.n	800d99a <_printf_i+0x52>
 800d9fa:	6813      	ldr	r3, [r2, #0]
 800d9fc:	6825      	ldr	r5, [r4, #0]
 800d9fe:	1d18      	adds	r0, r3, #4
 800da00:	6010      	str	r0, [r2, #0]
 800da02:	0628      	lsls	r0, r5, #24
 800da04:	d501      	bpl.n	800da0a <_printf_i+0xc2>
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	e002      	b.n	800da10 <_printf_i+0xc8>
 800da0a:	0668      	lsls	r0, r5, #25
 800da0c:	d5fb      	bpl.n	800da06 <_printf_i+0xbe>
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	4854      	ldr	r0, [pc, #336]	; (800db64 <_printf_i+0x21c>)
 800da12:	296f      	cmp	r1, #111	; 0x6f
 800da14:	bf14      	ite	ne
 800da16:	220a      	movne	r2, #10
 800da18:	2208      	moveq	r2, #8
 800da1a:	2100      	movs	r1, #0
 800da1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da20:	6865      	ldr	r5, [r4, #4]
 800da22:	60a5      	str	r5, [r4, #8]
 800da24:	2d00      	cmp	r5, #0
 800da26:	f2c0 8095 	blt.w	800db54 <_printf_i+0x20c>
 800da2a:	6821      	ldr	r1, [r4, #0]
 800da2c:	f021 0104 	bic.w	r1, r1, #4
 800da30:	6021      	str	r1, [r4, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d13d      	bne.n	800dab2 <_printf_i+0x16a>
 800da36:	2d00      	cmp	r5, #0
 800da38:	f040 808e 	bne.w	800db58 <_printf_i+0x210>
 800da3c:	4665      	mov	r5, ip
 800da3e:	2a08      	cmp	r2, #8
 800da40:	d10b      	bne.n	800da5a <_printf_i+0x112>
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	07db      	lsls	r3, r3, #31
 800da46:	d508      	bpl.n	800da5a <_printf_i+0x112>
 800da48:	6923      	ldr	r3, [r4, #16]
 800da4a:	6862      	ldr	r2, [r4, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	bfde      	ittt	le
 800da50:	2330      	movle	r3, #48	; 0x30
 800da52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da56:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da5a:	ebac 0305 	sub.w	r3, ip, r5
 800da5e:	6123      	str	r3, [r4, #16]
 800da60:	f8cd 8000 	str.w	r8, [sp]
 800da64:	463b      	mov	r3, r7
 800da66:	aa03      	add	r2, sp, #12
 800da68:	4621      	mov	r1, r4
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7ff fef6 	bl	800d85c <_printf_common>
 800da70:	3001      	adds	r0, #1
 800da72:	d14d      	bne.n	800db10 <_printf_i+0x1c8>
 800da74:	f04f 30ff 	mov.w	r0, #4294967295
 800da78:	b005      	add	sp, #20
 800da7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da7e:	4839      	ldr	r0, [pc, #228]	; (800db64 <_printf_i+0x21c>)
 800da80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800da84:	6813      	ldr	r3, [r2, #0]
 800da86:	6821      	ldr	r1, [r4, #0]
 800da88:	1d1d      	adds	r5, r3, #4
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6015      	str	r5, [r2, #0]
 800da8e:	060a      	lsls	r2, r1, #24
 800da90:	d50b      	bpl.n	800daaa <_printf_i+0x162>
 800da92:	07ca      	lsls	r2, r1, #31
 800da94:	bf44      	itt	mi
 800da96:	f041 0120 	orrmi.w	r1, r1, #32
 800da9a:	6021      	strmi	r1, [r4, #0]
 800da9c:	b91b      	cbnz	r3, 800daa6 <_printf_i+0x15e>
 800da9e:	6822      	ldr	r2, [r4, #0]
 800daa0:	f022 0220 	bic.w	r2, r2, #32
 800daa4:	6022      	str	r2, [r4, #0]
 800daa6:	2210      	movs	r2, #16
 800daa8:	e7b7      	b.n	800da1a <_printf_i+0xd2>
 800daaa:	064d      	lsls	r5, r1, #25
 800daac:	bf48      	it	mi
 800daae:	b29b      	uxthmi	r3, r3
 800dab0:	e7ef      	b.n	800da92 <_printf_i+0x14a>
 800dab2:	4665      	mov	r5, ip
 800dab4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dab8:	fb02 3311 	mls	r3, r2, r1, r3
 800dabc:	5cc3      	ldrb	r3, [r0, r3]
 800dabe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dac2:	460b      	mov	r3, r1
 800dac4:	2900      	cmp	r1, #0
 800dac6:	d1f5      	bne.n	800dab4 <_printf_i+0x16c>
 800dac8:	e7b9      	b.n	800da3e <_printf_i+0xf6>
 800daca:	6813      	ldr	r3, [r2, #0]
 800dacc:	6825      	ldr	r5, [r4, #0]
 800dace:	6961      	ldr	r1, [r4, #20]
 800dad0:	1d18      	adds	r0, r3, #4
 800dad2:	6010      	str	r0, [r2, #0]
 800dad4:	0628      	lsls	r0, r5, #24
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	d501      	bpl.n	800dade <_printf_i+0x196>
 800dada:	6019      	str	r1, [r3, #0]
 800dadc:	e002      	b.n	800dae4 <_printf_i+0x19c>
 800dade:	066a      	lsls	r2, r5, #25
 800dae0:	d5fb      	bpl.n	800dada <_printf_i+0x192>
 800dae2:	8019      	strh	r1, [r3, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	6123      	str	r3, [r4, #16]
 800dae8:	4665      	mov	r5, ip
 800daea:	e7b9      	b.n	800da60 <_printf_i+0x118>
 800daec:	6813      	ldr	r3, [r2, #0]
 800daee:	1d19      	adds	r1, r3, #4
 800daf0:	6011      	str	r1, [r2, #0]
 800daf2:	681d      	ldr	r5, [r3, #0]
 800daf4:	6862      	ldr	r2, [r4, #4]
 800daf6:	2100      	movs	r1, #0
 800daf8:	4628      	mov	r0, r5
 800dafa:	f7f2 fb89 	bl	8000210 <memchr>
 800dafe:	b108      	cbz	r0, 800db04 <_printf_i+0x1bc>
 800db00:	1b40      	subs	r0, r0, r5
 800db02:	6060      	str	r0, [r4, #4]
 800db04:	6863      	ldr	r3, [r4, #4]
 800db06:	6123      	str	r3, [r4, #16]
 800db08:	2300      	movs	r3, #0
 800db0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0e:	e7a7      	b.n	800da60 <_printf_i+0x118>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	462a      	mov	r2, r5
 800db14:	4639      	mov	r1, r7
 800db16:	4630      	mov	r0, r6
 800db18:	47c0      	blx	r8
 800db1a:	3001      	adds	r0, #1
 800db1c:	d0aa      	beq.n	800da74 <_printf_i+0x12c>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	079b      	lsls	r3, r3, #30
 800db22:	d413      	bmi.n	800db4c <_printf_i+0x204>
 800db24:	68e0      	ldr	r0, [r4, #12]
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	4298      	cmp	r0, r3
 800db2a:	bfb8      	it	lt
 800db2c:	4618      	movlt	r0, r3
 800db2e:	e7a3      	b.n	800da78 <_printf_i+0x130>
 800db30:	2301      	movs	r3, #1
 800db32:	464a      	mov	r2, r9
 800db34:	4639      	mov	r1, r7
 800db36:	4630      	mov	r0, r6
 800db38:	47c0      	blx	r8
 800db3a:	3001      	adds	r0, #1
 800db3c:	d09a      	beq.n	800da74 <_printf_i+0x12c>
 800db3e:	3501      	adds	r5, #1
 800db40:	68e3      	ldr	r3, [r4, #12]
 800db42:	9a03      	ldr	r2, [sp, #12]
 800db44:	1a9b      	subs	r3, r3, r2
 800db46:	42ab      	cmp	r3, r5
 800db48:	dcf2      	bgt.n	800db30 <_printf_i+0x1e8>
 800db4a:	e7eb      	b.n	800db24 <_printf_i+0x1dc>
 800db4c:	2500      	movs	r5, #0
 800db4e:	f104 0919 	add.w	r9, r4, #25
 800db52:	e7f5      	b.n	800db40 <_printf_i+0x1f8>
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1ac      	bne.n	800dab2 <_printf_i+0x16a>
 800db58:	7803      	ldrb	r3, [r0, #0]
 800db5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db62:	e76c      	b.n	800da3e <_printf_i+0xf6>
 800db64:	0800e6df 	.word	0x0800e6df
 800db68:	0800e6f0 	.word	0x0800e6f0

0800db6c <_sbrk_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4c06      	ldr	r4, [pc, #24]	; (800db88 <_sbrk_r+0x1c>)
 800db70:	2300      	movs	r3, #0
 800db72:	4605      	mov	r5, r0
 800db74:	4608      	mov	r0, r1
 800db76:	6023      	str	r3, [r4, #0]
 800db78:	f7f6 f984 	bl	8003e84 <_sbrk>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_sbrk_r+0x1a>
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	b103      	cbz	r3, 800db86 <_sbrk_r+0x1a>
 800db84:	602b      	str	r3, [r5, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	20005164 	.word	0x20005164

0800db8c <__sread>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	460c      	mov	r4, r1
 800db90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db94:	f000 f8e2 	bl	800dd5c <_read_r>
 800db98:	2800      	cmp	r0, #0
 800db9a:	bfab      	itete	ge
 800db9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db9e:	89a3      	ldrhlt	r3, [r4, #12]
 800dba0:	181b      	addge	r3, r3, r0
 800dba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dba6:	bfac      	ite	ge
 800dba8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbaa:	81a3      	strhlt	r3, [r4, #12]
 800dbac:	bd10      	pop	{r4, pc}

0800dbae <__swrite>:
 800dbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb2:	461f      	mov	r7, r3
 800dbb4:	898b      	ldrh	r3, [r1, #12]
 800dbb6:	05db      	lsls	r3, r3, #23
 800dbb8:	4605      	mov	r5, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	4616      	mov	r6, r2
 800dbbe:	d505      	bpl.n	800dbcc <__swrite+0x1e>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc8:	f000 f874 	bl	800dcb4 <_lseek_r>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	4632      	mov	r2, r6
 800dbda:	463b      	mov	r3, r7
 800dbdc:	4628      	mov	r0, r5
 800dbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe2:	f000 b823 	b.w	800dc2c <_write_r>

0800dbe6 <__sseek>:
 800dbe6:	b510      	push	{r4, lr}
 800dbe8:	460c      	mov	r4, r1
 800dbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbee:	f000 f861 	bl	800dcb4 <_lseek_r>
 800dbf2:	1c43      	adds	r3, r0, #1
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	bf15      	itete	ne
 800dbf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc02:	81a3      	strheq	r3, [r4, #12]
 800dc04:	bf18      	it	ne
 800dc06:	81a3      	strhne	r3, [r4, #12]
 800dc08:	bd10      	pop	{r4, pc}

0800dc0a <__sclose>:
 800dc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0e:	f000 b81f 	b.w	800dc50 <_close_r>

0800dc12 <__ascii_wctomb>:
 800dc12:	b149      	cbz	r1, 800dc28 <__ascii_wctomb+0x16>
 800dc14:	2aff      	cmp	r2, #255	; 0xff
 800dc16:	bf85      	ittet	hi
 800dc18:	238a      	movhi	r3, #138	; 0x8a
 800dc1a:	6003      	strhi	r3, [r0, #0]
 800dc1c:	700a      	strbls	r2, [r1, #0]
 800dc1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc22:	bf98      	it	ls
 800dc24:	2001      	movls	r0, #1
 800dc26:	4770      	bx	lr
 800dc28:	4608      	mov	r0, r1
 800dc2a:	4770      	bx	lr

0800dc2c <_write_r>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	4c07      	ldr	r4, [pc, #28]	; (800dc4c <_write_r+0x20>)
 800dc30:	4605      	mov	r5, r0
 800dc32:	4608      	mov	r0, r1
 800dc34:	4611      	mov	r1, r2
 800dc36:	2200      	movs	r2, #0
 800dc38:	6022      	str	r2, [r4, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f7f6 f8d1 	bl	8003de2 <_write>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d102      	bne.n	800dc4a <_write_r+0x1e>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	b103      	cbz	r3, 800dc4a <_write_r+0x1e>
 800dc48:	602b      	str	r3, [r5, #0]
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	20005164 	.word	0x20005164

0800dc50 <_close_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4c06      	ldr	r4, [pc, #24]	; (800dc6c <_close_r+0x1c>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4605      	mov	r5, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	f7f6 f8dd 	bl	8003e1a <_close>
 800dc60:	1c43      	adds	r3, r0, #1
 800dc62:	d102      	bne.n	800dc6a <_close_r+0x1a>
 800dc64:	6823      	ldr	r3, [r4, #0]
 800dc66:	b103      	cbz	r3, 800dc6a <_close_r+0x1a>
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	bd38      	pop	{r3, r4, r5, pc}
 800dc6c:	20005164 	.word	0x20005164

0800dc70 <_fstat_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4c07      	ldr	r4, [pc, #28]	; (800dc90 <_fstat_r+0x20>)
 800dc74:	2300      	movs	r3, #0
 800dc76:	4605      	mov	r5, r0
 800dc78:	4608      	mov	r0, r1
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	f7f6 f8d8 	bl	8003e32 <_fstat>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d102      	bne.n	800dc8c <_fstat_r+0x1c>
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	b103      	cbz	r3, 800dc8c <_fstat_r+0x1c>
 800dc8a:	602b      	str	r3, [r5, #0]
 800dc8c:	bd38      	pop	{r3, r4, r5, pc}
 800dc8e:	bf00      	nop
 800dc90:	20005164 	.word	0x20005164

0800dc94 <_isatty_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4c06      	ldr	r4, [pc, #24]	; (800dcb0 <_isatty_r+0x1c>)
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	4608      	mov	r0, r1
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	f7f6 f8d7 	bl	8003e52 <_isatty>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d102      	bne.n	800dcae <_isatty_r+0x1a>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	b103      	cbz	r3, 800dcae <_isatty_r+0x1a>
 800dcac:	602b      	str	r3, [r5, #0]
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	20005164 	.word	0x20005164

0800dcb4 <_lseek_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4c07      	ldr	r4, [pc, #28]	; (800dcd4 <_lseek_r+0x20>)
 800dcb8:	4605      	mov	r5, r0
 800dcba:	4608      	mov	r0, r1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	6022      	str	r2, [r4, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f7f6 f8d0 	bl	8003e68 <_lseek>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_lseek_r+0x1e>
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_lseek_r+0x1e>
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	20005164 	.word	0x20005164

0800dcd8 <memmove>:
 800dcd8:	4288      	cmp	r0, r1
 800dcda:	b510      	push	{r4, lr}
 800dcdc:	eb01 0302 	add.w	r3, r1, r2
 800dce0:	d807      	bhi.n	800dcf2 <memmove+0x1a>
 800dce2:	1e42      	subs	r2, r0, #1
 800dce4:	4299      	cmp	r1, r3
 800dce6:	d00a      	beq.n	800dcfe <memmove+0x26>
 800dce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcec:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dcf0:	e7f8      	b.n	800dce4 <memmove+0xc>
 800dcf2:	4283      	cmp	r3, r0
 800dcf4:	d9f5      	bls.n	800dce2 <memmove+0xa>
 800dcf6:	1881      	adds	r1, r0, r2
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	42d3      	cmn	r3, r2
 800dcfc:	d100      	bne.n	800dd00 <memmove+0x28>
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dd08:	e7f7      	b.n	800dcfa <memmove+0x22>

0800dd0a <__malloc_lock>:
 800dd0a:	4770      	bx	lr

0800dd0c <__malloc_unlock>:
 800dd0c:	4770      	bx	lr

0800dd0e <_realloc_r>:
 800dd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd10:	4607      	mov	r7, r0
 800dd12:	4614      	mov	r4, r2
 800dd14:	460e      	mov	r6, r1
 800dd16:	b921      	cbnz	r1, 800dd22 <_realloc_r+0x14>
 800dd18:	4611      	mov	r1, r2
 800dd1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd1e:	f7ff bab1 	b.w	800d284 <_malloc_r>
 800dd22:	b922      	cbnz	r2, 800dd2e <_realloc_r+0x20>
 800dd24:	f7ff fa60 	bl	800d1e8 <_free_r>
 800dd28:	4625      	mov	r5, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd2e:	f000 f827 	bl	800dd80 <_malloc_usable_size_r>
 800dd32:	42a0      	cmp	r0, r4
 800dd34:	d20f      	bcs.n	800dd56 <_realloc_r+0x48>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4638      	mov	r0, r7
 800dd3a:	f7ff faa3 	bl	800d284 <_malloc_r>
 800dd3e:	4605      	mov	r5, r0
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d0f2      	beq.n	800dd2a <_realloc_r+0x1c>
 800dd44:	4631      	mov	r1, r6
 800dd46:	4622      	mov	r2, r4
 800dd48:	f7fe fe20 	bl	800c98c <memcpy>
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4638      	mov	r0, r7
 800dd50:	f7ff fa4a 	bl	800d1e8 <_free_r>
 800dd54:	e7e9      	b.n	800dd2a <_realloc_r+0x1c>
 800dd56:	4635      	mov	r5, r6
 800dd58:	e7e7      	b.n	800dd2a <_realloc_r+0x1c>
	...

0800dd5c <_read_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4c07      	ldr	r4, [pc, #28]	; (800dd7c <_read_r+0x20>)
 800dd60:	4605      	mov	r5, r0
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	6022      	str	r2, [r4, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	f7f6 f81c 	bl	8003da8 <_read>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_read_r+0x1e>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_read_r+0x1e>
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20005164 	.word	0x20005164

0800dd80 <_malloc_usable_size_r>:
 800dd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd84:	1f18      	subs	r0, r3, #4
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	bfbc      	itt	lt
 800dd8a:	580b      	ldrlt	r3, [r1, r0]
 800dd8c:	18c0      	addlt	r0, r0, r3
 800dd8e:	4770      	bx	lr

0800dd90 <trunc>:
 800dd90:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800dd94:	ec5c bb10 	vmov	fp, ip, d0
 800dd98:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800dd9c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800dda0:	2913      	cmp	r1, #19
 800dda2:	4664      	mov	r4, ip
 800dda4:	dc11      	bgt.n	800ddca <trunc+0x3a>
 800dda6:	2900      	cmp	r1, #0
 800dda8:	bfa7      	ittee	ge
 800ddaa:	4b15      	ldrge	r3, [pc, #84]	; (800de00 <trunc+0x70>)
 800ddac:	fa43 f101 	asrge.w	r1, r3, r1
 800ddb0:	2200      	movlt	r2, #0
 800ddb2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800ddb6:	bfa4      	itt	ge
 800ddb8:	2200      	movge	r2, #0
 800ddba:	ea2c 0301 	bicge.w	r3, ip, r1
 800ddbe:	4693      	mov	fp, r2
 800ddc0:	469c      	mov	ip, r3
 800ddc2:	ec4c bb10 	vmov	d0, fp, ip
 800ddc6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800ddca:	2933      	cmp	r1, #51	; 0x33
 800ddcc:	dd0d      	ble.n	800ddea <trunc+0x5a>
 800ddce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ddd2:	d1f6      	bne.n	800ddc2 <trunc+0x32>
 800ddd4:	4663      	mov	r3, ip
 800ddd6:	ee10 2a10 	vmov	r2, s0
 800ddda:	ee10 0a10 	vmov	r0, s0
 800ddde:	4621      	mov	r1, r4
 800dde0:	f7f2 fa6c 	bl	80002bc <__adddf3>
 800dde4:	4683      	mov	fp, r0
 800dde6:	468c      	mov	ip, r1
 800dde8:	e7eb      	b.n	800ddc2 <trunc+0x32>
 800ddea:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800ddee:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf2:	fa23 f000 	lsr.w	r0, r3, r0
 800ddf6:	ea2b 0600 	bic.w	r6, fp, r0
 800ddfa:	46b3      	mov	fp, r6
 800ddfc:	46a4      	mov	ip, r4
 800ddfe:	e7e0      	b.n	800ddc2 <trunc+0x32>
 800de00:	000fffff 	.word	0x000fffff

0800de04 <_init>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	bf00      	nop
 800de08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0a:	bc08      	pop	{r3}
 800de0c:	469e      	mov	lr, r3
 800de0e:	4770      	bx	lr

0800de10 <_fini>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	bf00      	nop
 800de14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de16:	bc08      	pop	{r3}
 800de18:	469e      	mov	lr, r3
 800de1a:	4770      	bx	lr
